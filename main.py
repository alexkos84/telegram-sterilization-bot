import os
import telebot
from telebot import types
from datetime import datetime
import time
import logging
import requests
from bs4 import BeautifulSoup
import re
from typing import List, Dict, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–æ—à–∫–∞–º, —Å–æ–±–∞–∫–∞–º –∏ —Ç–æ–≤–∞—Ä–∞–º"""
    
    def __init__(self):
        self.channel_username = 'Lapki_ruchki_Yalta_help'
        self.channel_url = f'https://t.me/{self.channel_username}'
        self.web_url = f'https://t.me/s/{self.channel_username}'
        self.headers = {'User-Agent': 'Mozilla/5.0'}
        self.posts_cache = []
        self.last_update = None

    def get_posts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤"""
        try:
            if self._should_update_cache():
                response = requests.get(self.web_url, headers=self.headers, timeout=10)
                soup = BeautifulSoup(response.text, 'html.parser')
                self.posts_cache = [self._parse_post(post) for post in soup.find_all('div', class_='tgme_widget_message')[:20]]
                self.last_update = datetime.now()

            return self.posts_cache[:limit]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
            return self._get_mock_posts()

    def _should_update_cache(self) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à"""
        return (not self.last_update or 
                (datetime.now() - self.last_update).seconds > 1800)

    def _parse_post(self, post) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            text_div = post.find('div', class_='tgme_widget_message_text')
            if not text_div:
                return None

            text = text_div.get_text('\n').strip()
            photo_url = self._extract_photo_url(post)
            
            return {
                'text': text,
                'photo_url': photo_url,
                'is_cat': self._is_cat(text),
                'is_dog': self._is_dog(text),
                'is_free': self._is_free(text),
                'date': self._extract_date(post)
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞: {str(e)}")
            return None

    def _extract_photo_url(self, post) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ"""
        photo_div = post.find('a', class_='tgme_widget_message_photo_wrap')
        if photo_div and 'style' in photo_div.attrs:
            match = re.search(r"url\('(.*?)'\)", photo_div['style'])
            return match.group(1) if match else None
        return None

    def _extract_date(self, post) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã"""
        time_tag = post.find('time')
        if time_tag and 'datetime' in time_tag.attrs:
            return time_tag['datetime'][:10]
        return "–ù–µ–¥–∞–≤–Ω–æ"

    def _is_cat(self, text: str) -> bool:
        keywords = ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä', '–º—è—É']
        return any(word in text.lower() for word in keywords)

    def _is_dog(self, text: str) -> bool:
        keywords = ['—Å–æ–±–∞–∫–∞', '—â–µ–Ω', '–ø–µ—Å', '–ø—ë—Å', '–≥–∞–≤', '–ª–∞–π']
        return any(word in text.lower() for word in keywords)

    def _is_free(self, text: str) -> bool:
        keywords = [
            '–æ—Ç–¥–∞–º', '–¥–∞—Ä–æ–º', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–ª–µ–∂–∞–Ω–∫–∞', '–∫–æ—Ä–º', 
            '–ª–æ—Ç–æ–∫', '–ø–æ–≤–æ–¥–æ–∫', '–æ—à–µ–π–Ω–∏–∫', '–ª–µ–∫–∞—Ä—Å—Ç–≤', '—à–ª–µ–π–∫'
        ]
        return any(word in text.lower() for word in keywords)

    def _get_mock_posts(self) -> List[Dict]:
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        return [
            {
                'text': "–ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º. –í–æ–∑—Ä–∞—Å—Ç 2 –º–µ—Å—è—Ü–∞, –∏–≥—Ä–∏–≤—ã–π.",
                'photo_url': 'https://via.placeholder.com/600x400?text=–ö–æ—Ç–µ–Ω–æ–∫',
                'is_cat': True,
                'is_dog': False,
                'is_free': False,
                'date': datetime.now().strftime('%Y-%m-%d')
            },
            {
                'text': "–ü–µ—Å –ë–∞—Ä—Å–∏–∫. –í–∑—Ä–æ—Å–ª—ã–π, –ø—Ä–∏–≤–∏—Ç, –∏—â–µ—Ç —Ö–æ–∑—è–∏–Ω–∞.",
                'photo_url': 'https://via.placeholder.com/600x400?text=–°–æ–±–∞–∫–∞',
                'is_cat': False,
                'is_dog': True,
                'is_free': False,
                'date': datetime.now().strftime('%Y-%m-%d')
            },
            {
                'text': "–û—Ç–¥–∞–º –¥–∞—Ä–æ–º –ª–µ–∂–∞–Ω–∫—É –¥–ª—è —Å–æ–±–∞–∫–∏. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ.",
                'photo_url': 'https://via.placeholder.com/600x400?text=–õ–µ–∂–∞–Ω–∫–∞',
                'is_cat': False,
                'is_dog': False,
                'is_free': True,
                'date': datetime.now().strftime('%Y-%m-%d')
            }
        ]

class PetsBot:
    def __init__(self):
        self.token = os.getenv('TOKEN')
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
            
        self.bot = telebot.TeleBot(self.token)
        self.parser = ChannelParser()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.bot.message_handler(commands=['start'])(self.send_welcome)
        self.bot.message_handler(func=lambda m: m.text in ['üê± –ö–æ—à–∫–∏', 'üê∂ –°–æ–±–∞–∫–∏', 'üéÅ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º'])(self.handle_category)
        self.bot.message_handler(func=lambda m: m.text == 'üîô –ù–∞–∑–∞–¥')(self.send_welcome)

    def _create_keyboard(self, include_back: bool = True) -> types.ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add('üê± –ö–æ—à–∫–∏', 'üê∂ –°–æ–±–∞–∫–∏', 'üéÅ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º')
        if include_back:
            markup.add('üîô –ù–∞–∑–∞–¥')
        return markup

    def send_welcome(self, message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.bot.send_message(
            message.chat.id,
            "üêæ <b>–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ø–ª—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=self._create_keyboard(include_back=False)
        )

    def handle_category(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        if message.text == 'üê± –ö–æ—à–∫–∏':
            self._send_posts(message.chat.id, '–∫–æ—à–µ–∫', lambda p: p['is_cat'])
        elif message.text == 'üê∂ –°–æ–±–∞–∫–∏':
            self._send_posts(message.chat.id, '—Å–æ–±–∞–∫', lambda p: p['is_dog'])
        elif message.text == 'üéÅ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º':
            self._send_posts(message.chat.id, '—Ç–æ–≤–∞—Ä–æ–≤', lambda p: p['is_free'])

    def _send_posts(self, chat_id: int, category: str, filter_func):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        posts = [p for p in self.parser.get_posts() if filter_func(p)][:3]
        
        if not posts:
            self.bot.send_message(
                chat_id,
                f"üòø –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                reply_markup=self._create_keyboard()
            )
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        emoji = 'üê±' if category == '–∫–æ—à–µ–∫' else 'üê∂' if category == '—Å–æ–±–∞–∫' else 'üéÅ'
        self.bot.send_message(
            chat_id,
            f"{emoji} <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ {category}:</b>",
            parse_mode="HTML",
            reply_markup=self._create_keyboard()
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤
        for post in posts:
            try:
                if post['photo_url']:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=self._format_post(post),
                        parse_mode="HTML"
                    )
                else:
                    self.bot.send_message(
                        chat_id,
                        self._format_post(post),
                        parse_mode="HTML"
                    )
                time.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")

    def _format_post(self, post: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        return (
            f"{post['text']}\n\n"
            f"üìÖ <i>{post['date']}</i>\n"
            f"üîó <a href='{self.parser.channel_url}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª</a>"
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.bot.polling(none_stop=True)

if __name__ == '__main__':
    bot = PetsBot()
    bot.run()
