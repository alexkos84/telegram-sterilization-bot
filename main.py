import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional, Tuple

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
def load_text(filename: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        path = os.path.join("assets", "texts", filename)
        with open(path, encoding="utf-8") as f:
            return f.read()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {str(e)}")
        return f"<b>–ö–æ–Ω—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>"

# üñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def get_image_path(filename: str) -> Optional[str]:
    path = os.path.join("assets", "images", filename)
    return path if os.path.exists(path) else None

# üìö –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
TEXTS = {
    "paid_steril": load_text("paid_sterilization.html") or "–ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è",
    "free_steril": load_text("free_sterilization.html") or "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è",
    "contacts": load_text("contacts.html") or "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
    "about": load_text("about.html") or "–û –ø—Ä–æ–µ–∫—Ç–µ"
}

# üè∑Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
IMAGES = {
    "paid": get_image_path("paid.jpg"),
    "free": get_image_path("free.jpg"),
    "cats": get_image_path("cats.jpg"),
    "dogs": get_image_path("dogs.jpg")
}

class ChannelParser:
    """–ü–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    CHANNELS = {
        "cats": {
            "username": "Lapki_ruchki_Yalta_help",
            "url": "https://t.me/Lapki_ruchki_Yalta_help",
            "keywords": ["–∫–æ—Ç", "–∫–æ—à–∫", "–∫–æ—Ç–µ–Ω", "–∫–æ—Ç–∏–∫", "–º—É—Ä–∑", "–º—è—É"]
        },
        "dogs": {
            "username": "yalta_aninmals",
            "url": "https://t.me/yalta_aninmals",
            "keywords": ["—Å–æ–±–∞–∫", "—â–µ–Ω", "–ø–µ—Å", "–≥–∞–≤", "–ª–∞–π–∫", "–æ–≤—á–∞—Ä–∫"]
        }
    }
    
    def __init__(self):
        self.cache = {"cats": [], "dogs": []}
        self.last_update = None
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }

    def parse_channel(self, channel_type: str, limit: int = 3) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        channel = self.CHANNELS[channel_type]
        try:
            url = f"https://t.me/s/{channel['username']}"
            response = requests.get(url, headers=self.headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            posts = []
            
            for message in soup.find_all('div', class_='tgme_widget_message')[:limit*2]:
                post = self._parse_message(message, channel)
                if post and self._is_animal_post(post['text'], channel['keywords']):
                    posts.append(post)
                    if len(posts) >= limit:
                        break
            
            return posts
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel_type}: {str(e)}")
            return []

    def _parse_message(self, message, channel) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            text_div = message.find('div', class_='tgme_widget_message_text')
            if not text_div:
                return None
                
            text = text_div.get_text('\n').strip()
            post_id = message.get('data-post', '').split('/')[-1]
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ç–æ
            photo_style = message.find('a', class_='tgme_widget_message_photo_wrap').get('style', '')
            photo_url = re.search(r"url\('(.*?)'\)", photo_style).group(1) if photo_style else None
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
            time_tag = message.find('time', {'datetime': True})
            date = time_tag['datetime'] if time_tag else "–ù–µ–¥–∞–≤–Ω–æ"
            
            return {
                'id': post_id,
                'text': text,
                'photo_url': photo_url,
                'date': date,
                'url': f"{channel['url']}/{post_id}",
                'type': 'cats' if channel['username'] == self.CHANNELS['cats']['username'] else 'dogs'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None

    def _is_animal_post(self, text: str, keywords: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –∂–∏–≤–æ—Ç–Ω—ã–º"""
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in keywords)

    def get_posts(self, animal_type: str, force_update: bool = False) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if force_update or not self.cache[animal_type] or (datetime.now() - self.last_update).seconds > 3600:
            self.cache[animal_type] = self.parse_channel(animal_type)
            self.last_update = datetime.now()
        return self.cache[animal_type] or self._get_mock_posts(animal_type)

    def _get_mock_posts(self, animal_type: str) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if animal_type == 'cats':
            return [{
                'id': '1001',
                'text': '–ö–æ—Ç–µ–Ω–æ–∫ –∏—â–µ—Ç –¥–æ–º. –ú–∞–ª—å—á–∏–∫, 2 –º–µ—Å—è—Ü–∞, –ø—Ä–∏–≤–∏—Ç.',
                'photo_url': None,
                'date': '2023-01-01',
                'url': 'https://t.me/Lapki_ruchki_Yalta_help/1001',
                'type': 'cats'
            }]
        else:
            return [{
                'id': '2001',
                'text': '–©–µ–Ω–æ–∫ –∏—â–µ—Ç —Ö–æ–∑—è–∏–Ω–∞. –î–µ–≤–æ—á–∫–∞, 3 –º–µ—Å—è—Ü–∞.',
                'photo_url': None,
                'date': '2023-01-01',
                'url': 'https://t.me/yalta_aninmals/2001',
                'type': 'dogs'
            }]

class AnimalBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.token = os.getenv('TELEGRAM_TOKEN')
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        self.bot = telebot.TeleBot(self.token)
        self.parser = ChannelParser()
        self.app = Flask(__name__)
        self._setup_handlers()
        
    def _send_animal_posts(self, chat_id: int, animal_type: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        try:
            posts = self.parser.get_posts(animal_type)
            if not posts:
                self.bot.send_message(chat_id, "üòø –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                return
                
            emoji = "üê±" if animal_type == "cats" else "üê∂"
            self.bot.send_message(
                chat_id,
                f"{emoji} <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\n\n"
                f"–ö–∞–Ω–∞–ª: {self.parser.CHANNELS[animal_type]['url']}",
                parse_mode="HTML"
            )
            
            for post in posts:
                self._send_post(chat_id, post)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}")
            self.bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

    def _send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
        try:
            text = (
                f"{'üê±' if post['type'] == 'cats' else 'üê∂'} <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n"
                f"{post['text']}\n\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>"
            )
            
            if post.get('photo_url'):
                self.bot.send_photo(
                    chat_id,
                    post['photo_url'],
                    caption=text,
                    parse_mode="HTML"
                )
            else:
                self.bot.send_message(
                    chat_id,
                    text,
                    parse_mode="HTML"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.bot.message_handler(commands=['start'])
        def start(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            markup.row("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
            
            self.bot.send_message(
                message.chat.id,
                "üêæ <b>–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ø–ª—Ç—ã</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=markup,
                parse_mode="HTML"
            )

        @self.bot.message_handler(func=lambda m: m.text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def sterilization(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row("üí∞ –ü–ª–∞—Ç–Ω–∞—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è")
            markup.add("üîô –ù–∞–∑–∞–¥")
            
            self.bot.send_message(
                message.chat.id,
                "üè• <b>–ü—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
                reply_markup=markup,
                parse_mode="HTML"
            )

        @self.bot.message_handler(func=lambda m: m.text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è")
        def paid_sterilization(message):
            try:
                if IMAGES['paid']:
                    with open(IMAGES['paid'], 'rb') as photo:
                        self.bot.send_photo(
                            message.chat.id,
                            photo,
                            caption=TEXTS['paid_steril'],
                            parse_mode="HTML"
                        )
                else:
                    self.bot.send_message(
                        message.chat.id,
                        TEXTS['paid_steril'],
                        parse_mode="HTML"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–Ω–æ–π —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
                self.bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

        @self.bot.message_handler(func=lambda m: m.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è")
        def free_sterilization(message):
            try:
                if IMAGES['free']:
                    with open(IMAGES['free'], 'rb') as photo:
                        self.bot.send_photo(
                            message.chat.id,
                            photo,
                            caption=TEXTS['free_steril'],
                            parse_mode="HTML"
                        )
                else:
                    self.bot.send_message(
                        message.chat.id,
                        TEXTS['free_steril'],
                        parse_mode="HTML"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
                self.bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

        @self.bot.message_handler(func=lambda m: m.text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        def adoption(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row("üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏")
            markup.add("üîô –ù–∞–∑–∞–¥")
            
            self.bot.send_message(
                message.chat.id,
                "üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=markup,
                parse_mode="HTML"
            )

        @self.bot.message_handler(func=lambda m: m.text == "üê± –ö–æ—à–∫–∏")
        def cats(message):
            self._send_animal_posts(message.chat.id, "cats")

        @self.bot.message_handler(func=lambda m: m.text == "üê∂ –°–æ–±–∞–∫–∏")
        def dogs(message):
            self._send_animal_posts(message.chat.id, "dogs")

        @self.bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        def contacts(message):
            self.bot.send_message(
                message.chat.id,
                TEXTS['contacts'],
                parse_mode="HTML"
            )

        @self.bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        def about(message):
            self.bot.send_message(
                message.chat.id,
                TEXTS['about'],
                parse_mode="HTML"
            )

        @self.bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
        def back(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            markup.row("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
            
            self.bot.send_message(
                message.chat.id,
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=markup
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if os.getenv('USE_WEBHOOK', 'false').lower() == 'true':
            self._setup_webhook()
            self.app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))
        else:
            self.bot.polling()

    def _setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        self.bot.remove_webhook()
        time.sleep(1)
        webhook_url = f"{os.getenv('WEBHOOK_URL')}/{self.token}"
        self.bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    os.makedirs("assets/texts", exist_ok=True)
    os.makedirs("assets/images", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        bot = AnimalBot()
        bot.run()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
