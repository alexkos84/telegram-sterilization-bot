import os
import telebot
from telebot import types
from flask import Flask, request
from datetime import datetime
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get('TOKEN')
if not TOKEN:
    logger.error("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    exit(1)

PORT = int(os.environ.get('PORT', 8080))
WEBHOOK_URL = "telegram-sterilization-bot-production.up.railway.app"  # –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
paid_text = (
    "üí∞‚ú® <b>–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b> ‚ú®üí∞\n\n"
    # ... (–≤–∞—à —Ç–µ–∫—Å—Ç –æ –ø–ª–∞—Ç–Ω–æ–π —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏)
)

free_text = (
    "üéâ <b>–ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b> üéâ\n"
    # ... (–≤–∞—à —Ç–µ–∫—Å—Ç –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏)
)

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    try:
        if request.headers.get('content-type') == 'application/json':
            logger.info(f"üì• –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {request.get_data().decode('utf-8')}")
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            return ''
        return 'Bad request', 403
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return 'Server error', 500

@app.route('/')
def home():
    return f"ü§ñ Bot is running! Time: {datetime.now().strftime('%H:%M:%S')}"

@app.route('/health')
def health():
    return {"status": "ok", "time": datetime.now().isoformat()}

@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üí∞ –ü–ª–∞—Ç–Ω–∞—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏:", reply_markup=markup)
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª /start")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")

@bot.message_handler(commands=['status', 'test'])
def status(message):
    try:
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        bot.send_message(message.chat.id, f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n‚è∞ –í—Ä–µ–º—è: {current_time}\nüîó Webhook: {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    try:
        if message.text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è":
            bot.send_message(message.chat.id, paid_text, parse_mode="HTML", disable_web_page_preview=True)
        elif message.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è":
            bot.send_message(message.chat.id, free_text, parse_mode="HTML", disable_web_page_preview=True)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üí∞ –ü–ª–∞—Ç–Ω–∞—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è")
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=markup)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

def setup_webhook():
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        bot.remove_webhook()
        time.sleep(2)
        
        if not WEBHOOK_URL:
            raise ValueError("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        full_url = f"https://{WEBHOOK_URL}/{TOKEN}"
        logger.info(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook –Ω–∞: {full_url}")
        
        bot.set_webhook(
            url=full_url,
            max_connections=10,
            allowed_updates=["message", "callback_query"]
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        webhook_info = bot.get_webhook_info()
        logger.info(f"‚ÑπÔ∏è Webhook info: {webhook_info.url} | –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if webhook_info.is_running else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {str(e)}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    if not setup_webhook():
        logger.warning("üîÑ Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å polling...")
        bot.polling(none_stop=True)
    else:
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        app.run(host='0.0.0.0', port=PORT)
