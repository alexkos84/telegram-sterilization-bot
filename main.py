import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AdvancedChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –Ø–ª—Ç–µ"""
    
    def __init__(self):
        self.channels = [
            {
                'username': 'cats_yalta',
                'url': 'https://t.me/cats_yalta',
                'type': 'cats',
                'title': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)'
            },
            {
                'username': 'cats_yalta_group',
                'url': 'https://t.me/cats_yalta_group',
                'type': 'cats',
                'title': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)'
            },
            {
                'username': 'dogs_yalta',
                'url': 'https://t.me/dogs_yalta',
                'type': 'dogs',
                'title': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)'
            },
            {
                'username': 'dogs_yalta_group',
                'url': 'https://t.me/dogs_yalta_group',
                'type': 'dogs',
                'title': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)'
            }
        ]
        self.posts_cache = []
        self.last_update = None
    
    def get_mock_posts(self, channel_type: str = 'cats') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ"""
        if channel_type == 'dogs':
            return [
                {
                    'id': '2001',
                    'title': 'üêï –°–æ–±–∞–∫–∞ –†–µ–∫—Å –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 1 –≥–æ–¥, –º–∞–ª—å—á–∏–∫, —Å–º–µ—à–∞–Ω–Ω–∞—è –ø–æ—Ä–æ–¥–∞. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π.',
                    'date': '03.08.2025 14:30',
                    'timestamp': time.time(),
                    'url': 'https://t.me/dogs_yalta/2001',
                    'contact': '@volunteer_dogs ‚Ä¢ +7 978 123-45-67',
                    'photo_url': None,
                    'video_url': None,
                    'has_media': False,
                    'type': 'dogs',
                    'channel': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞',
                    'channel_url': 'https://t.me/dogs_yalta'
                }
            ]
        else:
            return [
                {
                    'id': '1001',
                    'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π.',
                    'date': '03.08.2025 14:30',
                    'timestamp': time.time(),
                    'url': 'https://t.me/cats_yalta/1001',
                    'contact': '@volunteer1 ‚Ä¢ +7 978 123-45-67',
                    'photo_url': None,
                    'video_url': None,
                    'has_media': False,
                    'type': 'cats',
                    'channel': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞',
                    'channel_url': 'https://t.me/cats_yalta'
                }
            ]

    def get_cached_posts(self, channel_type: str = 'all') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        return self.get_mock_posts(channel_type)

class CatBotWithPhotos:
    """–ë–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AdvancedChannelParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        self.contacts = self.load_contacts()
        
        self.setup_handlers()
        self.setup_routes()
    
    def load_contacts(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
        return {
            "–∫–æ–Ω—Ç–∞–∫—Ç—ã": {
                "—Å–≤–µ—Ç–ª–∞–Ω–∞": "+7 978 144-90-70",
                "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä": "+7 978 144-90-70",
                "—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è": "+7 978 000-00-02",
                "–ª–µ—á–µ–Ω–∏–µ": "+7 978 000-00-03",
                "–∞–π–±–æ–ª–∏—Ç": "+7 978 000-00-11",
                "–≤–µ—Ç–º–∏—Ä": "+7 978 000-00-13",
                "–≤–æ–ª–æ–Ω—Ç–µ—Ä—ã": "@cats_yalta_coordinator"
            },
            "—Å–∏–Ω–æ–Ω–∏–º—ã": {
                "—Å–≤–µ—Ç–∞": "—Å–≤–µ—Ç–ª–∞–Ω–∞",
                "—Å–≤–µ—Ç–∫–∞": "—Å–≤–µ—Ç–ª–∞–Ω–∞",
                "–∫–ª–∏–Ω–∏–∫–∞": "–∞–π–±–æ–ª–∏—Ç",
                "–≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞": "–∞–π–±–æ–ª–∏—Ç",
                "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä": "–∞–π–±–æ–ª–∏—Ç",
                "–≤—Ä–∞—á": "–∞–π–±–æ–ª–∏—Ç",
                "—Å—Ç–µ—Ä–∏–ª": "—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è",
                "–∫–∞—Å—Ç—Ä–∞—Ü–∏—è": "—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è"
            }
        }

    def send_post(self, chat_id: int, post: Dict, reply_to_message_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üêï'
            post_text = (
                f"{emoji} <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üì¢ <a href='{post['channel_url']}'>{post['channel']}</a>\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç</a>"
            )
            
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                reply_to_message_id=reply_to_message_id,
                disable_web_page_preview=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_channel_posts(self, chat_id: int, animal_type: str = 'cats', reply_to_message_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                animal_name = "–∫–æ—Ç–∏–∫–æ–≤" if animal_type == 'cats' else "—Å–æ–±–∞–∫"
                self.bot.send_message(
                    chat_id,
                    f"üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {animal_name}.",
                    reply_to_message_id=reply_to_message_id
                )
                return
            
            animal_emoji = 'üê±' if animal_type == 'cats' else 'üêï'
            animal_name = "–ö–û–¢–ò–ö–ò" if animal_type == 'cats' else "–°–û–ë–ê–ö–ò"
            
            self.bot.send_message(
                chat_id,
                f"{animal_emoji} <b>{animal_name} –ò–©–£–¢ –î–û–ú</b>\n\nüì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                parse_mode="HTML",
                reply_to_message_id=reply_to_message_id
            )
            
            for post in posts:
                self.send_post(chat_id, post)
                time.sleep(0.5)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")

    def parse_command(self, text: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        clean_text = re.sub(r'@catYalta_bot\s*', '', text, flags=re.IGNORECASE).strip().lower()
        
        logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã: '{clean_text}'")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
        result = {
            'action': 'unknown',
            'params': {},
            'text': clean_text
        }
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if any(word in clean_text for word in ['–Ω–æ–º–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∫–æ–Ω—Ç–∞–∫—Ç', '—Å–≤—è–∑–∞—Ç—å—Å—è', '–ø–æ–∑–≤–æ–Ω–∏—Ç—å']):
            result['action'] = 'contact'
            return result
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏
        if any(word in clean_text for word in ['—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è', '–∫–∞—Å—Ç—Ä–∞—Ü–∏—è', '—Å—Ç–µ—Ä–∏–ª', '–æ–ø–µ—Ä–∞—Ü–∏—è']):
            result['action'] = 'sterilization'
            return result
        
        # –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if any(word in clean_text for word in ['–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º', '–≤–∑—è—Ç—å', '—É—Å—ã–Ω–æ–≤', '–Ω–∞–π—Ç–∏', '–∫–æ—Ç–∏–∫–∏', '—Å–æ–±–∞–∫–∏']):
            result['action'] = 'adoption'
            if any(word in clean_text for word in ['—Å–æ–±–∞–∫', '–ø–µ—Å', '—â–µ–Ω']):
                result['params']['animal'] = 'dogs'
            else:
                result['params']['animal'] = 'cats'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ç–∏–∫–∏
            return result
        
        # –ü–æ–¥–∞—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if any(word in clean_text for word in ['–ø–æ–¥–∞—Ç—å', '—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å', '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ']):
            result['action'] = 'post_ad'
            return result
        
        # –û –ø—Ä–æ–µ–∫—Ç–µ
        if any(word in clean_text for word in ['–ø—Ä–æ–µ–∫—Ç', '–æ –Ω–∞—Å', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']):
            result['action'] = 'about'
            return result
        
        # –ü–æ–º–æ—â—å
        if any(word in clean_text for word in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã', '—á—Ç–æ —É–º–µ–µ—à—å']):
            result['action'] = 'help'
            return result
        
        logger.info(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {result}")
        return result

    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            """–ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
            if message.chat.type == 'private':
                self.stats["users"].add(message.from_user.id)
                self.stats["messages"] += 1
                
                welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ñ–∏–≤–æ—Ç–Ω—ã–µ –Ø–ª—Ç—ã"!</b>

üêæ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è @catYalta_bot –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ.

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:</b>
‚Ä¢ @catYalta_bot –Ω–æ–º–µ—Ä –°–≤–µ—Ç–ª–∞–Ω—ã
‚Ä¢ @catYalta_bot –∫–æ—Ç–∏–∫–∏ –∏—â—É—Ç –¥–æ–º  
‚Ä¢ @catYalta_bot —Å–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º
‚Ä¢ @catYalta_bot —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è
‚Ä¢ @catYalta_bot –ø–æ–º–æ—â—å

üîí <b>–í –≥—Ä—É–ø–ø–∞—Ö:</b> –û—Ç–≤–µ—Ç—ã –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º."""
                
                self.bot.send_message(
                    message.chat.id, 
                    welcome_text, 
                    parse_mode="HTML"
                )
        
        @self.bot.message_handler(content_types=['text'])
        def handle_text_messages(message):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
                if not message.text or '@catYalta_bot' not in message.text.lower():
                    return
                
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º: {message.text}")
                
                self.stats["users"].add(message.from_user.id)
                self.stats["messages"] += 1
                
                command = self.parse_command(message.text)
                logger.info(f"üéØ –ö–æ–º–∞–Ω–¥–∞: {command}")
                
                response = ""
                
                if command['action'] == 'contact':
                    # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ
                    query = command['text']
                    contacts = self.contacts["–∫–æ–Ω—Ç–∞–∫—Ç—ã"]
                    synonyms = self.contacts["—Å–∏–Ω–æ–Ω–∏–º—ã"]
                    response = None
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    for keyword in contacts:
                        if keyword in query:
                            contact_info = contacts[keyword]
                            if contact_info.startswith('@'):
                                response = f"üì± {keyword.capitalize()}: {contact_info}"
                            else:
                                response = f"üìû {keyword.capitalize()}: {contact_info}"
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
                    if not response:
                        for syn, original in synonyms.items():
                            if syn in query:
                                contact_info = contacts[original]
                                if contact_info.startswith('@'):
                                    response = f"üì± {original.capitalize()}: {contact_info}"
                                else:
                                    response = f"üìû {original.capitalize()}: {contact_info}"
                                break
                    
                    if not response:
                        response = (
                            "üìû <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
                            "üîπ –°–≤–µ—Ç–ª–∞–Ω–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä): +7 978 144-90-70\n"
                            "üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è: +7 978 000-00-02\n"
                            "üîπ –õ–µ—á–µ–Ω–∏–µ: +7 978 000-00-03\n"
                            "üîπ –ö–ª–∏–Ω–∏–∫–∞ –ê–π–±–æ–ª–∏—Ç: +7 978 000-00-11\n"
                            "üîπ –ö–ª–∏–Ω–∏–∫–∞ –í–µ—Ç–ú–∏—Ä: +7 978 000-00-13\n"
                            "üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä—ã: @cats_yalta_coordinator\n\n"
                            "<i>–ü—Ä–∏–º–µ—Ä: @catYalta_bot –Ω–æ–º–µ—Ä –°–≤–µ—Ç–ª–∞–Ω—ã</i>"
                        )
                
                elif command['action'] == 'adoption':
                    animal_type = command['params'].get('animal', 'cats')
                    self.send_channel_posts(message.chat.id, animal_type, message.message_id)
                    return  # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                
                elif command['action'] == 'sterilization':
                    response = """üè• <b>–°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø –ñ–ò–í–û–¢–ù–´–•</b>

üí∞ <b>–ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ –ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç": –æ—Ç 3000‚ÇΩ (+7 978 000-00-11)
‚Ä¢ –ö–ª–∏–Ω–∏–∫–∞ "–í–µ—Ç–ú–∏—Ä": –æ—Ç 2500‚ÇΩ (+7 978 000-00-13)

üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ –î–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: +7 978 144-90-70

üí° <b>–í–∫–ª—é—á–µ–Ω–æ:</b>
‚úîÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –∏ –Ω–∞—Ä–∫–æ–∑
‚úîÔ∏è –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ö–æ–¥
‚úîÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞"""
                
                elif command['action'] == 'post_ad':
                    response = """üìù <b>–ü–û–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï</b>

üì¢ <b>–ì—Ä—É–ø–ø—ã –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤:</b>
‚Ä¢ <a href="https://t.me/cats_yalta">–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)</a>
‚Ä¢ <a href="https://t.me/cats_yalta_group">–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)</a>

üì¢ <b>–ì—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–±–∞–∫:</b>
‚Ä¢ <a href="https://t.me/dogs_yalta">–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)</a>
‚Ä¢ <a href="https://t.me/dogs_yalta_group">–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)</a>

‚úçÔ∏è <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å:</b>
1Ô∏è‚É£ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
3Ô∏è‚É£ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è: +7 978 144-90-70

üìã <b>–£–∫–∞–∂–∏—Ç–µ:</b>
üîπ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –æ–∫—Ä–∞—Å/–ø–æ—Ä–æ–¥–∞
üîπ –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –∑–¥–æ—Ä–æ–≤—å–µ
üîπ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
                
                elif command['action'] == 'about':
                    response = """‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï "–ñ–ò–í–û–¢–ù–´–ï –Ø–õ–¢–´"</b>

üéØ <b>–ú–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∫–æ—à–∫–∞–º –∏ —Å–æ–±–∞–∫–∞–º –Ø–ª—Ç—ã

üìä <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 500+ –∂–∏–≤–æ—Ç–Ω—ã—Ö
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ: 300+ –∫–æ—Ç—è—Ç –∏ —â–µ–Ω–∫–æ–≤
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 30+ –∞–∫—Ç–∏–≤–Ω—ã—Ö

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å:</b>
–ö–∞—Ä—Ç–∞: 2202 2020 0000 0000

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: +7 978 144-90-70
Telegram: @cats_yalta_coordinator"""
                
                elif command['action'] == 'help':
                    response = """ü§ñ <b>–ü–û–ú–û–©–ù–ò–ö –ü–û –ñ–ò–í–û–¢–ù–´–ú –Ø–õ–¢–´</b>

üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
‚Ä¢ @catYalta_bot –Ω–æ–º–µ—Ä –°–≤–µ—Ç–ª–∞–Ω—ã
‚Ä¢ @catYalta_bot –∫–æ–Ω—Ç–∞–∫—Ç –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∏

üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b>
‚Ä¢ @catYalta_bot –∫–æ—Ç–∏–∫–∏ –∏—â—É—Ç –¥–æ–º
‚Ä¢ @catYalta_bot —Å–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º

üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ @catYalta_bot —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è

üìù <b>–û–±—ä—è–≤–ª–µ–Ω–∏—è:</b>
‚Ä¢ @catYalta_bot –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ @catYalta_bot –æ –ø—Ä–æ–µ–∫—Ç–µ

üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—Ç—ã –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º"""
                
                else:
                    response = """‚ùì <b>–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É</b>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ @catYalta_bot –ø–æ–º–æ—â—å - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚Ä¢ @catYalta_bot –Ω–æ–º–µ—Ä –°–≤–µ—Ç–ª–∞–Ω—ã
‚Ä¢ @catYalta_bot –∫–æ—Ç–∏–∫–∏ –∏—â—É—Ç –¥–æ–º
‚Ä¢ @catYalta_bot —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è"""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                if message.chat.type in ['group', 'supergroup']:
                    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º reply (–≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É)
                    self.bot.reply_to(message, response, parse_mode="HTML")
                else:
                    # –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.bot.send_message(message.chat.id, response, parse_mode="HTML")
                
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {command['action']}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
                error_response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: @catYalta_bot –ø–æ–º–æ—â—å"
                if message.chat.type in ['group', 'supergroup']:
                    self.bot.reply_to(message, error_response)
                else:
                    self.bot.send_message(message.chat.id, error_response)
    
    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            return jsonify({
                "status": "ü§ñ Animal Bot Running",
                "time": datetime.now().strftime('%H:%M:%S'),
                "users": len(self.stats["users"]),
                "messages": self.stats["messages"],
                "usage": "Mention @catYalta_bot in any chat"
            })
    
    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Animal Bot –¥–ª—è –Ø–ª—Ç—ã (—Ç–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)...")
        
        if self.setup_webhook():
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ")
            self.app.run(host='0.0.0.0', port=self.port)
        else:
            logger.error("üö® –û—à–∏–±–∫–∞ webhook, –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
            self.bot.polling(none_stop=True)

if __name__ == "__main__":
    bot = CatBotWithPhotos()
    bot.run()
