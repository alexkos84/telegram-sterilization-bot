import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class GroupParser:
    """–ü–∞—Ä—Å–µ—Ä –ø—É–±–ª–∏—á–Ω—ã—Ö Telegram –≥—Ä—É–ø–ø"""
    
    def __init__(self):
        self.groups = [
            {
                'username': 'lapki_ruchki_yalta',
                'url': 'https://t.me/lapki_ruchki_yalta',
                'type': 'cats',
                'is_public': True
            },
            {
                'username': 'yalta_aninmals',
                'url': 'https://t.me/yalta_aninmals',
                'type': 'dogs',
                'is_public': True
            }
        ]
        self.posts_cache = []
        self.last_update = None
    
    def get_group_posts(self, group_type: str = 'all', limit: int = 3) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –≥—Ä—É–ø–ø"""
        try:
            posts = []
            for group in self.groups:
                if group_type != 'all' and group['type'] != group_type:
                    continue
                    
                if not group['is_public']:
                    logger.warning(f"–ì—Ä—É–ø–ø–∞ {group['username']} –ø—Ä–∏–≤–∞—Ç–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                    
                web_url = f'https://t.me/s/{group["username"]}'
                logger.info(f"–ü–∞—Ä—Å–∏–º –≥—Ä—É–ø–ø—É: {web_url}")
                
                try:
                    response = requests.get(web_url, headers={
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                    }, timeout=15)
                    response.raise_for_status()
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥—Ä—É–ø–ø–∞
                    if "This is a private Telegram group" in response.text:
                        logger.error(f"–ì—Ä—É–ø–ø–∞ {group['username']} –ø—Ä–∏–≤–∞—Ç–Ω–∞—è!")
                        continue
                        
                    soup = BeautifulSoup(response.text, 'html.parser')
                    messages = soup.find_all('div', class_='tgme_widget_message')
                    
                    for msg in messages[:limit]:
                        post = self.parse_message(msg, group)
                        if post:
                            posts.append(post)
                            
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã {group['username']}: {str(e)}")
                    continue
            
            if posts:
                self.posts_cache = posts
                self.last_update = datetime.now()
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
            else:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ")
                posts = self.get_mock_posts(group_type)
                
            return posts
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return self.get_mock_posts(group_type)
    
    def parse_message(self, message_div, group) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            post_id = message_div.get('data-post', '').split('/')[-1]
            text_div = message_div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text('\n', strip=True) if text_div else ""
            
            # –î–∞—Ç–∞
            date_elem = message_div.find('time', {'datetime': True})
            post_date = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.strptime(date_elem['datetime'], '%Y-%m-%dT%H:%M:%S%z')
                    post_date = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    pass
            
            # –§–æ—Ç–æ/–º–µ–¥–∏–∞
            photo_url = None
            photo_wrap = message_div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and 'style' in photo_wrap.attrs:
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            if not text:
                return None
                
            return {
                'id': post_id,
                'text': text,
                'date': post_date,
                'url': f"{group['url']}/{post_id}" if post_id else group['url'],
                'title': self._extract_title(text, group['type']),
                'description': self._extract_description(text),
                'contact': self._extract_contact(text),
                'photo_url': photo_url,
                'has_photo': bool(photo_url),
                'type': group['type']
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None
    
    def _extract_title(self, text: str, animal_type: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        first_line = text.split('\n')[0].strip()
        if len(first_line) > 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            return first_line[:100] + ('...' if len(first_line) > 100 else '')
        return "–ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º" if animal_type == 'cats' else "–°–æ–±–∞–∫–∞ –∏—â–µ—Ç –¥–æ–º"
    
    def _extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        clean_text = re.sub(r'(@\w+|https?://\S+|#\w+)', '', text)
        return clean_text[:300] + ('...' if len(clean_text) > 300 else '')
    
    def _extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
        contacts = []
        
        # –¢–µ–ª–µ—Ñ–æ–Ω—ã
        phones = re.findall(r'(\+?[78][\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2})', text)
        for phone in phones[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            clean_phone = re.sub(r'[^\d+]', '', phone)
            contacts.append(f"<a href='tel:{clean_phone}'>{phone}</a>")
        
        # –Æ–∑–µ—Ä–Ω–µ–π–º—ã
        usernames = re.findall(r'@(\w+)', text)
        for username in usernames[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 —é–∑–µ—Ä–Ω–µ–π–º–∞
            contacts.append(f"<a href='https://t.me/{username}'>@{username}</a>")
        
        return ', '.join(contacts) if contacts else "–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ –≥—Ä—É–ø–ø–µ"
    
    def get_mock_posts(self, group_type: str) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        mock = []
        if group_type == 'cats':
            mock.append({
                'id': 'mock1',
                'title': '–ö–æ—Ç–µ–Ω–æ–∫ –∏—â–µ—Ç –¥–æ–º',
                'description': '–ú–∏–ª—ã–π –∫–æ—Ç–µ–Ω–æ–∫ 2 –º–µ—Å—è—Ü–∞, –∏—â–µ—Ç –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏.',
                'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                'url': 'https://t.me/lapki_ruchki_yalta',
                'contact': '<a href="tel:+79780000001">+7 978 000-00-01</a>',
                'photo_url': 'https://via.placeholder.com/600x400?text=–ö–æ—Ç–µ–Ω–æ–∫',
                'has_photo': True,
                'type': 'cats'
            })
        else:
            mock.append({
                'id': 'mock2',
                'title': '–©–µ–Ω–æ–∫ –∏—â–µ—Ç –¥–æ–º',
                'description': '–ê–∫—Ç–∏–≤–Ω—ã–π —â–µ–Ω–æ–∫ 3 –º–µ—Å—è—Ü–∞, –ø—Ä–∏–≤–∏—Ç.',
                'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                'url': 'https://t.me/yalta_aninmals',
                'contact': '<a href="tel:+79780000002">+7 978 000-00-02</a>',
                'photo_url': 'https://via.placeholder.com/600x400?text=–©–µ–Ω–æ–∫',
                'has_photo': True,
                'type': 'dogs'
            })
        return mock
    
    def get_cached_posts(self, group_type: str = 'all') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        if not self.last_update or (datetime.now() - self.last_update).seconds > 3600:
            return self.get_group_posts(group_type)
        return [p for p in self.posts_cache if group_type == 'all' or p['type'] == group_type]

class AnimalBot:
    """–ë–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∂–∏–≤–æ—Ç–Ω—ã–º"""
    
    def __init__(self):
        self.token = os.getenv('TELEGRAM_TOKEN')
        if not self.token:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN!")
            
        self.bot = telebot.TeleBot(self.token)
        self.parser = GroupParser()
        self.setup_handlers()
        
    def send_group_posts(self, chat_id: int, animal_type: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –≥—Ä—É–ø–ø"""
        posts = self.parser.get_cached_posts(animal_type)
        
        if not posts:
            self.bot.send_message(
                chat_id,
                "üòø –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.main_keyboard()
            )
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
        for post in posts:
            try:
                caption = (
                    f"üêæ <b>{post['title']}</b>\n\n"
                    f"{post['description']}\n\n"
                    f"üìÖ {post['date']}\n"
                    f"üìû {post['contact']}\n"
                    f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ</a>"
                )
                
                if post.get('photo_url'):
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=caption,
                        parse_mode='HTML'
                    )
                else:
                    self.bot.send_message(
                        chat_id,
                        caption,
                        parse_mode='HTML'
                    )
                    
                time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")
                continue
                
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        group_url = next(
            (g['url'] for g in self.parser.groups if g['type'] == animal_type),
            'https://t.me/lapki_ruchki_yalta'
        )
        
        self.bot.send_message(
            chat_id,
            f"üí¨ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã: {group_url}",
            reply_markup=self.main_keyboard()
        )
    
    def main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏")
        markup.row("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        return markup
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.bot.send_message(
                message.chat.id,
                "üêæ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–æ–º –∂–∏–≤–æ—Ç–Ω—ã–º –∏–∑ –Ø–ª—Ç—ã.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=self.main_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: m.text in ["üê± –ö–æ—à–∫–∏", "–ö–æ—à–∫–∏"])
        def cats(message):
            self.send_group_posts(message.chat.id, 'cats')
        
        @self.bot.message_handler(func=lambda m: m.text in ["üê∂ –°–æ–±–∞–∫–∏", "–°–æ–±–∞–∫–∏"])
        def dogs(message):
            self.send_group_posts(message.chat.id, 'dogs')
        
        @self.bot.message_handler(func=lambda m: m.text in ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"])
        def contacts(message):
            self.bot.send_message(
                message.chat.id,
                "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:</b>\n\n"
                "üê± –ö–æ—à–∫–∏: <a href='https://t.me/lapki_ruchki_yalta'>@lapki_ruchki_yalta</a>\n"
                "üê∂ –°–æ–±–∞–∫–∏: <a href='https://t.me/yalta_aninmals'>@yalta_aninmals</a>\n\n"
                "‚òé –¢–µ–ª–µ—Ñ–æ–Ω—ã:\n"
                "<a href='tel:+79781449070'>+7 978 144-90-70</a> (–∫–æ—à–∫–∏)\n"
                "<a href='tel:+79780000002'>+7 978 000-00-02</a> (—Å–æ–±–∞–∫–∏)",
                parse_mode='HTML',
                reply_markup=self.main_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: m.text in ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "–ü–æ–º–æ—â—å"])
        def help(message):
            self.bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>\n\n"
                "1. –í—ã–±–µ—Ä–∏—Ç–µ üê± –ö–æ—à–∫–∏ –∏–ª–∏ üê∂ –°–æ–±–∞–∫–∏\n"
                "2. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏\n\n"
                "–ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—ã –Ω–∞–ø—Ä—è–º—É—é.",
                parse_mode='HTML',
                reply_markup=self.main_keyboard()
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.bot.polling(none_stop=True)

if __name__ == '__main__':
    bot = AnimalBot()
    bot.run()
