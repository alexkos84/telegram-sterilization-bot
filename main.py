import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
import random
from urllib.parse import quote_plus
import cloudscraper

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AvitoAnimalsParser:
    """–ü–∞—Ä—Å–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å Avito"""
    
    def __init__(self):
        self.base_url = "https://www.avito.ru"
        self.search_urls = {
            'cats': '/rossiya/zhivotnye/koshki?q=–æ—Ç–¥–∞–º+–≤+–¥–æ–±—Ä—ã–µ+—Ä—É–∫–∏',
            'dogs': '/rossiya/zhivotnye/sobaki?q=–æ—Ç–¥–∞–º+–≤+–¥–æ–±—Ä—ã–µ+—Ä—É–∫–∏'
        }
        self.posts_cache = []
        self.last_update = None
        self.failure_count = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.session = cloudscraper.create_scraper(
            browser={
                'browser': 'chrome',
                'platform': 'windows',
                'mobile': False
            }
        )
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        })
    
    def get_group_posts(self, animal_type: str = 'cats', limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Avito"""
        try:
            url = f"{self.base_url}{self.search_urls.get(animal_type, self.search_urls['cats'])}"
            logger.info(f"üåê –ü–∞—Ä—Å–∏–Ω–≥ Avito: {url}")
            
            response = self.session.get(url, timeout=15)
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ HTTP {response.status_code}")
                return []
            
            soup = BeautifulSoup(response.text, 'html.parser')
            items = soup.find_all('div', {'data-marker': 'item'})
            
            posts = []
            for item in items[:limit]:
                post = self.parse_item(item, animal_type)
                if post:
                    posts.append(post)
            
            self.posts_cache = posts
            self.last_update = datetime.now()
            return posts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito: {str(e)}")
            self.failure_count += 1
            return []
    
    def parse_item(self, item, animal_type: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            title_elem = item.find('h3', {'itemprop': 'name'})
            title = title_elem.text.strip() if title_elem else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            
            url_elem = item.find('a', {'itemprop': 'url'})
            url = f"{self.base_url}{url_elem['href']}" if url_elem else ""
            
            price_elem = item.find('meta', {'itemprop': 'price'})
            price = price_elem['content'] if price_elem else "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
            
            desc_elem = item.find('div', {'class': re.compile('description')})
            description = desc_elem.text.strip() if desc_elem else ""
            
            date_elem = item.find('div', {'data-marker': 'item-date'})
            date = date_elem.text.strip() if date_elem else "–°–µ–≥–æ–¥–Ω—è"
            
            img_elem = item.find('img', {'itemprop': 'image'})
            img_url = img_elem['src'] if img_elem else ""
            
            location_elem = item.find('div', {'class': re.compile('geo-root')})
            location = location_elem.text.strip() if location_elem else ""
            
            return {
                'id': hash(url) % 1000000,
                'title': title,
                'description': description,
                'text': f"{title}\n{description}\n–¶–µ–Ω–∞: {price}\n–ú–µ—Å—Ç–æ: {location}",
                'date': date,
                'url': url,
                'photo_url': img_url,
                'has_photo': bool(img_url),
                'price': price,
                'location': location,
                'type': animal_type,
                'source': 'avito'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {str(e)}")
            return None
    
    def get_cached_posts(self, animal_type: str = 'cats') -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        if not self.posts_cache or (datetime.now() - self.last_update).seconds > 3600:
            return self.get_group_posts(animal_type)
        return [p for p in self.posts_cache if p['type'] == animal_type]

class CatBotWithPhotos:
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AvitoAnimalsParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            price = f"üí∞ {post['price']}" if post['price'] != "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è" else "üí∞ –¶–µ–Ω–∞: –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
            
            post_text = (
                f"{emoji} <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"{price}\n"
                f"üìç {post['location']}\n"
                f"üìÖ {post['date']}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Avito</a>"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Avito", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Avito", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_group_posts(self, chat_id: int, animal_type: str = 'cats'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    "üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Avito –Ω–∞–ø—Ä—è–º—É—é"
                )
                return
            
            animal_name = "–∫–æ—à–µ–∫" if animal_type == 'cats' else "—Å–æ–±–∞–∫"
            header_text = (
                f"üêæ <b>–û–±—ä—è–≤–ª–µ–Ω–∏—è –æ {animal_name} —Å Avito</b>\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(posts)}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.parser.last_update.strftime('%H:%M') if self.parser.last_update else '–Ω–∏–∫–æ–≥–¥–∞'}"
            )
            
            self.bot.send_message(chat_id, header_text, parse_mode="HTML")
            
            for post in posts:
                self.send_post(chat_id, post)
                time.sleep(0.5)
            
            footer_text = (
                "üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å –∂–∏–≤–æ—Ç–Ω—ã–º:</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å {animal_name[:-1]}—É:</b>\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üì¢ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n"
                f"<a href='{self.parser.base_url}{self.parser.search_urls[animal_type]}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Avito</a>\n\n"
                "üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:</b> /update"
            )
            
            self.bot.send_message(chat_id, footer_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ Avito:\n"
                f"{self.parser.base_url}{self.parser.search_urls.get(animal_type, '')}"
            )

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ CatBotWithPhotos –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # (get_main_keyboard, get_adoption_keyboard, get_sterilization_keyboard,
    # load_html_file, setup_handlers, setup_routes, setup_webhook, run)

    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üêæ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–∏–≤–æ—Ç–Ω—ã–º —Å Avito

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∂–∏–≤–æ—Ç–Ω—ã–µ –∏—â—É—Ç –¥–æ–º  
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å

<i>üí° –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å Avito</i>"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
            self.parser.posts_cache = []
            self.parser.last_update = None
            
            self.bot.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Avito...")
            
            try:
                posts = self.parser.get_group_posts('cats', 5)
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(posts)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                self.bot.send_message(
                    message.chat.id, 
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)[:100]}"
                )
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        # (sterilization_handler, paid_sterilization_handler, free_sterilization_handler,
        # adoption_handler, cats_handler, dogs_handler, post_ad_handler,
        # contacts_handler, about_handler, back_handler, default_handler)

    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            return jsonify({
                "status": "ü§ñ Avito Animals Bot",
                "version": "2.0",
                "time": datetime.now().strftime('%H:%M:%S'),
                "users": len(self.stats["users"]), 
                "messages": self.stats["messages"],
                "parser": {
                    "cached_posts": len(self.parser.posts_cache),
                    "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None,
                    "failure_count": self.parser.failure_count
                }
            })

    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Avito Animals Bot...")
        
        try:
            posts = self.parser.get_group_posts('cats')
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        if self.setup_webhook():
            logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ")
            self.app.run(host='0.0.0.0', port=self.port, debug=False)
        else:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
            try:
                self.bot.polling(none_stop=True, interval=0, timeout=20)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
                time.sleep(5)
                self.bot.polling()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    os.makedirs('assets', exist_ok=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not os.path.exists('assets/free_text.html'):
        with open('assets/free_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üÜì –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>
üîπ –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ä–æ–¥–∞ –Ø–ª—Ç—ã
üîπ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã –∑–∞—â–∏—Ç—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏
üîπ –ê–∫—Ü–∏–∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫

üìã <b>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:</b>
‚úÖ –ë–µ–∑–¥–æ–º–Ω—ã–µ –∏ –ø–æ–ª—É–±–µ–∑–¥–æ–º–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
‚úÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–∑ –º–∞–ª–æ–∏–º—É—â–∏—Ö —Å–µ–º–µ–π (—Å–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö)
‚úÖ –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–µ (–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã, –∏–Ω–≤–∞–ª–∏–¥—ã)

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>
üîπ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: +7 978 144-90-70
üîπ –ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-11  
üîπ –í–µ—Ç—Ü–µ–Ω—Ç—Ä "–ó–æ–æ–≤–µ—Ç—Å–µ—Ä–≤–∏—Å": +7 978 000-00-15
üîπ –ì—Ä—É–ø–ø–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: @yalta_free_sterilization

üìç <b>–ê–¥—Ä–µ—Å–∞ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–Ω–∏–∫:</b>
üè• —É–ª. –ö–∏—Ä–æ–≤–∞, 15 (–ø–Ω-–ø—Ç 9:00-18:00)
üè• —É–ª. –õ–µ–Ω–∏–Ω–∞, 32 (–ø–Ω-—Å–± 8:00-20:00)  
üè• —É–ª. –ß–µ—Ö–æ–≤–∞, 45 (–ø–Ω-–≤—Å 9:00-19:00)

üìã <b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>
üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö (–¥–ª—è –ª—å–≥–æ—Ç–Ω–∏–∫–æ–≤)
üìÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ (–¥–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö)
üìÑ –ü–∞—Å–ø–æ—Ä—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π)

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>
‚è∞ –ó–∞–ø–∏—Å—å —Å—Ç—Ä–æ–≥–æ –∑–∞—Ä–∞–Ω–µ–µ! –ú–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥
üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
üíâ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

üÜò <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏:</b>
–ü—Ä–∏ —Ç—Ä–∞–≤–º–∞—Ö –∏ –Ω–µ–æ—Ç–ª–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∏!""")

    if not os.path.exists('assets/paid_text.html'):
        with open('assets/paid_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üí∞ –ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ –Ø–ª—Ç—ã:</b>

üîπ <b>–ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 3000‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2500‚ÇΩ
   üí∞ –°–æ–±–∞–∫–∏ (—Å—É—á–∫–∏): –æ—Ç 5000‚ÇΩ | –°–æ–±–∞–∫–∏ (–∫–æ–±–µ–ª–∏): –æ—Ç 4000‚ÇΩ  
   üìû +7 978 000-00-12
   üìç —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 14
   ‚è∞ –ø–Ω-–≤—Å 8:00-20:00

üîπ <b>–í–µ—Ç—Ü–µ–Ω—Ç—Ä "–í–µ—Ç–ú–∏—Ä"</b>  
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 2500‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2000‚ÇΩ
   üí∞ –°–æ–±–∞–∫–∏ (—Å—É—á–∫–∏): –æ—Ç 4500‚ÇΩ | –°–æ–±–∞–∫–∏ (–∫–æ–±–µ–ª–∏): –æ—Ç 3500‚ÇΩ
   üìû +7 978 000-00-13  
   üìç —É–ª. –ü—É—à–∫–∏–Ω–∞, 28
   ‚è∞ –ø–Ω-—Å–± 9:00-19:00

üîπ <b>–ö–ª–∏–Ω–∏–∫–∞ "–ó–æ–æ–≤–µ—Ç—Ü–µ–Ω—Ç—Ä"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 3500‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2800‚ÇΩ  
   üí∞ –°–æ–±–∞–∫–∏ (—Å—É—á–∫–∏): –æ—Ç 5500‚ÇΩ | –°–æ–±–∞–∫–∏ (–∫–æ–±–µ–ª–∏): –æ—Ç 4200‚ÇΩ
   üìû +7 978 000-00-14
   üìç —É–ª. –ß–µ—Ö–æ–≤–∞, 45  
   ‚è∞ –ø–Ω-–≤—Å 9:00-21:00

üîπ <b>–í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞ "–ü–µ—Ç–í–µ—Ç"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 2800‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2200‚ÇΩ
   üí∞ –°–æ–±–∞–∫–∏ (—Å—É—á–∫–∏): –æ—Ç 4800‚ÇΩ | –°–æ–±–∞–∫–∏ (–∫–æ–±–µ–ª–∏): –æ—Ç 3800‚ÇΩ
   üìû +7 978 000-00-16
   üìç —É–ª. –¢–æ–ª—Å—Ç–æ–≥–æ, 12
   ‚è∞ –ø–Ω-–ø—Ç 8:00-18:00, —Å–± 9:00-15:00

üåü <b>–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚úîÔ∏è –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
‚úîÔ∏è –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–≥–∞–ª—è—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞—Ä–∫–æ–∑  
‚úîÔ∏è –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä (4-6 —á–∞—Å–æ–≤)
‚úîÔ∏è –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞
‚úîÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä —á–µ—Ä–µ–∑ 7-10 –¥–Ω–µ–π
‚úîÔ∏è –ü–æ–ø–æ–Ω–∞/–≤–æ—Ä–æ—Ç–Ω–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

üíä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è:</b>
üî∏ –ü—Ä–µ–¥–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏: –æ—Ç 800‚ÇΩ  
üî∏ –£–ó–ò –æ—Ä–≥–∞–Ω–æ–≤: –æ—Ç 1200‚ÇΩ
üî∏ –ß–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—Ç 1500‚ÇΩ
üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã: –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é

üí° <b>–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∏–¥–∫–∏:</b>
üéØ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–Ω–∏–∫–∞–º - 10%
üéØ –í–æ–ª–æ–Ω—Ç–µ—Ä–∞–º –∏ –æ–ø–µ–∫—É–Ω–∞–º –±–µ–∑–¥–æ–º–Ω—ã—Ö - 20%  
üéØ –ü—Ä–∏ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏ 2+ –∂–∏–≤–æ—Ç–Ω—ã—Ö - 15%
üéØ –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º - 10%
üéØ –°–µ–∑–æ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ (–º–∞–π, –æ–∫—Ç—è–±—Ä—å) - –¥–æ 25%

üìÖ <b>–ó–∞–ø–∏—Å—å –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>
‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –∑–∞ 1-2 –Ω–µ–¥–µ–ª–∏
üìã –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
üíâ –ñ–∏–≤–æ—Ç–Ω–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–¥–æ—Ä–æ–≤—ã–º –∏ –ø—Ä–∏–≤–∏—Ç—ã–º

‚ö†Ô∏è <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>  
üçΩÔ∏è –ì–æ–ª–æ–¥–Ω–∞—è –¥–∏–µ—Ç–∞ 12 —á–∞—Å–æ–≤ –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
üíß –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–æ–¥—ã –∑–∞ 4 —á–∞—Å–∞  
üöø –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–∞–∫–∞–Ω—É–Ω–µ
üìã –ü—Ä–∏–Ω–µ—Å—Ç–∏ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –ø—Ä–∏–≤–∏–≤–∫–∞—Ö

üÜò <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:</b>
–ü—Ä–∏ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è—Ö –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∫–ª–∏–Ω–∏–∫—É!""")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Avito Animals Bot...")
        bot = CatBotWithPhotos()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\n‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ Avito")
        print("\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        time.sleep(30)
