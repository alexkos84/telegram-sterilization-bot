import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
import random
from urllib.parse import quote_plus
import asyncio
from concurrent.futures import ThreadPoolExecutor
import threading

# Selenium imports
try:
    import undetected_chromedriver as uc
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
    SELENIUM_AVAILABLE = True
    print("‚úÖ Selenium –∏ undetected-chromedriver –¥–æ—Å—Ç—É–ø–Ω—ã")
except ImportError as e:
    SELENIUM_AVAILABLE = False
    print(f"‚ö†Ô∏è Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium undetected-chromedriver")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AdvancedSeleniumTelegramParser:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä Telegram —Å Selenium –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –æ–±—Ö–æ–¥–∞"""
    
    def __init__(self):
        self.groups = [
            {
                'username': 'lapki_ruchki_yalta',
                'url': 'https://t.me/lapki_ruchki_yalta',
                'type': 'cats'
            },
            {
                'username': 'yalta_aninmals', 
                'url': 'https://t.me/yalta_aninmals',
                'type': 'dogs'
            }
        ]
        
        self.posts_cache = []
        self.last_update = None
        self.last_attempt = None
        self.failure_count = 0
        self.driver = None
        self.driver_lock = threading.Lock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium
        self.selenium_enabled = SELENIUM_AVAILABLE
        self.max_retries = 3
        self.page_load_timeout = 30
        self.scroll_pause_time = 2
        self.max_scroll_attempts = 5
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ User-Agents
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0'
        ]
        
        # –ü—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
        self.proxy_list = []  # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ–∫—Å–∏ —Å—é–¥–∞
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'selenium_success': 0,
            'selenium_failures': 0,
            'fallback_used': 0,
            'total_posts_parsed': 0
        }

    def should_attempt_parsing(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø—ã—Ç–∞—Ç—å—Å—è –ø–∞—Ä—Å–∏—Ç—å"""
        if not self.last_attempt:
            return True
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∫—É–ª–¥–∞—É–Ω: —á–µ–º –±–æ–ª—å—à–µ –Ω–µ—É–¥–∞—á, —Ç–µ–º –±–æ–ª—å—à–µ –ø–∞—É–∑–∞
        cooldown_minutes = min(self.failure_count * 3, 45)  # –º–∞–∫—Å–∏–º—É–º 45 –º–∏–Ω—É—Ç
        time_passed = (datetime.now() - self.last_attempt).total_seconds() / 60
        
        return time_passed > cooldown_minutes

    def setup_selenium_driver(self, headless: bool = True, use_proxy: bool = False) -> webdriver.Chrome:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ Selenium –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if not self.selenium_enabled:
            raise Exception("Selenium –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        try:
            # –û–ø—Ü–∏–∏ Chrome
            options = uc.ChromeOptions()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if headless:
                options.add_argument('--headless=new')  # –ù–æ–≤—ã–π headless —Ä–µ–∂–∏–º
            
            # –û–±—Ö–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-extensions')
            options.add_argument('--disable-plugins')
            options.add_argument('--disable-images')  # –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            options.add_argument('--disable-javascript')  # –û—Ç–∫–ª—é—á–∞–µ–º JS –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
            
            # –ü–∞–º—è—Ç—å –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
            options.add_argument('--memory-pressure-off')
            options.add_argument('--max_old_space_size=4096')
            options.add_argument('--single-process')
            
            # User Agent
            options.add_argument(f'--user-agent={random.choice(self.user_agents)}')
            
            # –ü—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if use_proxy and self.proxy_list:
                proxy = random.choice(self.proxy_list)
                options.add_argument(f'--proxy-server={proxy}')
                logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy}")
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            options.add_argument('--window-size=1920,1080')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            prefs = {
                "profile.managed_default_content_settings.images": 2,  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                "profile.default_content_setting_values.notifications": 2,  # –ë–ª–æ–∫–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                "profile.managed_default_content_settings.media_stream": 2,
            }
            options.add_experimental_option("prefs", prefs)
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            driver = uc.Chrome(options=options)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            driver.set_page_load_timeout(self.page_load_timeout)
            driver.implicitly_wait(10)
            
            # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ Selenium –¥—Ä–∞–π–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return driver
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium: {e}")
            raise

    def safe_driver_operation(self, operation, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º"""
        with self.driver_lock:
            try:
                return operation(*args, **kwargs)
            except WebDriverException as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
                self.cleanup_driver()
                raise
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                raise

    def cleanup_driver(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("üßπ Selenium –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass
            finally:
                self.driver = None

    def smart_scroll_and_load(self, driver, target_messages: int = 20) -> bool:
        """–£–º–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ ~{target_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ñ–¥–µ–º –±–∞–∑–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.CLASS_NAME, "tgme_channel_info"))
            )
            
            # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
            time.sleep(3)
            
            prev_height = driver.execute_script("return document.body.scrollHeight")
            messages_found = 0
            scroll_attempts = 0
            no_new_content_count = 0
            
            while scroll_attempts < self.max_scroll_attempts and messages_found < target_messages:
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(self.scroll_pause_time)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                messages = driver.find_elements(By.CSS_SELECTOR, ".tgme_widget_message")
                messages_found = len(messages)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                new_height = driver.execute_script("return document.body.scrollHeight")
                
                if new_height == prev_height:
                    no_new_content_count += 1
                    if no_new_content_count >= 3:  # –ï—Å–ª–∏ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                        logger.info(f"‚èπÔ∏è –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É - –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
                        break
                else:
                    no_new_content_count = 0
                    prev_height = new_height
                
                scroll_attempts += 1
                logger.info(f"üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {scroll_attempts}/{self.max_scroll_attempts}, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_found}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                if messages_found < 5:
                    time.sleep(2)
            
            logger.info(f"‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {messages_found} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {scroll_attempts} –ø–æ–ø—ã—Ç–æ–∫")
            return messages_found > 0
            
        except TimeoutException:
            logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ: {e}")
            return False

    def extract_message_data(self, driver, message_element, group: Dict) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # ID —Å–æ–æ–±—â–µ–Ω–∏—è
            post_id = message_element.get_attribute('data-post')
            if not post_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å—Å—ã–ª–∫–µ
                try:
                    link_elem = message_element.find_element(By.CSS_SELECTOR, ".tgme_widget_message_date")
                    href = link_elem.get_attribute('href')
                    if href:
                        post_id = href.split('/')[-1]
                except:
                    post_id = f"msg_{hash(str(message_element.get_attribute('outerHTML')[:100])) % 10000}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = self.extract_text_selenium(message_element)
            if not text or len(text.strip()) < 20:
                return None
            
            # –î–∞—Ç–∞
            date_str = self.extract_date_selenium(message_element)
            
            # –§–æ—Ç–æ URL
            photo_url = self.extract_photo_selenium(message_element)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞
            if not self.is_valid_post_content(text, group['type']):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            title = self.extract_smart_title(text, group['type'])
            description = self.extract_smart_description(text)
            contact = self.extract_contact(text)
            
            return {
                'id': str(post_id).split('/')[-1],
                'text': text,
                'date': date_str,
                'url': f"{group['url']}/{str(post_id).split('/')[-1]}",
                'title': title,
                'description': description,
                'contact': contact,
                'photo_url': photo_url,
                'has_photo': bool(photo_url),
                'type': group['type'],
                'source': 'selenium',
                'extracted_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    def extract_text_selenium(self, message_element) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Selenium"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            text_selectors = [
                ".tgme_widget_message_text",
                ".js-message_text",
                ".message_text",
                ".tgme_widget_message_content"
            ]
            
            for selector in text_selectors:
                try:
                    text_elem = message_element.find_element(By.CSS_SELECTOR, selector)
                    text = text_elem.get_attribute('textContent') or text_elem.text
                    if text and len(text.strip()) > 10:
                        return text.strip()
                except NoSuchElementException:
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            full_text = message_element.get_attribute('textContent') or message_element.text
            
            # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            cleaned_text = re.sub(r'(Views|–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤|Subscribe|–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è).*$', '', full_text, flags=re.IGNORECASE)
            cleaned_text = re.sub(r'\s+', ' ', cleaned_text).strip()
            
            return cleaned_text if len(cleaned_text) > 20 else full_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return ""

    def extract_date_selenium(self, message_element) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ Selenium"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
            time_selectors = [
                "time[datetime]",
                ".tgme_widget_message_date time",
                ".tgme_widget_message_date",
                "time"
            ]
            
            for selector in time_selectors:
                try:
                    time_elem = message_element.find_element(By.CSS_SELECTOR, selector)
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º datetime –∞—Ç—Ä–∏–±—É—Ç
                    datetime_attr = time_elem.get_attribute('datetime')
                    if datetime_attr:
                        try:
                            # –ü–∞—Ä—Å–∏–º ISO datetime
                            dt = datetime.fromisoformat(datetime_attr.replace('Z', '+00:00'))
                            return dt.strftime('%d.%m.%Y %H:%M')
                        except:
                            pass
                    
                    # –ü–æ—Ç–æ–º –ø—Ä–æ–±—É–µ–º —Ç–µ–∫—Å—Ç
                    date_text = time_elem.get_attribute('textContent') or time_elem.text
                    if date_text:
                        return date_text.strip()
                        
                except NoSuchElementException:
                    continue
            
            return "–ù–µ–¥–∞–≤–Ω–æ"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
            return "–ù–µ–¥–∞–≤–Ω–æ"

    def extract_photo_selenium(self, message_element) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Selenium"""
        try:
            photo_selectors = [
                ".tgme_widget_message_photo_wrap",
                ".tgme_widget_message_photo", 
                ".tgme_widget_message_document_thumb",
                "img[src*='cdn']"
            ]
            
            for selector in photo_selectors:
                try:
                    photo_elem = message_element.find_element(By.CSS_SELECTOR, selector)
                    
                    # –ò–∑ style background-image
                    style = photo_elem.get_attribute('style')
                    if style and 'background-image' in style:
                        match = re.search(r"background-image:\s*url\(['\"]?([^'\")]+)['\"]?\)", style)
                        if match:
                            return match.group(1)
                    
                    # –ò–∑ src –∞—Ç—Ä–∏–±—É—Ç–∞
                    src = photo_elem.get_attribute('src')
                    if src and src.startswith('http'):
                        return src
                    
                    # –ò–∑ data-src
                    data_src = photo_elem.get_attribute('data-src')
                    if data_src and data_src.startswith('http'):
                        return data_src
                        
                except NoSuchElementException:
                    continue
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return None

    def parse_group_selenium(self, group: Dict, limit: int = 10) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Selenium"""
        posts = []
        driver = None
        
        try:
            logger.info(f"ü§ñ Selenium: –ø–∞—Ä—Å–∏–Ω–≥ {group['username']}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            driver = self.setup_selenium_driver(headless=True)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            url = f'https://t.me/s/{group["username"]}'
            logger.info(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º: {url}")
            
            driver.get(url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            page_source = driver.page_source.lower()
            if any(block_sign in page_source for block_sign in ['cloudflare', 'access denied', 'forbidden']):
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è {group['username']}")
                return []
            
            # –£–º–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            if not self.smart_scroll_and_load(driver, target_messages=limit * 2):
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {group['username']}")
                return []
            
            # –ò—â–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_selectors = [
                ".tgme_widget_message",
                ".tgme_widget_message_wrap .tgme_widget_message",
                "[data-post]"
            ]
            
            messages = []
            for selector in message_selectors:
                try:
                    found_messages = driver.find_elements(By.CSS_SELECTOR, selector)
                    if found_messages:
                        messages = found_messages
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                        break
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            if not messages:
                logger.warning(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {group['username']}")
                return []
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
            processed = 0
            
            for message_elem in messages:
                if len(posts) >= limit:
                    break
                
                try:
                    post_data = self.extract_message_data(driver, message_elem, group)
                    if post_data:
                        posts.append(post_data)
                        logger.debug(f"‚úÖ –ü–æ—Å—Ç #{len(posts)}: {post_data['title'][:50]}...")
                    
                    processed += 1
                    if processed % 5 == 0:
                        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{len(messages)}, –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(posts)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue
            
            logger.info(f"‚úÖ Selenium: –ø–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {group['username']}")
            self.stats['total_posts_parsed'] += len(posts)
            
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {group['username']}: {e}")
            return []
            
        finally:
            if driver:
                self.cleanup_driver()

    def get_group_posts_selenium(self, group_type: str = 'all', limit: int = 3) -> List[Dict]:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Selenium"""
        if not self.selenium_enabled:
            logger.error("‚ùå Selenium –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return self.get_smart_mock_posts(group_type, limit)
        
        self.last_attempt = datetime.now()
        
        if not self.should_attempt_parsing():
            logger.info(f"‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω (–∫—É–ª–¥–∞—É–Ω: {self.failure_count * 3} –º–∏–Ω)")
            return self.get_cached_or_mock_posts(group_type, limit)
        
        all_posts = []
        success_count = 0
        
        try:
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
            for group in self.groups:
                if group_type != 'all' and group['type'] != group_type:
                    continue
                
                try:
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                    if success_count > 0:
                        time.sleep(random.uniform(3, 7))
                    
                    group_posts = self.parse_group_selenium(group, limit)
                    
                    if group_posts:
                        all_posts.extend(group_posts)
                        success_count += 1
                        self.stats['selenium_success'] += 1
                        logger.info(f"‚úÖ {group['username']}: {len(group_posts)} –ø–æ—Å—Ç–æ–≤")
                    else:
                        self.stats['selenium_failures'] += 1
                        logger.warning(f"‚ö†Ô∏è {group['username']}: –ø–æ—Å—Ç–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã {group['username']}: {e}")
                    self.stats['selenium_failures'] += 1
                    continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if all_posts:
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                unique_posts = self.deduplicate_posts(all_posts)
                sorted_posts = sorted(unique_posts, key=lambda x: x.get('date', ''), reverse=True)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self.posts_cache = sorted_posts[:limit * 2]  # –•—Ä–∞–Ω–∏–º —á—É—Ç—å –±–æ–ª—å—à–µ
                self.last_update = datetime.now()
                self.failure_count = max(0, self.failure_count - 1)
                
                logger.info(f"‚úÖ Selenium –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {len(sorted_posts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
                return sorted_posts[:limit]
            else:
                self.failure_count += 1
                logger.warning(f"‚ùå Selenium –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ #{self.failure_count})")
                return self.get_smart_mock_posts(group_type, limit)
                
        except Exception as e:
            self.failure_count += 1
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Selenium –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_smart_mock_posts(group_type, limit)

    def deduplicate_posts(self, posts: List[Dict]) -> List[Dict]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤"""
        seen_texts = set()
        unique_posts = []
        
        for post in posts:
            # –°–æ–∑–¥–∞–µ–º "–æ—Ç–ø–µ—á–∞—Ç–æ–∫" –ø–æ—Å—Ç–∞
            text_fingerprint = re.sub(r'\W+', '', post.get('text', '')[:100].lower())
            
            if text_fingerprint not in seen_texts and len(text_fingerprint) > 10:
                seen_texts.add(text_fingerprint)
                unique_posts.append(post)
        
        return unique_posts

    # –ú–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    def is_valid_post_content(self, text: str, animal_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞"""
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if animal_type == 'cats':
            animal_keywords = ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–º—É—Ä–∑', '–º—è—É', '–ø–∏—Ç–æ–º–µ—Ü']
        else:
            animal_keywords = ['—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–ª–∞–π', '–ø–∏—Ç–æ–º–µ—Ü']
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        action_keywords = ['–∏—â–µ—Ç', '–¥–æ–º', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–æ—Ç–¥–∞', '–Ω–∞–π–¥–µ–Ω', '—Å–µ–º—å', '—Ö–æ–∑—è']
        
        # –ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        exclude_keywords = ['–ø—Ä–æ–¥–∞–º', '–∫—É–ø–ª—é', '—É—Å–ª—É–≥', '—Ä–µ–∫–ª–∞–º', '—Å–ø–∞–º']
        
        has_animal = any(keyword in text_lower for keyword in animal_keywords)
        has_action = any(keyword in text_lower for keyword in action_keywords)
        has_exclude = any(keyword in text_lower for keyword in exclude_keywords)
        
        return has_animal and has_action and not has_exclude and len(text) > 30

    def extract_smart_title(self, text: str, animal_type: str) -> str:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        keywords = ['–∏—â–µ—Ç', '–¥–æ–º', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–æ—Ç–¥–∞', '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è–ª']
        
        for line in lines[:3]:
            if len(line) > 15 and any(keyword in line.lower() for keyword in keywords):
                title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', ' ', line)
                title = re.sub(r'\s+', ' ', title).strip()
                
                if len(title) > 60:
                    title = title[:60] + "..."
                
                return title
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        defaults = {
            'cats': ['–ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º', '–ö–æ—Ç–µ–Ω–æ–∫ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏', '–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—à–∫–∏'],
            'dogs': ['–°–æ–±–∞–∫–∞ –∏—â–µ—Ç –¥–æ–º', '–©–µ–Ω–æ–∫ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏', '–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–±–∞–∫–∏']
        }
        
        return random.choice(defaults.get(animal_type, defaults['cats']))

    def extract_smart_description(self, text: str) -> str:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        clean_text = re.sub(r'(@\w+|https?://\S+|\+?[78][\d\s\-\(\)]{10,})', '', text)
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        if len(clean_text) > 150:
            sentences = clean_text.split('.')
            result = ""
            for sentence in sentences:
                if len(result + sentence + '.') <= 150:
                    result += sentence.strip() + '. '
                else:
                    break
            return result.strip() or clean_text[:150] + "..."
        
        return clean_text

    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        contacts = []
        
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
        phone_patterns = [
            r'\+?7[\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}',
            r'\+?8[\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}',
            r'9\d{2}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}'
        ]
        
        for pattern in phone_patterns:
            phones = re.findall(pattern, text)
            if phones:
                clean_phone = re.sub(r'[\s\-\(\)]', '', phones[0])
                contacts.append(f"+7{clean_phone[-10:]}" if not clean_phone.startswith(('+7', '+8')) else clean_phone)
                break
        
        # Username
        usernames = re.findall(r'@\w+', text)
        if usernames:
            contacts.append(usernames[0])
        
        return ' ‚Ä¢ '.join(contacts[:2]) if contacts else "–°–º. –≤ –≥—Ä—É–ø–ø–µ"

    def get_cached_or_mock_posts(self, group_type: str, limit: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–ª–∏ –º–æ–∫-–ø–æ—Å—Ç–æ–≤"""
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—ç—à –ø–æ —Ç–∏–ø—É
        cached = [p for p in self.posts_cache 
                 if group_type == 'all' or p['type'] == group_type]
        
        if cached and len(cached) >= limit:
            return cached[:limit]
        else:
            self.stats['fallback_used'] += 1
            return self.get_smart_mock_posts(group_type, limit)

    def get_smart_mock_posts(self, group_type: str, limit: int) -> List[Dict]:
        """–£–º–Ω—ã–µ –º–æ–∫–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        if group_type == 'cats':
            mock_data = {
                'names': ['–ú—É—Ä–∫–∞', '–ë–∞—Ä—Å–∏–∫', '–°–Ω–µ–∂–æ–∫', '–†—ã–∂–∏–∫', '–¢–∏—à–∫–∞', '–ü—É—à–æ–∫', '–î—ã–º–∫–∞', '–ú–∞—Å—è'],
                'ages': ['2 –º–µ—Å—è—Ü–∞', '3-4 –º–µ—Å—è—Ü–∞', '6 –º–µ—Å—è—Ü–µ–≤', '1 –≥–æ–¥', '2 –≥–æ–¥–∞', '3 –≥–æ–¥–∞'],
                'colors': ['—Ä—ã–∂–∏–π', '—Å–µ—Ä—ã–π', '—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Ç—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–∞—è', '–ø–æ–ª–æ—Å–∞—Ç—ã–π', '–¥—ã–º—á–∞—Ç—ã–π'],
                'traits': ['–∏–≥—Ä–∏–≤—ã–π', '–ª–∞—Å–∫–æ–≤—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π', '—É–º–Ω—ã–π', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–∞–∫—Ç–∏–≤–Ω—ã–π'],
                'health': ['–ø—Ä–∏–≤–∏—Ç', '–∑–¥–æ—Ä–æ–≤', '–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞', '–æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–æ–≤']
            }
        else:
            mock_data = {
                'names': ['–ë–æ–±–∏–∫', '–®–∞—Ä–∏–∫', '–î—Ä—É–∂–æ–∫', '–õ–∞–π–∫–∞', '–î–∂–µ–∫', '–ë–µ–ª–∫–∞', '–†–µ–∫—Å', '–ù–∞–π–¥–∞'],
                'ages': ['3 –º–µ—Å—è—Ü–∞', '4-5 –º–µ—Å—è—Ü–µ–≤', '6 –º–µ—Å—è—Ü–µ–≤', '1 –≥–æ–¥', '2 –≥–æ–¥–∞', '3 –≥–æ–¥–∞'],
                'colors': ['—á–µ—Ä–Ω—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–±–µ–ª—ã–π', '—Ä—ã–∂–∏–π', '–ø—è—Ç–Ω–∏—Å—Ç—ã–π', '—Å–µ—Ä—ã–π'],
                'traits': ['–∞–∫—Ç–∏–≤–Ω—ã–π', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '—É–º–Ω—ã–π', '–ø–æ—Å–ª—É—à–Ω—ã–π', '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π'],
                'health': ['–ø—Ä–∏–≤–∏—Ç', '–∑–¥–æ—Ä–æ–≤', '–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '—á–∏–ø–∏—Ä–æ–≤–∞–Ω', '–æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–æ–≤']
            }
        
        posts = []
        animal_emoji = 'üê±' if group_type == 'cats' else 'üê∂'
        animal_name = '–∫–æ—Ç–∏–∫' if group_type == 'cats' else '—â–µ–Ω–æ–∫'
        
        for i in range(limit):
            name = random.choice(mock_data['names'])
            age = random.choice(mock_data['ages'])
            color = random.choice(mock_data['colors'])
            trait = random.choice(mock_data['traits'])
            health = random.choice(mock_data['health'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            descriptions = [
                f"{animal_name.capitalize()} {name}, –≤–æ–∑—Ä–∞—Å—Ç {age}, {color} –æ–∫—Ä–∞—Å. {trait.capitalize()}, {health}. –ö –ª–æ—Ç–∫—É –ø—Ä–∏—É—á–µ–Ω, —Å –¥—Ä—É–≥–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –ª–∞–¥–∏—Ç. –ò—â–µ—Ç –∑–∞–±–æ—Ç–ª–∏–≤—É—é —Å–µ–º—å—é!",
                f"–ò—â–µ—Ç –¥–æ–º {animal_name} {name}. –í–æ–∑—Ä–∞—Å—Ç: {age}. –û–∫—Ä–∞—Å: {color}. –•–∞—Ä–∞–∫—Ç–µ—Ä: {trait}. –ó–¥–æ—Ä–æ–≤—å–µ: {health}. –û—á–µ–Ω—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ª—é–±—è—â–∏—Ö —Ö–æ–∑—è–µ–≤–∞—Ö!",
                f"{name} - {color} {animal_name}, {age}. {trait.capitalize()} –∏ {health}. –ü—Ä–∏—É—á–µ–Ω –∫ –ø–æ—Ä—è–¥–∫—É. –ú–µ—á—Ç–∞–µ—Ç –æ —Ç–µ–ø–ª–æ–º –¥–æ–º–µ –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã—Ö —Ä—É–∫–∞—Ö!"
            ]
            
            description = random.choice(descriptions)
            
            posts.append({
                'id': f'mock_selenium_{i + 2000}',
                'title': f'{animal_emoji} {name} –∏—â–µ—Ç –¥–æ–º',
                'description': description,
                'text': description,
                'date': self.generate_recent_date(),
                'url': f'https://t.me/lapki_ruchki_yalta/{i + 2000}',
                'contact': self.generate_realistic_contact(),
                'photo_url': f'https://picsum.photos/400/300?random={i + 200}',
                'has_photo': True,
                'type': group_type,
                'source': 'mock_selenium',
                'extracted_at': datetime.now().isoformat()
            })
        
        return posts

    def generate_recent_date(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–∞–≤–Ω–µ–π –¥–∞—Ç—ã"""
        days_ago = random.randint(0, 7)
        hours_ago = random.randint(0, 23)
        recent_date = datetime.now() - timedelta(days=days_ago, hours=hours_ago)
        return recent_date.strftime('%d.%m.%Y %H:%M')

    def generate_realistic_contact(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        phone_endings = ['45-67', '78-90', '12-34', '56-78', '90-12', '23-45', '67-89', '34-56']
        usernames = ['volunteer', 'helper', 'animals_yal', 'pet_help', 'rescue', 'yalta_pets']
        
        contacts = []
        
        # –¢–µ–ª–µ—Ñ–æ–Ω (–≤—Å–µ–≥–¥–∞)
        phone = f"+7 978 {random.randint(100, 999)}-{random.choice(phone_endings)}"
        contacts.append(phone)
        
        # Username (–∏–Ω–æ–≥–¥–∞)
        if random.choice([True, False]):
            username = f"@{random.choice(usernames)}{random.randint(1, 99)}"
            contacts.append(username)
        
        return ' ‚Ä¢ '.join(contacts)

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞"""
        return {
            **self.stats,
            'selenium_enabled': self.selenium_enabled,
            'failure_count': self.failure_count,
            'cached_posts': len(self.posts_cache),
            'last_update': self.last_update.isoformat() if self.last_update else None,
            'can_parse': self.should_attempt_parsing(),
            'groups_count': len(self.groups)
        }


class EnhancedCatBotWithSelenium:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç —Å Selenium –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AdvancedSeleniumTelegramParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()

    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            if post.get('source') == 'selenium':
                source_tag = ' ü§ñ'
                status = "‚úÖ Selenium –ø–∞—Ä—Å–∏–Ω–≥"
            elif post.get('source') == 'mock_selenium':
                source_tag = ' üé≠'
                status = "‚ö†Ô∏è –î–µ–º–æ (Selenium –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
            else:
                source_tag = ' üìã'
                status = "‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
            
            post_text = (
                f"{emoji} <b>{post['title']}</b>{source_tag}\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ</a>\n\n"
                f"<i>{status}</i>"
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_group_posts(self, chat_id: int, animal_type: str = 'cats'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            loading_msg = self.bot.send_message(
                chat_id,
                "üîÑ <b>–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è...</b>\n\n"
                "‚è≥ –ü–∞—Ä—Å–∏–º Telegram-–≥—Ä—É–ø–ø—ã —Å –ø–æ–º–æ—â—å—é Selenium\n"
                "ü§ñ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥",
                parse_mode="HTML"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
            posts = self.parser.get_group_posts_selenium(animal_type, 5)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            try:
                self.bot.delete_message(chat_id, loading_msg.message_id)
            except:
                pass
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    "üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞–ø—Ä—è–º—É—é"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞
            stats = self.parser.get_statistics()
            
            group_name = "–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞" if animal_type == 'cats' else "–Ø–ª—Ç–∞ –ñ–∏–≤–æ—Ç–Ω—ã–µ"
            group_url = self.parser.groups[0]['url'] if animal_type == 'cats' else self.parser.groups[1]['url']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            selenium_count = sum(1 for p in posts if p.get('source') == 'selenium')
            mock_count = len(posts) - selenium_count
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
            if selenium_count > 0:
                status_text = f"ü§ñ <b>Selenium –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω</b>: {selenium_count} –∏–∑ {len(posts)}"
                status_emoji = "‚úÖ"
            elif not self.parser.selenium_enabled:
                status_text = "‚ö†Ô∏è <b>Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\nüìã –ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏—è"
                status_emoji = "üîß"
            elif self.parser.failure_count > 0:
                status_text = f"‚ö†Ô∏è <b>–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b> (–ø–æ–ø—ã—Ç–æ–∫: {self.parser.failure_count})\nüé≠ –ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
                status_emoji = "üîÑ"
            else:
                status_text = "üìã <b>–ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>"
                status_emoji = "üìù"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
            next_attempt_info = ""
            if self.parser.failure_count > 0:
                cooldown_minutes = min(self.parser.failure_count * 3, 45)
                next_attempt = ""
                if self.parser.last_attempt:
                    time_passed = (datetime.now() - self.parser.last_attempt).total_seconds() / 60
                    remaining = max(0, cooldown_minutes - time_passed)
                    if remaining > 0:
                        next_attempt = f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑: {int(remaining)} –º–∏–Ω"
                
                next_attempt_info = f"\nüîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {cooldown_minutes} –º–∏–Ω{next_attempt}"
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            tech_info = ""
            if selenium_count > 0:
                tech_info = f"\n\nüìä <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>"
                tech_info += f"\n‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['selenium_success']}"
                tech_info += f"\n‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['selenium_failures']}"
                tech_info += f"\n‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {stats['total_posts_parsed']}"
            
            header_text = (
                f"{status_emoji} <b>{'–ö–û–®–ö–ò' if animal_type == 'cats' else '–°–û–ë–ê–ö–ò'} –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üì¢ –ì—Ä—É–ø–ø–∞: <a href='{group_url}'>{group_name}</a>\n\n"
                f"{status_text}{next_attempt_info}{tech_info}"
            )
            
            self.bot.send_message(chat_id, header_text, parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã —Å –ø–∞—É–∑–∞–º–∏
            for i, post in enumerate(posts):
                self.send_post(chat_id, post)
                if i < len(posts) - 1:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                    time.sleep(1)
            
            # –§—É—Ç–µ—Ä —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            footer_text = (
                "üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å –∂–∏–≤–æ—Ç–Ω—ã–º:</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å {'–∫–æ—à–∫—É' if animal_type == 'cats' else '—Å–æ–±–∞–∫—É'}:</b>\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üì¢ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n<a href='{group_url}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É</a>\n\n"
                "ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º\n\n"
                "üîÑ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n"
                "/update - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n"
                "/selenium_status - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
            )
            
            self.bot.send_message(chat_id, footer_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≥—Ä—É–ø–ø—É:\n"
                f"{self.parser.groups[0]['url'] if animal_type == 'cats' else self.parser.groups[1]['url']}"
            )

    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        return markup
    
    def get_adoption_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º", "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup

    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ Selenium –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            selenium_status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if self.parser.selenium_enabled else "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            welcome_text = f"""üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üêæ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ª–∏—á–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã
ü§ñ Selenium –ø–∞—Ä—Å–∏–Ω–≥: {selenium_status}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∂–∏–≤–æ—Ç–Ω—ã–µ –∏—â—É—Ç –¥–æ–º  
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å

<i>üí° –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Selenium –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram-–≥—Ä—É–ø–ø</i>"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['selenium_status'])
        def selenium_status_handler(message):
            """–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Selenium –ø–∞—Ä—Å–µ—Ä–∞"""
            try:
                stats = self.parser.get_statistics()
                
                status_lines = ["ü§ñ <b>SELENIUM –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê</b>\n"]
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
                if self.parser.selenium_enabled:
                    status_lines.append("‚úÖ <b>Selenium:</b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤")
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
                    status_lines.append(f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>")
                    status_lines.append(f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤: {stats['selenium_success']}")
                    status_lines.append(f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {stats['selenium_failures']}")
                    status_lines.append(f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–æ–≤: {stats['fallback_used']}")
                    status_lines.append(f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {stats['total_posts_parsed']}")
                    
                    # –ö—ç—à
                    status_lines.append(f"\nüíæ <b>–ö—ç—à:</b> {stats['cached_posts']} –ø–æ—Å—Ç–æ–≤")
                    
                    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if stats['last_update']:
                        last_update = datetime.fromisoformat(stats['last_update'])
                        formatted_date = last_update.strftime('%d.%m.%Y %H:%M:%S')
                        status_lines.append(f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {formatted_date}")
                    
                    # –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                    if stats['can_parse']:
                        status_lines.append("üü¢ <b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</b> –ì–æ—Ç–æ–≤ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É")
                    else:
                        cooldown = min(stats['failure_count'] * 3, 45)
                        time_passed = 0
                        if self.parser.last_attempt:
                            time_passed = int((datetime.now() - self.parser.last_attempt).total_seconds() / 60)
                        remaining = max(0, cooldown - time_passed)
                        status_lines.append(f"üü° <b>–ö—É–ª–¥–∞—É–Ω:</b> {remaining} –º–∏–Ω (–∏–∑ {cooldown})")
                    
                else:
                    status_lines.append("‚ùå <b>Selenium:</b> –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    status_lines.append("\nüì¶ <b>–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>")
                    status_lines.append("pip install selenium undetected-chromedriver")
                
                # –ì—Ä—É–ø–ø—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                status_lines.append(f"\nüì¢ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≥—Ä—É–ø–ø—ã:</b> {stats['groups_count']}")
                for group in self.parser.groups:
                    group_emoji = "üê±" if group['type'] == 'cats' else "üê∂"
                    status_lines.append(f"{group_emoji} {group['username']}")
                
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–µ—Å–ª–∏ Selenium –¥–æ—Å—Ç—É–ø–µ–Ω)
                if self.parser.selenium_enabled:
                    status_lines.append("\nüß™ <b>–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç:</b>")
                    try:
                        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥—Ä–∞–π–≤–µ—Ä
                        test_driver = self.parser.setup_selenium_driver(headless=True)
                        test_driver.quit()
                        status_lines.append("‚úÖ –î—Ä–∞–π–≤–µ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        status_lines.append(f"‚ùå –û—à–∏–±–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞: {str(e)[:50]}...")
                
                self.bot.send_message(
                    message.chat.id,
                    "\n".join(status_lines),
                    parse_mode="HTML"
                )
                
            except Exception as e:
                self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Selenium"""
            loading_msg = self.bot.send_message(
                message.chat.id, 
                "üîÑ <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</b>\n\n"
                "ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Selenium –ø–∞—Ä—Å–∏–Ω–≥\n"
                "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30-60 —Å–µ–∫—É–Ω–¥",
                parse_mode="HTML"
            )
            
            # –°–±—Ä–æ—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            self.parser.posts_cache = []
            self.parser.last_update = None
            self.parser.failure_count = max(0, self.parser.failure_count - 2)
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                posts = self.parser.get_group_posts_selenium('all', 6)
                stats = self.parser.get_statistics()
                
                selenium_count = sum(1 for p in posts if p.get('source') == 'selenium')
                mock_count = len(posts) - selenium_count
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                try:
                    self.bot.delete_message(message.chat.id, loading_msg.message_id)
                except:
                    pass
                
                status_text = f"üîÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n\n"
                
                if selenium_count > 0:
                    status_text += f"‚úÖ <b>Selenium –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!</b>\n"
                    status_text += f"ü§ñ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Selenium: {selenium_count}\n"
                    status_text += f"üìã –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {mock_count}\n"
                    status_text += f"üìä –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤: {stats['selenium_success']}"
                else:
                    status_text += f"‚ö†Ô∏è <b>Selenium –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n"
                    if not self.parser.selenium_enabled:
                        status_text += f"üîß –ü—Ä–∏—á–∏–Ω–∞: Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
                    else:
                        status_text += f"üîÑ –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {stats['selenium_failures']}\n"
                    status_text += f"üé≠ –ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã: {mock_count}"
                
                self.bot.send_message(message.chat.id, status_text, parse_mode="HTML")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                try:
                    self.bot.delete_message(message.chat.id, loading_msg.message_id)
                except:
                    pass
                self.bot.send_message(
                    message.chat.id, 
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n\n"
                    f"üîß {str(e)[:100]}...\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /selenium_status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                    parse_mode="HTML"
                )

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
        @self.bot.message_handler(func=lambda m: m.text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        def adoption_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            stats = self.parser.get_statistics()
            selenium_posts = sum(1 for p in self.parser.posts_cache if p.get('source') == 'selenium')
            
            status_line = ""
            if selenium_posts > 0:
                status_line = f"\nü§ñ <b>–°—Ç–∞—Ç—É—Å:</b> Selenium –∞–∫—Ç–∏–≤–µ–Ω ({selenium_posts} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)"
            elif not self.parser.selenium_enabled:
                status_line = f"\nüîß <b>–°—Ç–∞—Ç—É—Å:</b> Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            elif self.parser.failure_count > 0:
                status_line = f"\n‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            else:
                status_line = f"\nüìã <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã"
            
            info_text = f"""üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>{status_line}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üê± <b>–ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Selenium

üê∂ <b>–°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Selenium

üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>
–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
            
            self.bot.send_message(
                message.chat.id, 
                info_text, 
                parse_mode="HTML",
                reply_markup=self.get_adoption_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º")
        def cats_handler(message):
            self.send_group_posts(message.chat.id, 'cats')
        
        @self.bot.message_handler(func=lambda m: m.text == "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        def dogs_handler(message):
            self.send_group_posts(message.chat.id, 'dogs')

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        # ... [–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞]

    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Selenium"""
        
        @self.app.route('/')
        def home():
            stats = self.parser.get_statistics()
            selenium_posts = sum(1 for p in self.parser.posts_cache if p.get('source') == 'selenium')
            
            return jsonify({
                "status": "ü§ñ Enhanced Animal Bot with Selenium",
                "version": "3.0-selenium",
                "time": datetime.now().strftime('%H:%M:%S'),
                "users": len(self.stats["users"]), 
                "messages": self.stats["messages"],
                "selenium": {
                    "enabled": self.parser.selenium_enabled,
                    "success_count": stats['selenium_success'],
                    "failure_count": stats['selenium_failures'],
                    "fallback_used": stats['fallback_used'],
                    "posts_extracted": stats['total_posts_parsed'],
                    "cached_posts": stats['cached_posts'],
                    "selenium_posts": selenium_posts,
                    "can_parse": stats['can_parse'],
                    "last_update": stats['last_update']
                },
                "groups": [g['url'] for g in self.parser.groups]
            })
        
        @self.app.route('/selenium_test')
        def selenium_test():
            """API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Selenium"""
            if not self.parser.selenium_enabled:
                return jsonify({
                    "status": "error",
                    "message": "Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    "install_command": "pip install selenium undetected-chromedriver"
                }), 400
            
            try:
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
                start_time = time.time()
                test_driver = self.parser.setup_selenium_driver(headless=True)
                setup_time = time.time() - start_time
                
                # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                load_start = time.time()
                test_driver.get("https://httpbin.org/user-agent")
                load_time = time.time() - load_start
                
                user_agent = test_driver.find_element(By.TAG_NAME, "body").text
                test_driver.quit()
                
                return jsonify({
                    "status": "success",
                    "setup_time": round(setup_time, 2),
                    "load_time": round(load_time, 2),
                    "user_agent": user_agent[:100],
                    "timestamp": datetime.now().isoformat()
                })
                
            except Exception as e:
                return jsonify({
                    "status": "error",
                    "message": str(e)[:200],
                    "timestamp": datetime.now().isoformat()
                }), 500
        
        @self.app.route('/posts')
        def posts_api():
            try:
                posts = self.parser.get_cached_or_mock_posts('all', 10)
                stats = self.parser.get_statistics()
                selenium_count = sum(1 for p in posts if p.get('source') == 'selenium')
                
                return jsonify({
                    "status": "ok",
                    "total": len(posts),
                    "selenium_posts": selenium_count,
                    "mock_posts": len(posts) - selenium_count,
                    "posts": posts,
                    "selenium_stats": stats
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
        
        @self.app.route('/force_selenium_update')
        def force_selenium_update():
            """API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ Selenium –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
            try:
                # –°–±—Ä–æ—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                self.parser.posts_cache = []
                self.parser.last_update = None  
                self.parser.failure_count = max(0, self.parser.failure_count - 2)
                
                start_time = time.time()
                posts = self.parser.get_group_posts_selenium('all', 8)
                parse_time = time.time() - start_time
                
                stats = self.parser.get_statistics()
                selenium_count = sum(1 for p in posts if p.get('source') == 'selenium')
                
                return jsonify({
                    "status": "selenium_updated",
                    "timestamp": datetime.now().isoformat(),
                    "parse_time": round(parse_time, 2),
                    "total_posts": len(posts),
                    "selenium_posts": selenium_count,
                    "mock_posts": len(posts) - selenium_count,
                    "selenium_enabled": self.parser.selenium_enabled,
                    "stats": stats
                })
            except Exception as e:
                logger.error(f"‚ùå Force selenium update error: {e}")
                return jsonify({"status": "error", "message": str(e)[:200]}), 500

    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ Enhanced Animal Bot —Å Selenium"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Animal Bot v3.0 with Selenium...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Selenium
        if self.parser.selenium_enabled:
            logger.info("‚úÖ Selenium –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω")
            try:
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Selenium
                test_driver = self.parser.setup_selenium_driver(headless=True)
                test_driver.quit()
                logger.info("‚úÖ Selenium –¥—Ä–∞–π–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Selenium –¥—Ä–∞–π–≤–µ—Ä–æ–º: {e}")
                self.parser.selenium_enabled = False
        else:
            logger.warning("‚ö†Ô∏è Selenium –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–º–µ—Ä—ã")
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Selenium
        try:
            logger.info("üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Selenium...")
            posts = self.parser.get_group_posts_selenium('all', 5)
            stats = self.parser.get_statistics()
            
            selenium_count = sum(1 for p in posts if p.get('source') == 'selenium')
            mock_count = len(posts) - selenium_count
            
            if selenium_count > 0:
                logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Selenium (—Ä–µ–∞–ª—å–Ω—ã—Ö: {selenium_count}, –ø—Ä–∏–º–µ—Ä–æ–≤: {mock_count})")
            else:
                logger.warning(f"‚ö†Ô∏è Selenium –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã: {mock_count}")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Selenium: {e}")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if self.setup_webhook():
            logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ")
            self.app.run(host='0.0.0.0', port=self.port, debug=False)
        else:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
            try:
                self.bot.polling(none_stop=True, interval=0, timeout=20)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
                time.sleep(5)
                self.bot.polling()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        self.parser.cleanup_driver()


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    os.makedirs('assets/images', exist_ok=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    if not os.path.exists('assets/free_text.html'):
        with open('assets/free_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üÜì –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>
üîπ –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ä–æ–¥–∞ –Ø–ª—Ç—ã
üîπ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã –∑–∞—â–∏—Ç—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>
üîπ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: +7 978 144-90-70
üîπ –ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-11  

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>
‚è∞ –ó–∞–ø–∏—Å—å —Å—Ç—Ä–æ–≥–æ –∑–∞—Ä–∞–Ω–µ–µ! –ú–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥""")

    if not os.path.exists('assets/paid_text.html'):
        with open('assets/paid_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üí∞ –ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ –Ø–ª—Ç—ã:</b>

üîπ <b>–ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 3000‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2500‚ÇΩ
   üí∞ –°–æ–±–∞–∫–∏: –æ—Ç 5000‚ÇΩ | –ö–æ–±–µ–ª–∏: –æ—Ç 4000‚ÇΩ  
   üìû +7 978 000-00-12
   üìç —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 14

üîπ <b>–í–µ—Ç—Ü–µ–Ω—Ç—Ä "–í–µ—Ç–ú–∏—Ä"</b>  
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 2500‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2000‚ÇΩ
   üí∞ –°–æ–±–∞–∫–∏: –æ—Ç 4500‚ÇΩ | –ö–æ–±–µ–ª–∏: –æ—Ç 3500‚ÇΩ
   üìû +7 978 000-00-13  
   üìç —É–ª. –ü—É—à–∫–∏–Ω–∞, 28""")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    missing_deps = []
    
    try:
        import undetected_chromedriver as uc
        print("‚úÖ undetected-chromedriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        missing_deps.append("undetected-chromedriver")
    
    try:
        from selenium import webdriver
        print("‚úÖ selenium —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        missing_deps.append("selenium")
    
    if missing_deps:
        print(f"\n‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
        print("üì¶ –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"pip install {' '.join(missing_deps)}")
        print("\n‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞!")
        time.sleep(3)
    else:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Selenium —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
    print("\nüìã –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è Selenium:")
    print("‚Ä¢ Chrome/Chromium –±—Ä–∞—É–∑–µ—Ä (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    print("‚Ä¢ –ú–∏–Ω–∏–º—É–º 512MB RAM –¥–ª—è headless —Ä–µ–∂–∏–º–∞")  
    print("‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced Animal Bot with Selenium...")
        bot = EnhancedCatBotWithSelenium()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\n‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install selenium undetected-chromedriver")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å Chrome/Chromium –¥—Ä–∞–π–≤–µ—Ä–æ–º")
        print("4. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è Selenium")
        print("\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        time.sleep(30)
