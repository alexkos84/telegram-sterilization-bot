import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
from typing import Dict, List, Optional

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ContentManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –±–æ—Ç–∞"""
    
    def __init__(self, assets_dir: str = "assets"):
        self.assets_dir = assets_dir
        self.texts = {}
        self.images = {}
        self.load_all_content()
    
    def load_text(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ HTML —Ñ–∞–π–ª–∞"""
        try:
            path = os.path.join(self.assets_dir, filename)
            with open(path, encoding="utf-8") as f:
                return f.read()
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return f"–ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑ {filename} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    
    def load_all_content(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if not os.path.exists(self.assets_dir):
            logger.warning(f"üìÅ –ü–∞–ø–∫–∞ {self.assets_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            os.makedirs(self.assets_dir, exist_ok=True)
            return
        
        try:
            for filename in os.listdir(self.assets_dir):
                if filename.endswith('.html'):
                    key = filename.replace('.html', '')
                    self.texts[key] = self.load_text(filename)
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç: {filename} -> {key}")
                elif filename.endswith(('.jpg', '.jpeg', '.png')):
                    key = filename.split('.')[0]
                    self.images[key] = os.path.join(self.assets_dir, filename)
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename} -> {key}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    def get_text(self, key: str, default: str = "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É"""
        return self.texts.get(key, default)
    
    def get_image_path(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–æ –∫–ª—é—á—É"""
        return self.images.get(key)

class DatabaseManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, db_file: str = "user_data.json"):
        self.db_file = db_file
        self.data = self.load_data()
    
    def load_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.db_file):
                with open(self.db_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"users": {}, "statistics": {"total_users": 0, "messages_sent": 0}}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.db_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def add_user(self, user_id: int, username: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        if user_id_str not in self.data["users"]:
            self.data["users"][user_id_str] = {
                "username": username,
                "first_seen": datetime.now().isoformat(),
                "last_activity": datetime.now().isoformat(),
                "message_count": 0
            }
            self.data["statistics"]["total_users"] += 1
            logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})")
        else:
            self.data["users"][user_id_str]["last_activity"] = datetime.now().isoformat()
        
        self.data["users"][user_id_str]["message_count"] += 1
        self.data["statistics"]["messages_sent"] += 1
        self.save_data()

class CatBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.content_manager = ContentManager()
        self.db_manager = DatabaseManager()
        self.app = Flask(__name__)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = (
            os.environ.get('RAILWAY_STATIC_URL') or 
            os.environ.get('RAILWAY_PUBLIC_DOMAIN') or
            os.environ.get('WEBHOOK_URL')
        )
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_message_with_image(self, chat_id: int, text: str, image_key: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ"""
        try:
            if image_key:
                image_path = self.content_manager.get_image_path(image_key)
                if image_path and os.path.exists(image_path):
                    with open(image_path, 'rb') as photo:
                        self.bot.send_photo(
                            chat_id,
                            photo,
                            caption=text,
                            parse_mode="HTML",
                            disable_web_page_preview=True
                        )
                        return True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def get_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        return markup
    
    def get_back_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.db_manager.add_user(message.from_user.id, message.from_user.username)
            self.send_message_with_image(
                message.chat.id,
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ª–∏—á–Ω—ã–º –∫–æ—à–∫–∞–º!</b>\n\n"
                "üêæ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é:\n\n"
                "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏\n"
                "üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –ø–æ–∏—Å–∫ –¥–æ–º–∞ –¥–ª—è –∫–æ—à–µ–∫\n"
                "üö® <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å</b> - —Å—Ä–æ—á–Ω–∞—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å\n"
                "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏\n"
                "‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            self.bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['status', 'stats'])
        def status_handler(message):
            stats = self.db_manager.data["statistics"]
            now = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
            
            status_text = f"""ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
‚è∞ –í—Ä–µ–º—è: <code>{now}</code>
üÜî –í–∞—à ID: <code>{message.from_user.id}</code>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['messages_sent']}
"""
            self.send_message_with_image(message.chat.id, status_text)
        
        @self.bot.message_handler(commands=['admin'])
        def admin_handler(message):
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –∞–¥–º–∏–Ω–∫–∏
            admin_ids = [int(x) for x in os.environ.get('ADMIN_IDS', '').split(',') if x.strip()]
            if message.from_user.id not in admin_ids:
                self.send_message_with_image(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            stats = self.db_manager.data["statistics"]
            users_count = len(self.db_manager.data["users"])
            
            admin_text = f"""üë®‚Äçüíª <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_sent']}

üîÑ <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/reload - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
/backup - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
"""
            self.send_message_with_image(message.chat.id, admin_text)
        
        @self.bot.message_handler(commands=['reload'])
        def reload_handler(message):
            admin_ids = [int(x) for x in os.environ.get('ADMIN_IDS', '').split(',') if x.strip()]
            if message.from_user.id not in admin_ids:
                return
            
            self.content_manager.load_all_content()
            self.send_message_with_image(message.chat.id, "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
        
        @self.bot.message_handler(func=lambda m: True)
        def message_handler(message):
            self.db_manager.add_user(message.from_user.id, message.from_user.username)
            self.handle_message(message)
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = message.text
        chat_id = message.chat.id
        
        try:
            if text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add("üí∞ –ü–ª–∞—Ç–Ω–∞—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è")
                markup.add("üîô –ù–∞–∑–∞–¥")
                
                self.bot.send_message(
                    chat_id,
                    "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–∫</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏:\n\n"
                    "üí∞ <b>–ü–ª–∞—Ç–Ω–∞—è</b> - —á–∞—Å—Ç–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏\n"
                    "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è</b> - –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ø–æ–º–æ—â–∏",
                    reply_markup=markup,
                    parse_mode="HTML"
                )
            
            elif text in ["üí∞ –ü–ª–∞—Ç–Ω–∞—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"]:
                content_key = "paid_text" if text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è" else "free_text"
                image_key = "paid" if text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è" else "free"
                
                content = self.content_manager.get_text(
                    content_key, 
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {'–ø–ª–∞—Ç–Ω–æ–π' if text == 'üí∞ –ü–ª–∞—Ç–Ω–∞—è' else '–±–µ—Å–ø–ª–∞—Ç–Ω–æ–π'} —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                )
                
                self.send_message_with_image(chat_id, content, image_key)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                self.bot.send_message(
                    chat_id,
                    "–ß—Ç–æ –µ—â–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    reply_markup=self.get_back_keyboard()
                )
            
            elif text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ":
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add("üë∂ –ö–æ—Ç—è—Ç–∞", "üê± –í–∑—Ä–æ—Å–ª—ã–µ –∫–æ—à–∫–∏")
                markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üîô –ù–∞–∑–∞–¥")
                
                self.bot.send_message(
                    chat_id,
                    "üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—à–µ–∫</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n"
                    "üë∂ <b>–ö–æ—Ç—è—Ç–∞</b> - –º–∞–ª—ã—à–∏ –∏—â—É—Ç –¥–æ–º\n"
                    "üê± <b>–í–∑—Ä–æ—Å–ª—ã–µ –∫–æ—à–∫–∏</b> - –≤–∑—Ä–æ—Å–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ\n"
                    "üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b> - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                    reply_markup=markup,
                    parse_mode="HTML"
                )
            
            elif text == "üë∂ –ö–æ—Ç—è—Ç–∞":
                content = self.content_manager.get_text(
                    "kittens_adoption",
                    """üë∂ <b>–ö–æ—Ç—è—Ç–∞ –∏—â—É—Ç –¥–æ–º</b>

üê± –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:
‚Ä¢ –†—ã–∂–∏–π –∫–æ—Ç–µ–Ω–æ–∫ "–ú—É—Ä–∑–∏–∫" (2 –º–µ—Å.)
‚Ä¢ –¢—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–∞—è –∫–æ—à–µ—á–∫–∞ "–ú—É—Å—è" (1.5 –º–µ—Å.)
‚Ä¢ –°–µ—Ä—ã–π –ø–æ–ª–æ—Å–∞—Ç—ã–π "–ë–∞—Ä—Å–∏–∫" (3 –º–µ—Å.)

üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
–ê–Ω–Ω–∞: +7 978 000-00-01
Telegram: @adoption_coordinator

üíù –í—Å–µ –∫–æ—Ç—è—Ç–∞:
‚úÖ –ó–¥–æ—Ä–æ–≤—ã –∏ –ø—Ä–∏–≤–∏—Ç—ã
‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–æ–≤
‚úÖ –°–æ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"""
                )
                self.send_message_with_image(chat_id, content, "kittens")
            
            elif text == "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å":
                content = self.content_manager.get_text(
                    "emergency_help",
                    """üö® <b>–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–ú–û–©–¨</b>

üè• <b>–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏:</b>
üìû "–î–æ–∫—Ç–æ—Ä –ê–π–±–æ–ª–∏—Ç": +7 978 000-00-00
üìç –≥. –Ø–ª—Ç–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1

üÜò <b>–ü—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏:</b>
1Ô∏è‚É£ –ù–µ –¥–∞–≤–∞–π—Ç–µ –≤–æ–¥—É –∏ –µ–¥—É
2Ô∏è‚É£ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∫ –≤—Ä–∞—á—É
3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–∑–µ—Ü —Ä–≤–æ—Ç—ã

ü©π <b>–ü—Ä–∏ —Ç—Ä–∞–≤–º–∞—Ö:</b>
1Ô∏è‚É£ –û—Å—Ç–æ—Ä–æ–∂–Ω–æ –≤ –ø–µ—Ä–µ–Ω–æ—Å–∫—É
2Ô∏è‚É£ –ö –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É
3Ô∏è‚É£ –ù–µ –¥–∞–≤–∞—Ç—å –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ

üì± <b>–í–æ–ª–æ–Ω—Ç–µ—Ä—ã 24/7:</b>
@emergency_help_cats"""
                )
                self.send_message_with_image(chat_id, content)
            
            elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                content = self.content_manager.get_text("contacts", self.get_default_contacts())
                self.send_message_with_image(chat_id, content)
            
            elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
                content = self.content_manager.get_text("about_project", self.get_default_about())
                self.send_message_with_image(chat_id, content, "about")
            
            elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                stats = self.db_manager.data["statistics"]
                stats_text = f"""üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê</b>

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {stats['total_users']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['messages_sent']}

üè• <b>–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 500+ –∫–æ—à–µ–∫
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ: 200+ –∫–æ—Ç—è—Ç
üîπ –í—ã–ª–µ—á–µ–Ω–æ: 150+ –∂–∏–≤–æ—Ç–Ω—ã—Ö
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 50+ –∞–∫—Ç–∏–≤–Ω—ã—Ö

üìà –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
                self.send_message_with_image(chat_id, stats_text)
            
            elif text == "üîô –ù–∞–∑–∞–¥":
                self.bot.send_message(
                    chat_id,
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=self.get_main_keyboard()
                )
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                self.bot.send_message(
                    chat_id,
                    "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                    "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞",
                    reply_markup=self.get_main_keyboard()
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.send_message_with_image(
                chat_id, 
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
    
    def get_default_contacts(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return """üìû <b>–í–ê–ñ–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´</b>

üë• <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã:</b>
üîπ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ (—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è): +7 978 144-90-70
üîπ –ê–Ω–Ω–∞ (–ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ): +7 978 000-00-01
üîπ –ú–∏—Ö–∞–∏–ª (–ª–µ—á–µ–Ω–∏–µ): +7 978 000-00-02

üè• <b>–ö–ª–∏–Ω–∏–∫–∏-–ø–∞—Ä—Ç–Ω–µ—Ä—ã:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-03
üîπ "–í–µ—Ç–ú–∏—Ä": +7 978 000-00-04

üì± <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
üîπ Telegram: @yalta_cats
üîπ Instagram: @yalta_street_cats"""
    
    def get_default_about(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        return """‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï</b>

üéØ <b>–ú–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∫–æ—à–∫–∞–º –≤ –Ø–ª—Ç–µ

üìä <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 500+ –∫–æ—à–µ–∫
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ: 200+ –∫–æ—Ç—è—Ç
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 50+ –∞–∫—Ç–∏–≤–Ω—ã—Ö

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å:</b>
–ö–∞—Ä—Ç–∞: 2202 2020 0000 0000

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ü–∏—à–∏—Ç–µ @volunteer_coordinator"""
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            stats = self.db_manager.data["statistics"]
            return jsonify({
                "status": "ü§ñ Cat Helper Bot is running!",
                "time": datetime.now().strftime('%H:%M:%S'),
                "date": datetime.now().strftime('%d.%m.%Y'),
                "users": stats["total_users"],
                "messages": stats["messages_sent"]
            })
        
        @self.app.route('/health')
        def health():
            return jsonify({
                "status": "ok",
                "timestamp": datetime.now().isoformat(),
                "bot_info": "Cat Helper Bot Active"
            })
        
        @self.app.route('/stats')
        def stats_endpoint():
            return jsonify(self.db_manager.data["statistics"])
    
    def setup_webhook(self) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url, max_connections=10)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Cat Helper Bot...")
        if self.setup_webhook():
            logger.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            self.app.run(host='0.0.0.0', port=self.port, debug=False)
        else:
            logger.error("üö® Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

# üöÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    bot = CatBot()
    bot.run()
