import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AdvancedChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –Ø–ª—Ç–µ"""
    
    def __init__(self):
        self.channels = [
            {
                'username': 'cats_yalta',
                'url': 'https://t.me/cats_yalta',
                'type': 'cats',
                'title': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)'
            },
            {
                'username': 'cats_yalta_group',
                'url': 'https://t.me/cats_yalta_group',
                'type': 'cats',
                'title': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)'
            },
            {
                'username': 'dogs_yalta',
                'url': 'https://t.me/dogs_yalta',
                'type': 'dogs',
                'title': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)'
            },
            {
                'username': 'dogs_yalta_group',
                'url': 'https://t.me/dogs_yalta_group',
                'type': 'dogs',
                'title': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)'
            }
        ]
        self.posts_cache = []
        self.last_update = None
    
    def get_channel_posts(self, channel_type: str = 'all', limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            posts = []
            for channel in self.channels:
                if channel_type != 'all' and channel['type'] != channel_type:
                    continue
                    
                web_url = f'https://t.me/s/{channel["username"]}'
                logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å {web_url}")
                response = requests.get(web_url, headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }, timeout=15)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                message_divs = soup.find_all('div', class_='tgme_widget_message')
                
                for div in message_divs[:limit*2]:
                    post_data = self.parse_message_div(div, channel)
                    if post_data and self.is_animal_related(post_data.get('text', ''), channel_type):
                        posts.append(post_data)
                        if len(posts) >= limit:
                            break
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            posts.sort(key=lambda x: x.get('timestamp', 0), reverse=True)
            
            if posts:
                self.posts_cache = posts[:limit]
                self.last_update = datetime.now()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ (—Å —Ñ–æ—Ç–æ: {sum(1 for p in posts if p['photo_url'])})")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤")
                
            return posts[:limit] or self.get_mock_posts(channel_type)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_mock_posts(channel_type)
    
    def parse_message_div(self, div, channel) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç, –∏–∑–≤–ª–µ–∫–∞—è —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            post_id = div.get('data-post', '').split('/')[-1] or 'unknown'
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            # –î–∞—Ç–∞
            timestamp = 0
            date_elem = div.find('time', datetime=True)
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    date_str = dt.strftime('%d.%m.%Y %H:%M')
                    timestamp = dt.timestamp()
                except:
                    pass
            
            # –§–æ—Ç–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–≤—å—é)
            photo_url = None
            photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and photo_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            # –í–∏–¥–µ–æ
            video_url = None
            video_wrap = div.find('div', class_='tgme_widget_message_video_wrap')
            if video_wrap and video_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", video_wrap['style'])
                if match:
                    video_url = match.group(1)
            
            if not text and not photo_url and not video_url:
                return None
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'timestamp': timestamp,
                'url': f"{channel['url']}/{post_id}" if post_id else channel['url'],
                'title': self.extract_title(text, channel['type']),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text),
                'photo_url': photo_url,
                'video_url': video_url,
                'has_media': bool(photo_url or video_url),
                'type': channel['type'],
                'channel': channel['title'],
                'channel_url': channel['url']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ div: {e}")
            return None
    
    def extract_title(self, text: str, animal_type: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        lines = text.split('\n')
        for line in lines[:3]:
            line = line.strip()
            if line and len(line) > 5:
                title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                if len(title) > 50:
                    title = title[:50] + "..."
                return title or ("–°–æ–±–∞–∫–∞ –∏—â–µ—Ç –¥–æ–º" if animal_type == 'dogs' else "–ö–æ—Ç–∏–∫ –∏—â–µ—Ç –¥–æ–º")
        return "–°–æ–±–∞–∫–∞ –∏—â–µ—Ç –¥–æ–º" if animal_type == 'dogs' else "–ö–æ—Ç–∏–∫ –∏—â–µ—Ç –¥–æ–º"
    
    def extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        clean_text = re.sub(r'@\w+|https?://\S+|\+?\d[\d\s\-\(\)]+', '', text)
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        if len(clean_text) > 200:
            return clean_text[:200] + "..."
        return clean_text or "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç–µ"
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        phone_pattern = r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}'
        phones = re.findall(phone_pattern, text)
        
        username_pattern = r'@\w+'
        usernames = re.findall(username_pattern, text)
        
        contacts = []
        if phones:
            contacts.extend(phones[:1])
        if usernames:
            contacts.extend(usernames[:1])
            
        return ' ‚Ä¢ '.join(contacts) if contacts else "–°–º. –≤ –≥—Ä—É–ø–ø–µ"
    
    def is_animal_related(self, text: str, animal_type: str = 'all') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –∂–∏–≤–æ—Ç–Ω—ã–º"""
        if animal_type == 'cats':
            keywords = [
                '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É',
                '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º', '–ø–∏—Ç–æ–º–µ—Ü', '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏–≤–∫',
                '–ø–æ—Ç–µ—Ä—è–ª', '–Ω–∞—à–µ–ª', '–ø—Ä–æ–ø–∞–ª', '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è—à–∫–∞'
            ]
        elif animal_type == 'dogs':
            keywords = [
                '—Å–æ–±–∞–∫', '–ø–µ—Å', '—â–µ–Ω', '—Å–æ–±–∞—á', '–ª–∞–π',
                '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º', '–ø–∏—Ç–æ–º–µ—Ü', '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏–≤–∫',
                '–ø–æ—Ç–µ—Ä—è–ª', '–Ω–∞—à–µ–ª', '–ø—Ä–æ–ø–∞–ª', '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è—à–∫–∞'
            ]
        else:
            keywords = [
                '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É',
                '—Å–æ–±–∞–∫', '–ø–µ—Å', '—â–µ–Ω', '—Å–æ–±–∞—á', '–ª–∞–π',
                '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º', '–ø–∏—Ç–æ–º–µ—Ü', '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏–≤–∫',
                '–ø–æ—Ç–µ—Ä—è–ª', '–Ω–∞—à–µ–ª', '–ø—Ä–æ–ø–∞–ª', '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è—à–∫–∞'
            ]
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in keywords)
    
    def get_mock_posts(self, channel_type: str = 'cats') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ"""
        if channel_type == 'dogs':
            return [
                {
                    'id': '2001',
                    'title': 'üêï –°–æ–±–∞–∫–∞ –†–µ–∫—Å –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 1 –≥–æ–¥, –º–∞–ª—å—á–∏–∫, —Å–º–µ—à–∞–Ω–Ω–∞—è –ø–æ—Ä–æ–¥–∞. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π.',
                    'date': '03.08.2025 14:30',
                    'timestamp': time.time(),
                    'url': 'https://t.me/dogs_yalta/2001',
                    'contact': '@volunteer_dogs ‚Ä¢ +7 978 123-45-67',
                    'photo_url': 'https://via.placeholder.com/600x400?text=–°–æ–±–∞–∫–∞+–†–µ–∫—Å',
                    'video_url': None,
                    'has_media': True,
                    'type': 'dogs',
                    'channel': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞',
                    'channel_url': 'https://t.me/dogs_yalta'
                }
            ]
        else:
            return [
                {
                    'id': '1001',
                    'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π.',
                    'date': '03.08.2025 14:30',
                    'timestamp': time.time(),
                    'url': 'https://t.me/cats_yalta/1001',
                    'contact': '@volunteer1 ‚Ä¢ +7 978 123-45-67',
                    'photo_url': 'https://via.placeholder.com/600x400?text=–ö–æ—Ç–µ–Ω–æ–∫+–ú—É—Ä–∑–∏–∫',
                    'video_url': None,
                    'has_media': True,
                    'type': 'cats',
                    'channel': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞',
                    'channel_url': 'https://t.me/cats_yalta'
                }
            ]

class CatBotWithPhotos:
    """–ë–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AdvancedChannelParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        self.contacts = self.load_contacts()
        
        self.setup_handlers()
        self.setup_routes()
    
    def load_contacts(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
        try:
            with open('assets/contacts.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return {
                "–∫–æ–Ω—Ç–∞–∫—Ç—ã": {
                    "—Å–≤–µ—Ç–ª–∞–Ω–∞": "+7 978 144-90-70",
                    "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä": "+7 978 144-90-70",
                    "—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è": "+7 978 000-00-02",
                    "–ª–µ—á–µ–Ω–∏–µ": "+7 978 000-00-03",
                    "–∞–π–±–æ–ª–∏—Ç": "+7 978 000-00-11",
                    "–≤–µ—Ç–º–∏—Ä": "+7 978 000-00-13",
                    "–≤–æ–ª–æ–Ω—Ç–µ—Ä—ã": "@cats_yalta_coordinator"
                },
                "—Å–∏–Ω–æ–Ω–∏–º—ã": {
                    "—Å–≤–µ—Ç–∞": "—Å–≤–µ—Ç–ª–∞–Ω–∞",
                    "—Å–≤–µ—Ç–∫–∞": "—Å–≤–µ—Ç–ª–∞–Ω–∞",
                    "–∫–ª–∏–Ω–∏–∫–∞": "–∞–π–±–æ–ª–∏—Ç",
                    "–≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞": "–∞–π–±–æ–ª–∏—Ç",
                    "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä": "–∞–π–±–æ–ª–∏—Ç",
                    "–≤—Ä–∞—á": "–∞–π–±–æ–ª–∏—Ç",
                    "—Å—Ç–µ—Ä–∏–ª": "—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è",
                    "–∫–∞—Å—Ç—Ä–∞—Ü–∏—è": "—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è"
                }
            }

    def send_post(self, chat_id: int, post: Dict, reply_to_message_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üêï'
            post_text = (
                f"{emoji} <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üì¢ <a href='{post['channel_url']}'>{post['channel']}</a>\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç</a>"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_to_message_id=reply_to_message_id,
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_to_message_id=reply_to_message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_channel_posts(self, chat_id: int, animal_type: str = 'cats', reply_to_message_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã —Å –º–µ–¥–∏–∞"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                channels = [c for c in self.parser.channels if c['type'] == animal_type]
                animal_name = "–∫–æ—Ç–∏–∫–æ–≤" if animal_type == 'cats' else "—Å–æ–±–∞–∫"
                self.bot.send_message(
                    chat_id,
                    f"üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {animal_name}.\n\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—ã:\n" +
                    '\n'.join([f"‚Ä¢ {c['url']}" for c in channels]),
                    reply_to_message_id=reply_to_message_id
                )
                return
            
            animal_emoji = 'üê±' if animal_type == 'cats' else 'üêï'
            animal_name = "–ö–û–¢–ò–ö–ò" if animal_type == 'cats' else "–°–û–ë–ê–ö–ò"
            
            self.bot.send_message(
                chat_id,
                f"{animal_emoji} <b>{animal_name} –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø –Ø–ª—Ç—ã:",
                parse_mode="HTML",
                reply_to_message_id=reply_to_message_id
            )
            
            for post in posts:
                self.send_post(chat_id, post)
                time.sleep(0.7)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
            
            channels = [c for c in self.parser.channels if c['type'] == animal_type]
            self.bot.send_message(
                chat_id,
                "üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å?</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞:</b>\n–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üì¢ <b>–ì—Ä—É–ø–ø—ã:</b>\n" +
                '\n'.join([f"‚Ä¢ <a href='{c['url']}'>{c['title']}</a>" for c in channels]) +
                "\n\nü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            animal_name = "–∫–æ—Ç–∏–∫–æ–≤" if animal_type == 'cats' else "—Å–æ–±–∞–∫"
            channels = [c for c in self.parser.channels if c['type'] == animal_type]
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {animal_name}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≥—Ä—É–ø–ø—ã:\n" +
                '\n'.join([f"‚Ä¢ {c['url']}" for c in channels]),
                reply_to_message_id=reply_to_message_id
            )

    def parse_command(self, text: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        clean_text = re.sub(r'@catYalta_bot\s*', '', text, flags=re.IGNORECASE).strip().lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
        result = {
            'action': 'unknown',
            'params': {},
            'text': clean_text
        }
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if any(word in clean_text for word in ['–Ω–æ–º–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∫–æ–Ω—Ç–∞–∫—Ç', '—Å–≤—è–∑–∞—Ç—å—Å—è', '–ø–æ–∑–≤–æ–Ω–∏—Ç—å']):
            result['action'] = 'contact'
            return result
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏
        if any(word in clean_text for word in ['—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è', '–∫–∞—Å—Ç—Ä–∞—Ü–∏—è', '—Å—Ç–µ—Ä–∏–ª', '–æ–ø–µ—Ä–∞—Ü–∏—è']):
            result['action'] = 'sterilization'
            if any(word in clean_text for word in ['–±–µ—Å–ø–ª–∞—Ç–Ω', '–¥–∞—Ä–æ–º', 'free']):
                result['params']['type'] = 'free'
            elif any(word in clean_text for word in ['–ø–ª–∞—Ç–Ω', 'paid', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                result['params']['type'] = 'paid'
            return result
        
        # –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if any(word in clean_text for word in ['–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º', '–≤–∑—è—Ç—å', '—É—Å—ã–Ω–æ–≤', '–Ω–∞–π—Ç–∏']):
            result['action'] = 'adoption'
            if any(word in clean_text for word in ['—Å–æ–±–∞–∫', '–ø–µ—Å', '—â–µ–Ω']):
                result['params']['animal'] = 'dogs'
            else:
                result['params']['animal'] = 'cats'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ç–∏–∫–∏
            return result
        
        # –ü–æ–¥–∞—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if any(word in clean_text for word in ['–ø–æ–¥–∞—Ç—å', '—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å', '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ø—Ä–∏—Å—Ç—Ä–æ–∏—Ç—å']):
            result['action'] = 'post_ad'
            return result
        
        # –û –ø—Ä–æ–µ–∫—Ç–µ
        if any(word in clean_text for word in ['–ø—Ä–æ–µ–∫—Ç', '–æ –Ω–∞—Å', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'about']):
            result['action'] = 'about'
            return result
        
        # –ü–æ–º–æ—â—å
        if any(word in clean_text for word in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã', '—á—Ç–æ —É–º–µ–µ—à—å']):
            result['action'] = 'help'
            return result
        
        return result

    def load_html_file(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ assets"""
        try:
            with open(f'assets/{filename}', 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML: {e}")
            return f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ({filename})"

    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            # –¢–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            if message.chat.type == 'private':
                self.stats["users"].add(message.from_user.id)
                self.stats["messages"] += 1
                
                welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ñ–∏–≤–æ—Ç–Ω—ã–µ –Ø–ª—Ç—ã"!</b>

üêæ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è @catYalta_bot –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ.

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:</b>
‚Ä¢ @catYalta_bot –Ω–æ–º–µ—Ä –°–≤–µ—Ç–ª–∞–Ω—ã
‚Ä¢ @catYalta_bot –∫–æ—Ç–∏–∫–∏ –∏—â—É—Ç –¥–æ–º  
‚Ä¢ @catYalta_bot —Å–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º
‚Ä¢ @catYalta_bot —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è
‚Ä¢ @catYalta_bot –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
‚Ä¢ @catYalta_bot –ø–æ–º–æ—â—å

üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> –û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º (–≤ –≥—Ä—É–ø–ø–∞—Ö)."""
                
                self.bot.send_message(
                    message.chat.id, 
                    welcome_text, 
                    parse_mode="HTML"
                )
        
        @self.bot.message_handler(func=lambda m: m.text and '@catYalta_bot' in m.text)
        def handle_mentions(message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ –ª—é–±–æ–º —á–∞—Ç–µ"""
            try:
                self.stats["users"].add(message.from_user.id)
                self.stats["messages"] += 1
                
                command = self.parse_command(message.text)
                
                if command['action'] == 'contact':
                    # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ
                    query = command['text']
                    contacts = self.contacts["–∫–æ–Ω—Ç–∞–∫—Ç—ã"]
                    synonyms = self.contacts["—Å–∏–Ω–æ–Ω–∏–º—ã"]
                    response = None
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    for keyword in contacts:
                        if keyword in query:
                            contact_info = contacts[keyword]
                            if contact_info.startswith('@'):
                                response = f"üì± {keyword.capitalize()}: {contact_info}"
                            else:
                                response = f"üìû {keyword.capitalize()}: {contact_info}"
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
                    if not response:
                        for syn, original in synonyms.items():
                            if syn in query:
                                contact_info = contacts[original]
                                if contact_info.startswith('@'):
                                    response = f"üì± {original.capitalize()}: {contact_info}"
                                else:
                                    response = f"üìû {original.capitalize()}: {contact_info}"
                                break
                    
                    if not response:
                        response = (
                            "üìû <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
                            "üîπ –°–≤–µ—Ç–ª–∞–Ω–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä): +7 978 144-90-70\n"
                            "üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è: +7 978 000-00-02\n"
                            "üîπ –õ–µ—á–µ–Ω–∏–µ: +7 978 000-00-03\n"
                            "üîπ –ö–ª–∏–Ω–∏–∫–∞ –ê–π–±–æ–ª–∏—Ç: +7 978 000-00-11\n"
                            "üîπ –ö–ª–∏–Ω–∏–∫–∞ –í–µ—Ç–ú–∏—Ä: +7 978 000-00-13\n"
                            "üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä—ã: @cats_yalta_coordinator\n\n"
                            "<i>–ü—Ä–∏–º–µ—Ä: @catYalta_bot –Ω–æ–º–µ—Ä –°–≤–µ—Ç–ª–∞–Ω—ã</i>"
                        )
                
                elif command['action'] == 'adoption':
                    animal_type = command['params'].get('animal', 'cats')
                    self.send_channel_posts(message.chat.id, animal_type, message.message_id)
                    return  # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                
                elif command['action'] == 'sterilization':
                    steril_type = command['params'].get('type')
                    if steril_type == 'free':
                        response = self.load_html_file('free_text.html')
                    elif steril_type == 'paid':
                        response = self.load_html_file('paid_text.html')
                    else:
                        response = """üè• <b>–°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø –ñ–ò–í–û–¢–ù–´–•</b>

üí∞ <b>–ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ –ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç": –æ—Ç 3000‚ÇΩ (+7 978 000-00-11)
‚Ä¢ –ö–ª–∏–Ω–∏–∫–∞ "–í–µ—Ç–ú–∏—Ä": –æ—Ç 2500‚ÇΩ (+7 978 000-00-13)

üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ –î–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: +7 978 144-90-70

<i>–ü–æ–¥—Ä–æ–±–Ω–µ–µ: @catYalta_bot –ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</i>
<i>–∏–ª–∏: @catYalta_bot –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</i>"""
                
                elif command['action'] == 'post_ad':
                    channels_cats = [c for c in self.parser.channels if c['type'] == 'cats']
                    channels_dogs = [c for c in self.parser.channels if c['type'] == 'dogs']
                    
                    response = f"""üìù <b>–ü–û–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï</b>

üì¢ <b>–ì—Ä—É–ø–ø—ã –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤:</b>
{chr(10).join([f'‚Ä¢ <a href="{c["url"]}">{c["title"]}</a>' for c in channels_cats])}

üì¢ <b>–ì—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–±–∞–∫:</b>
{chr(10).join([f'‚Ä¢ <a href="{c["url"]}">{c["title"]}</a>' for c in channels_dogs])}

‚úçÔ∏è <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å:</b>
1Ô∏è‚É£ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
3Ô∏è‚É£ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º: +7 978 144-90-70

üìã <b>–ù—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üîπ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –æ–∫—Ä–∞—Å/–ø–æ—Ä–æ–¥–∞
üîπ –•–∞—Ä–∞–∫—Ç–µ—Ä
üîπ –ó–¥–æ—Ä–æ–≤—å–µ (–ø—Ä–∏–≤–∏–≤–∫–∏, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è)
üîπ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
                
                elif command['action'] == 'about':
                    response = """‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï "–ñ–ò–í–û–¢–ù–´–ï –Ø–õ–¢–´"</b>

üéØ <b>–ú–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∫–æ—à–∫–∞–º –∏ —Å–æ–±–∞–∫–∞–º –Ø–ª—Ç—ã

üìä <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 500+ –∂–∏–≤–æ—Ç–Ω—ã—Ö
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ: 300+ –∫–æ—Ç—è—Ç –∏ —â–µ–Ω–∫–æ–≤
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 30+ –∞–∫—Ç–∏–≤–Ω—ã—Ö

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å:</b>
–ö–∞—Ä—Ç–∞: 2202 2020 0000 0000

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: +7 978 144-90-70
Telegram: @cats_yalta_coordinator"""
