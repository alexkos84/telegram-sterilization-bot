import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SimpleChannelParser:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±–µ–∑ API)"""
    
    def __init__(self):
        self.channel_username = 'Lapki_ruchki_Yalta_help'
        self.channel_url = 'https://t.me/Lapki_ruchki_Yalta_help'
        self.web_url = f'https://t.me/s/{self.channel_username}'  # –ü—É–±–ª–∏—á–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        
        self.posts_cache = []
        self.last_update = None
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
    
    def get_channel_posts(self, limit: int = 3) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–µ–π–ø–∏–Ω–≥"""
        try:
            logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å {self.web_url}")
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∫–∞–Ω–∞–ª–∞
            response = requests.get(self.web_url, headers=self.headers, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º –ø–æ—Å—Ç—ã (div —Å –∫–ª–∞—Å—Å–æ–º tgme_widget_message)
            message_divs = soup.find_all('div', class_='tgme_widget_message')
            
            posts = []
            for div in message_divs[:limit*2]:  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                post_data = self.parse_message_div(div)
                if post_data and self.is_cat_related(post_data.get('text', '')):
                    posts.append(post_data)
                    
                if len(posts) >= limit:
                    break
            
            if posts:
                self.posts_cache = posts
                self.last_update = datetime.now()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤")
                
            return posts or self.get_mock_posts()
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
            return self.get_mock_posts()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞: {e}")
            return self.get_mock_posts()
    
    def parse_message_div(self, div) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –∏–∑ HTML div"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞
            post_id = None
            data_post_attr = div.get('data-post')
            if data_post_attr:
                post_id = data_post_attr.split('/')[-1]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
            date_elem = div.find('time')
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                datetime_attr = date_elem.get('datetime')
                if datetime_attr:
                    try:
                        dt = datetime.fromisoformat(datetime_attr.replace('Z', '+00:00'))
                        date_str = dt.strftime('%d.%m.%Y %H:%M')
                    except:
                        pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            has_photo = bool(div.find('a', class_='tgme_widget_message_photo_wrap'))
            
            if not text:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                return None
            
            post_data = {
                'id': post_id or 'unknown',
                'text': text,
                'date': date_str,
                'url': f"{self.channel_url}/{post_id}" if post_id else self.channel_url,
                'title': self.extract_title(text),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text),
                'has_photo': has_photo
            }
            
            return post_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ div –ø–æ—Å—Ç–∞: {e}")
            return None
    
    def extract_title(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        lines = text.split('\n')
        for line in lines[:3]:
            line = line.strip()
            if line and len(line) > 10:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                if len(title) > 50:
                    title = title[:50] + "..."
                return title or "–ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º"
        return "–ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º"
    
    def extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
        clean_text = re.sub(r'@\w+|https?://\S+|\+?\d[\d\s\-\(\)]+', '', text)
        
        if len(clean_text) > 200:
            return clean_text[:200] + "..."
        return clean_text
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
        phone_pattern = r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}'
        phones = re.findall(phone_pattern, text)
        
        # –ò—â–µ–º —é–∑–µ—Ä–Ω–µ–π–º—ã
        username_pattern = r'@\w+'
        usernames = re.findall(username_pattern, text)
        
        contacts = []
        if phones:
            contacts.extend(phones[:1])
        if usernames:
            contacts.extend(usernames[:1])
            
        return ' ‚Ä¢ '.join(contacts) if contacts else "–°–º. –≤ –∫–∞–Ω–∞–ª–µ"
    
    def is_cat_related(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –∫–æ—à–∫–∞–º"""
        cat_keywords = [
            '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É',
            '–∫–∞—Å—Ç—Ä', '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏—Ç', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º',
            '–∫–æ—Ç—è—Ç–∞', '–º–∞–º–∞-–∫–æ—à–∫–∞', '–±–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–ø–∏—Ç–æ–º–µ—Ü'
        ]
        
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in cat_keywords)
    
    def get_mock_posts(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã"""
        return [
            {
                'id': '1001',
                'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π.',
                'date': '03.08.2025 14:30',
                'url': f'{self.channel_url}/1001',
                'contact': '@volunteer1 ‚Ä¢ +7 978 123-45-67',
                'has_photo': True
            },
            {
                'id': '1002',
                'title': 'üò∫ –ö–æ—à–µ—á–∫–∞ –ú—É—Å—è',
                'description': '–í–æ–∑—Ä–∞—Å—Ç: 1 –≥–æ–¥, –¥–µ–≤–æ—á–∫–∞, —Ç—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–∞—è. –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞, –ø—Ä–∏–≤–∏—Ç–∞.',
                'date': '03.08.2025 12:15',
                'url': f'{self.channel_url}/1002',
                'contact': '@volunteer2',
                'has_photo': True
            },
            {
                'id': '1003',
                'title': 'üêà –í–∑—Ä–æ—Å–ª—ã–π –∫–æ—Ç –ë–∞—Ä—Å–∏–∫',
                'description': '–í–æ–∑—Ä–∞—Å—Ç: 3 –≥–æ–¥–∞, –º–∞–ª—å—á–∏–∫, —Å–µ—Ä—ã–π. –ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å–ø–æ–∫–æ–π–Ω—ã–π.',
                'date': '02.08.2025 18:45',
                'url': f'{self.channel_url}/1003',
                'contact': '+7 978 987-65-43',
                'has_photo': False
            }
        ]
    
    def get_cached_posts(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        # –ï—Å–ª–∏ –∫—ç—à —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
        if (not self.last_update or 
            (datetime.now() - self.last_update).seconds > 1800):
            try:
                return self.get_channel_posts()
            except:
                pass
        
        return self.posts_cache if self.posts_cache else self.get_mock_posts()

class CatBotSimple:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –≤–µ–±-—Å–∫—Ä–µ–π–ø–∏–Ω–≥–æ–º"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.channel_parser = SimpleChannelParser()
        self.app = Flask(__name__)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = (
            os.environ.get('RAILWAY_STATIC_URL') or 
            os.environ.get('RAILWAY_PUBLIC_DOMAIN') or
            os.environ.get('WEBHOOK_URL')
        )
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_message(self, chat_id: int, text: str, markup=None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            self.bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=markup
            )
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    def send_channel_posts(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            posts = self.channel_parser.get_cached_posts()
            
            if not posts:
                self.send_message(
                    chat_id,
                    f"üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª: {self.channel_parser.channel_url}"
                )
                return
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            header = f"""üê± <b>–ö–û–®–ö–ò –ò–©–£–¢ –î–û–ú</b>

üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞:
<a href="{self.channel_parser.channel_url}">–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞ –ø–æ–º–æ—â—å</a>

‚¨áÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(posts)} –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"""
            
            self.send_message(chat_id, header)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
            for i, post in enumerate(posts, 1):
                post_text = f"""{'üî∏' if i == 1 else 'üîπ'} <b>{post['title']}</b>

üìù {post['description']}

üìÖ {post['date']}
üìû {post['contact']}
{'üì∑ –ï—Å—Ç—å —Ñ–æ—Ç–æ' if post.get('has_photo') else ''}

üîó <a href="{post['url']}">–°–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>
{'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' if i < len(posts) else ''}"""
                
                self.send_message(chat_id, post_text)
                time.sleep(0.3)
            
            # –§—É—Ç–µ—Ä
            footer = f"""üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å:</b>

üè† <b>–í–∑—è—Ç—å –∫–æ—à–∫—É:</b>
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

üì¢ <b>–ö–∞–Ω–∞–ª:</b> <a href="{self.channel_parser.channel_url}">–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞ –ø–æ–º–æ—â—å</a>

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª"""
            
            self.send_message(chat_id, footer)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {self.channel_parser.channel_url}"
            )
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        return markup
    
    def get_adoption_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º")
        markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup
    
    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üêæ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ª–∏—á–Ω—ã–º –∫–æ—à–∫–∞–º –Ø–ª—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∫–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
            
            self.send_message(message.chat.id, welcome_text, self.get_main_keyboard())
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
            self.channel_parser.posts_cache = []
            self.channel_parser.last_update = None
            self.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—è—é –ø–æ—Å—Ç—ã...")
            posts = self.channel_parser.get_channel_posts()
            self.send_message(message.chat.id, f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {len(posts)} –ø–æ—Å—Ç–æ–≤")
        
        @self.bot.message_handler(func=lambda m: True)
        def message_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            text = message.text
            chat_id = message.chat.id
            
            try:
                if text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ":
                    info_text = """üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—à–µ–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üê± <b>–ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞

üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>
–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
                    
                    self.send_message(chat_id, info_text, self.get_adoption_keyboard())
                
                elif text == "üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º":
                    self.send_channel_posts(chat_id)
                
                elif text == "üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
                    info_text = f"""üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>

üì¢ <b>–ö–∞–Ω–∞–ª –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>
<a href="{self.channel_parser.channel_url}">–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞ –ø–æ–º–æ—â—å</a>

‚úçÔ∏è <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å:</b>
1Ô∏è‚É£ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª
2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
3Ô∏è‚É£ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏:
   ‚Ä¢ –ê–Ω–Ω–∞: +7 978 000-00-01
   ‚Ä¢ Telegram: @adoption_coordinator

üìã <b>–ù—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üîπ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –æ–∫—Ä–∞—Å
üîπ –•–∞—Ä–∞–∫—Ç–µ—Ä
üîπ –ó–¥–æ—Ä–æ–≤—å–µ (–ø—Ä–∏–≤–∏–≤–∫–∏, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è)
üîπ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚úÖ –ß–µ—Å—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
                    
                    self.send_message(chat_id, info_text)
                
                elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                    contacts_text = """üìû <b>–ö–û–ù–¢–ê–ö–¢–´</b>

üë• <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è: +7 978 144-90-70
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: +7 978 000-00-01
üîπ –õ–µ—á–µ–Ω–∏–µ: +7 978 000-00-02

üè• <b>–ö–ª–∏–Ω–∏–∫–∏:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-03
üîπ "–í–µ—Ç–ú–∏—Ä": +7 978 000-00-04

üì± <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
üîπ Telegram: @yalta_cats
üîπ Instagram: @yalta_street_cats"""
                    
                    self.send_message(chat_id, contacts_text)
                
                elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
                    about_text = """‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï</b>

üéØ <b>–ú–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∫–æ—à–∫–∞–º –Ø–ª—Ç—ã

üìä <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 500+ –∫–æ—à–µ–∫
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ: 200+ –∫–æ—Ç—è—Ç
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 50+ –∞–∫—Ç–∏–≤–Ω—ã—Ö

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å:</b>
–ö–∞—Ä—Ç–∞: 2202 2020 0000 0000

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ü–∏—à–∏—Ç–µ @volunteer_coordinator"""
                    
                    self.send_message(chat_id, about_text)
                
                elif text == "üîô –ù–∞–∑–∞–¥":
                    self.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", self.get_main_keyboard())
                
                else:
                    self.send_message(
                        chat_id,
                        "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        self.get_main_keyboard()
                    )
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                self.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    
    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            return jsonify({
                "status": "ü§ñ Cat Bot Running",
                "time": datetime.now().strftime('%H:%M:%S'),
                "users": len(self.stats["users"]),
                "messages": self.stats["messages"],
                "channel": self.channel_parser.channel_url
            })
        
        @self.app.route('/posts')
        def posts_api():
            try:
                posts = self.channel_parser.get_cached_posts()
                return jsonify({
                    "status": "ok",
                    "count": len(posts),
                    "posts": posts,
                    "channel": self.channel_parser.channel_url
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
    
    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Cat Bot...")
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤
        try:
            posts = self.channel_parser.get_cached_posts()
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã: {e}")
        
        if self.setup_webhook():
            logger.info(f"üåê –°–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            self.app.run(host='0.0.0.0', port=self.port, debug=False)
        else:
            logger.error("üö® –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    bot = CatBotSimple()
    bot.run()
