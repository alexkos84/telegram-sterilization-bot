import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ lapki_ruchki_yalta —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.channel = {
            'username': 'lapki_ruchki_yalta',
            'url': 'https://t.me/lapki_ruchki_yalta',
            'web_url': 'https://t.me/s/lapki_ruchki_yalta'
        }
        self.posts_cache = []
        self.last_update = None
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
    
    def get_channel_posts(self, animal_type: str = 'all', limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ lapki_ruchki_yalta"""
        try:
            logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å {self.channel['web_url']}")
            
            response = requests.get(
                self.channel['web_url'], 
                headers=self.headers, 
                timeout=15,
                allow_redirects=True
            )
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            message_divs = soup.find_all('div', class_='tgme_widget_message')
            
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(message_divs)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            posts = []
            for div in message_divs:
                post_data = self.parse_message_div(div)
                if post_data and self.filter_animal_post(post_data, animal_type):
                    posts.append(post_data)
                    
                if len(posts) >= limit:
                    break
            
            if posts:
                self.posts_cache = posts
                self.last_update = datetime.now()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ (—Å —Ñ–æ—Ç–æ: {sum(1 for p in posts if p['photo_url'])})")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤")
                
            return posts or self.get_mock_posts(animal_type)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_mock_posts(animal_type)
    
    def parse_message_div(self, div) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            # ID –ø–æ—Å—Ç–∞
            post_id = div.get('data-post', '').split('/')[-1] or str(int(time.time()))
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_div = div.find('div', class_='tgme_widget_message_text')
            if not text_div:
                return None
                
            text = text_div.get_text('\n', strip=True)
            if not text or len(text) < 10:
                return None
            
            # –î–∞—Ç–∞
            date_elem = div.find('time', datetime=True)
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    date_str = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    pass
            
            # –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ
            photo_url = None
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: —Ñ–æ—Ç–æ –≤ –æ–±–µ—Ä—Ç–∫–µ
            photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and photo_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –≤–∏–¥–µ–æ –ø—Ä–µ–≤—å—é
            if not photo_url:
                video_wrap = div.find('a', class_='tgme_widget_message_video_wrap')
                if video_wrap and video_wrap.get('style'):
                    match = re.search(r"background-image:url\('(.*?)'\)", video_wrap['style'])
                    if match:
                        photo_url = match.group(1)
            
            # –ü–æ–ø—ã—Ç–∫–∞ 3: –æ–±—ã—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not photo_url:
                img_tag = div.find('img')
                if img_tag and img_tag.get('src'):
                    photo_url = img_tag['src']
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            animal_type = self.detect_animal_type(text)
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'url': f"{self.channel['url']}/{post_id}",
                'title': self.extract_title(text, animal_type),
                'description': self.clean_description(text),
                'contact': self.extract_contact(text),
                'phone_numbers': self.extract_phone_numbers(text),
                'photo_url': photo_url,
                'has_photo': bool(photo_url),
                'type': animal_type
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def detect_animal_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        text_lower = text.lower()
        
        cat_keywords = [
            '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É', '–∫–∏—Å–∞', '–∫–∏—Å—è',
            '–∫–æ—Ç—è—Ç–∞', '–º–∞–º–∞-–∫–æ—à–∫–∞', '–±–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—à–∫–∞', '–∫–∞—Å—Ç—Ä–∏—Ä', '—Å—Ç–µ—Ä–∏–ª–∏–∑'
        ]
        
        dog_keywords = [
            '—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '—Å–æ–±–∞—á–∫', '—â–µ–Ω–æ–∫', '–ª–∞–π–∫', '–æ–≤—á–∞—Ä–∫',
            '–¥–æ–≥', '—Ç–µ—Ä—å–µ—Ä', '–±—É–ª—å–¥–æ–≥', '—Ö–∞—Å–∫–∏', '–ª–∞–±—Ä–∞–¥–æ—Ä', '–¥–≤–æ—Ä–Ω—è–∂–∫–∞'
        ]
        
        cat_score = sum(1 for keyword in cat_keywords if keyword in text_lower)
        dog_score = sum(1 for keyword in dog_keywords if keyword in text_lower)
        
        if cat_score > dog_score:
            return 'cats'
        elif dog_score > cat_score:
            return 'dogs'
        else:
            return 'cats'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—à–∫–∏
    
    def filter_animal_post(self, post: Dict, animal_type: str) -> bool:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ —Ç–∏–ø—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
        if animal_type == 'all':
            return True
        return post['type'] == animal_type
    
    def extract_title(self, text: str, animal_type: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        for line in lines[:3]:
            if len(line) > 15 and not line.startswith('http') and '@' not in line[:20]:
                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                title = re.sub(r'[üê±üê∂üè†‚ù§Ô∏èüíïüôè‚ú®üåü‚≠êÔ∏èüî•üí´üéØüì¢üì£‚ÄºÔ∏è‚ùóÔ∏è‚ö°Ô∏èüíØ]', '', line)
                title = re.sub(r'\s+', ' ', title).strip()
                
                if len(title) > 50:
                    title = title[:50] + "..."
                
                if title:
                    return title
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        emoji = 'üê±' if animal_type == 'cats' else 'üê∂'
        return f"{emoji} {'–ö–æ—à–∫–∞' if animal_type == 'cats' else '–°–æ–±–∞–∫–∞'} –∏—â–µ—Ç –¥–æ–º"
    
    def clean_description(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è (–æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–¥–µ–ª—å–Ω–æ)
        clean_text = re.sub(r'(\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10})', '', text)
        
        # –£–¥–∞–ª—è–µ–º username'—ã
        clean_text = re.sub(r'@\w+', '', clean_text)
        
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        clean_text = re.sub(r'https?://\S+', '', clean_text)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(clean_text) > 300:
            clean_text = clean_text[:300] + "..."
        
        return clean_text
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é)"""
        contacts = []
        
        # Username'—ã
        usernames = re.findall(r'@\w+', text)
        if usernames:
            contacts.extend(usernames[:2])
        
        # –ü—Ä–æ—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–Ω–µ –Ω–æ–º–µ—Ä–∞)
        if not contacts:
            contacts.append("–°–º. –≤ –∫–∞–Ω–∞–ª–µ")
        
        return ' ‚Ä¢ '.join(contacts)
    
    def extract_phone_numbers(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
        patterns = [
            r'\+?7[\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}',  # +7 9xx
            r'\+?8[\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}',  # 8 9xx  
            r'9\d{2}[\s\-]?[\d\s\-]{7,10}',               # 9xx
        ]
        
        phones = []
        for pattern in patterns:
            found = re.findall(pattern, text)
            for phone in found:
                # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_phone = re.sub(r'[\s\-\(\)]', '', phone)
                if len(clean_phone) >= 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
                    if clean_phone.startswith('8'):
                        clean_phone = '7' + clean_phone[1:]
                    elif not clean_phone.startswith('7'):
                        clean_phone = '7' + clean_phone
                    
                    phones.append(clean_phone)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        return list(set(phones))[:2]  # –ú–∞–∫—Å–∏–º—É–º 2 –Ω–æ–º–µ—Ä–∞
    
    def get_mock_posts(self, animal_type: str = 'cats') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã"""
        if animal_type == 'dogs':
            return [
                {
                    'id': '2001',
                    'title': 'üê∂ –©–µ–Ω–æ–∫ –∏—â–µ—Ç –¥–æ–º',
                    'description': '–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —â–µ–Ω–æ–∫, –≤–æ–∑—Ä–∞—Å—Ç –æ–∫–æ–ª–æ 3 –º–µ—Å—è—Ü–µ–≤.',
                    'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                    'url': f'{self.channel["url"]}/2001',
                    'contact': '–°–º. –≤ –∫–∞–Ω–∞–ª–µ',
                    'phone_numbers': ['79780001122'],
                    'photo_url': 'https://via.placeholder.com/600x400/4A90E2/FFFFFF?text=–©–µ–Ω–æ–∫',
                    'has_photo': True,
                    'type': 'dogs'
                }
            ]
        else:
            return [
                {
                    'id': '1001',
                    'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –∏—â–µ—Ç –¥–æ–º',
                    'description': '–ú–∏–ª—ã–π –∫–æ—Ç–µ–Ω–æ–∫, –æ—á–µ–Ω—å –ª–∞—Å–∫–æ–≤—ã–π –∏ –∏–≥—Ä–∏–≤—ã–π, –≤–æ–∑—Ä–∞—Å—Ç –æ–∫–æ–ª–æ 2 –º–µ—Å—è—Ü–µ–≤.',
                    'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                    'url': f'{self.channel["url"]}/1001',
                    'contact': '–°–º. –≤ –∫–∞–Ω–∞–ª–µ',
                    'phone_numbers': ['79780001111'],
                    'photo_url': 'https://via.placeholder.com/600x400/FF6B6B/FFFFFF?text=–ö–æ—Ç–µ–Ω–æ–∫',
                    'has_photo': True,
                    'type': 'cats'
                }
            ]
    
    def get_cached_posts(self, animal_type: str = 'all') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        if (not self.last_update or 
            (datetime.now() - self.last_update).seconds > 1800):
            try:
                return self.get_channel_posts(animal_type)
            except:
                pass
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        filtered_posts = [
            p for p in self.posts_cache 
            if animal_type == 'all' or p['type'] == animal_type
        ]
        
        return filtered_posts or self.get_mock_posts(animal_type)

class AnimalBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = ChannelParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    def format_phone_for_telegram(self, phone: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
        if len(phone) == 11 and phone.startswith('7'):
            return f"+{phone[0]} ({phone[1:4]}) {phone[4:7]}-{phone[7:9]}-{phone[9:11]}"
        return phone
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            phone_buttons = []
            phone_text = ""
            
            if post.get('phone_numbers'):
                for phone in post['phone_numbers']:
                    formatted_phone = self.format_phone_for_telegram(phone)
                    phone_text += f"üìû {formatted_phone}\n"
                    phone_buttons.append(
                        types.InlineKeyboardButton(
                            f"üìû {formatted_phone}", 
                            url=f"tel:+{phone}"
                        )
                    )
            
            # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            post_text = (
                f"{emoji} <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
            )
            
            if phone_text:
                post_text += f"\n{phone_text}"
            
            if post.get('contact') and post['contact'] != "–°–º. –≤ –∫–∞–Ω–∞–ª–µ":
                post_text += f"üí¨ {post['contact']}\n"
            
            post_text += f"\nüîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "...\n\nüîó <a href='{post['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –∫–∞–Ω–∞–ª–µ</a>"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
            for button in phone_buttons:
                keyboard.add(button)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–Ω–∞–ª–∞
            keyboard.add(
                types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", url=post['url'])
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    return
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\nüì¢ –ü–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª: {self.parser.channel['url']}"
            )

    def send_channel_posts(self, chat_id: int, animal_type: str = 'cats'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    f"üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª: {self.parser.channel['url']}"
                )
                return
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            animal_name = "–ö–û–®–ö–ò" if animal_type == 'cats' else "–°–û–ë–ê–ö–ò"
            emoji = 'üê±' if animal_type == 'cats' else 'üê∂'
            
            self.bot.send_message(
                chat_id,
                f"{emoji} <b>{animal_name} –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üì¢ –°–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞:\n"
                f"<a href='{self.parser.channel['url']}'>–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞</a>\n\n"
                f"üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
            for i, post in enumerate(posts):
                self.send_post(chat_id, post)
                if i < len(posts) - 1:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                    time.sleep(1)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(
                chat_id,
                f"üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å?</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å {'–∫–æ—à–∫—É' if animal_type == 'cats' else '—Å–æ–±–∞–∫—É'}:</b>\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏\n\n"
                f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {self.parser.channel['url']}\n\n"
                f"ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª:\n"
                f"{self.parser.channel['url']}"
            )

    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        return markup
    
    def get_adoption_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏")
        markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üîô –ù–∞–∑–∞–¥")
        return markup
    
    def get_sterilization_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üí∞ –ü–ª–∞—Ç–Ω–∞—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üêæ <b>–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞</b> - –ø–æ–º–æ—â—å –∂–∏–≤–æ—Ç–Ω—ã–º

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∫–æ—à–∫–∏ –∏ —Å–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º
üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
            self.bot.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
            
            self.parser.posts_cache = []
            self.parser.last_update = None
            posts = self.parser.get_channel_posts()
            
            self.bot.send_message(
                message.chat.id, 
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"üìÑ –ü–æ—Å—Ç–æ–≤: {len(posts)}\n"
                f"üñº –° —Ñ–æ—Ç–æ: {sum(1 for p in posts if p['photo_url'])}\n"
                f"üê± –ö–æ—à–µ–∫: {len([p for p in posts if p['type'] == 'cats'])}\n"
                f"üê∂ –°–æ–±–∞–∫: {len([p for p in posts if p['type'] == 'dogs'])}"
            )
        
        @self.bot.message_handler(func=lambda m: True)
        def message_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            text = message.text
            chat_id = message.chat.id
            
            try:
                if text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ":
                    self.bot.send_message(
                        chat_id,
                        "üè† <b>–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏—â—É—Ç –¥–æ–º</b>\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n"
                        "üê± <b>–ö–æ—à–∫–∏</b> - –∫–æ—Ç—è—Ç–∞ –∏ –≤–∑—Ä–æ—Å–ª—ã–µ –∫–æ—à–∫–∏\n"
                        "üê∂ <b>–°–æ–±–∞–∫–∏</b> - —â–µ–Ω–∫–∏ –∏ –≤–∑—Ä–æ—Å–ª—ã–µ —Å–æ–±–∞–∫–∏\n\n"
                        "üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b> - –∫–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å",
                        parse_mode="HTML",
                        reply_markup=self.get_adoption_keyboard()
                    )
                
                elif text in ["üê± –ö–æ—à–∫–∏", "üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º"]:
                    self.send_channel_posts(chat_id, 'cats')
                
                elif text in ["üê∂ –°–æ–±–∞–∫–∏", "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º"]:
                    self.send_channel_posts(chat_id, 'dogs')
                
                elif text == "üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
                    self.bot.send_message(
                        chat_id,
                        f"üìù <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n"
                        f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> <a href='{self.parser.channel['url']}'>–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞</a>\n\n"
                        f"‚úçÔ∏è <b>–°–ø–æ—Å–æ–±—ã –ø–æ–¥–∞—á–∏:</b>\n"
                        f"1Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–æ—Å—Ç–∞–º –∫–∞–Ω–∞–ª–∞\n"
                        f"2Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∫–∞–Ω–∞–ª–∞\n"
                        f"3Ô∏è‚É£ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º (—Å–º. —Ä–∞–∑–¥–µ–ª –ö–æ–Ω—Ç–∞–∫—Ç—ã)\n\n"
                        f"üìã <b>–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:</b>\n"
                        f"üîπ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n"
                        f"üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–∞–∑–º–µ—Ä\n"
                        f"üîπ –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n"
                        f"üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è\n"
                        f"üîπ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n"
                        f"üîπ –ì–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω",
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                
                elif text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è":
                    self.bot.send_message(
                        chat_id,
                        "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:\n\n"
                        "üí∞ <b>–ü–ª–∞—Ç–Ω–∞—è</b> - –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∫–ª–∏–Ω–∏–∫–∏\n"
                        "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è</b> - –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                        parse_mode="HTML",
                        reply_markup=self.get_sterilization_keyboard()
                    )
                
                elif text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è":
                    self.bot.send_message(
                        chat_id,
                        "üí∞ <b>–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>\n\n"
                        "üè• <b>–í–µ—Ç–∫–ª–∏–Ω–∏–∫–∏ –≤ –Ø–ª—Ç–µ:</b>\n"
                        "‚Ä¢ –ö–ª–∏–Ω–∏–∫–∞ 1: –æ—Ç 2500‚ÇΩ (–∫–æ—à–∫–∏), –æ—Ç 4000‚ÇΩ (—Å–æ–±–∞–∫–∏)\n"
                        "‚Ä¢ –ö–ª–∏–Ω–∏–∫–∞ 2: –æ—Ç 3000‚ÇΩ (–∫–æ—à–∫–∏), –æ—Ç 5000‚ÇΩ (—Å–æ–±–∞–∫–∏)\n\n"
                        "üåü <b>–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç:</b>\n"
                        "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è\n"
                        "‚úÖ –ù–∞—Ä–∫–æ–∑\n"
                        "‚úÖ –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ö–æ–¥\n"
                        "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞\n\n"
                        "üí° <b>–°–∫–∏–¥–∫–∏:</b>\n
