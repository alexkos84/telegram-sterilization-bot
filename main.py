import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AdvancedChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –Ø–ª—Ç–µ"""
    
    def __init__(self):
        self.channels = [
            {
                'username': 'cats_yalta',
                'url': 'https://t.me/cats_yalta',
                'type': 'cats',
                'title': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)'
            },
            {
                'username': 'cats_yalta_group',
                'url': 'https://t.me/cats_yalta_group',
                'type': 'cats',
                'title': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)'
            }
        ]
        self.posts_cache = []
        self.last_update = None
    
    def get_channel_posts(self, channel_type: str = 'all', limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            posts = []
            for channel in self.channels:
                if channel_type != 'all' and channel['type'] != channel_type:
                    continue
                    
                web_url = f'https://t.me/s/{channel["username"]}'
                logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å {web_url}")
                response = requests.get(web_url, headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }, timeout=15)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                message_divs = soup.find_all('div', class_='tgme_widget_message')
                
                for div in message_divs[:limit*2]:
                    post_data = self.parse_message_div(div, channel)
                    if post_data and self.is_animal_related(post_data.get('text', '')):
                        posts.append(post_data)
                        if len(posts) >= limit:
                            break
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            posts.sort(key=lambda x: x.get('timestamp', 0), reverse=True)
            
            if posts:
                self.posts_cache = posts[:limit]
                self.last_update = datetime.now()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ (—Å —Ñ–æ—Ç–æ: {sum(1 for p in posts if p['photo_url'])})")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤")
                
            return posts[:limit] or self.get_mock_posts(channel_type)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_mock_posts(channel_type)
    
    def parse_message_div(self, div, channel) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç, –∏–∑–≤–ª–µ–∫–∞—è —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            post_id = div.get('data-post', '').split('/')[-1] or 'unknown'
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            # –î–∞—Ç–∞
            timestamp = 0
            date_elem = div.find('time', datetime=True)
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    date_str = dt.strftime('%d.%m.%Y %H:%M')
                    timestamp = dt.timestamp()
                except:
                    pass
            
            # –§–æ—Ç–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–≤—å—é)
            photo_url = None
            photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and photo_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            # –í–∏–¥–µ–æ
            video_url = None
            video_wrap = div.find('div', class_='tgme_widget_message_video_wrap')
            if video_wrap and video_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", video_wrap['style'])
                if match:
                    video_url = match.group(1)
            
            if not text and not photo_url and not video_url:
                return None
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'timestamp': timestamp,
                'url': f"{channel['url']}/{post_id}" if post_id else channel['url'],
                'title': self.extract_title(text),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text),
                'photo_url': photo_url,
                'video_url': video_url,
                'has_media': bool(photo_url or video_url),
                'type': channel['type'],
                'channel': channel['title'],
                'channel_url': channel['url']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ div: {e}")
            return None
    
    def extract_title(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        lines = text.split('\n')
        for line in lines[:3]:
            line = line.strip()
            if line and len(line) > 5:
                title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                if len(title) > 50:
                    title = title[:50] + "..."
                return title or "–ö–æ—Ç–∏–∫ –∏—â–µ—Ç –¥–æ–º"
        return "–ö–æ—Ç–∏–∫ –∏—â–µ—Ç –¥–æ–º"
    
    def extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        clean_text = re.sub(r'@\w+|https?://\S+|\+?\d[\d\s\-\(\)]+', '', text)
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        if len(clean_text) > 200:
            return clean_text[:200] + "..."
        return clean_text or "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç–µ"
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        phone_pattern = r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}'
        phones = re.findall(phone_pattern, text)
        
        username_pattern = r'@\w+'
        usernames = re.findall(username_pattern, text)
        
        contacts = []
        if phones:
            contacts.extend(phones[:1])
        if usernames:
            contacts.extend(usernames[:1])
            
        return ' ‚Ä¢ '.join(contacts) if contacts else "–°–º. –≤ –≥—Ä—É–ø–ø–µ"
    
    def is_animal_related(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –∂–∏–≤–æ—Ç–Ω—ã–º"""
        animal_keywords = [
            '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É',
            '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º', '–ø–∏—Ç–æ–º–µ—Ü', '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏–≤–∫',
            '–ø–æ—Ç–µ—Ä—è–ª', '–Ω–∞—à–µ–ª', '–ø—Ä–æ–ø–∞–ª', '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è—à–∫–∞'
        ]
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in animal_keywords)
    
    def get_mock_posts(self, channel_type: str = 'cats') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ"""
        return [
            {
                'id': '1001',
                'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π.',
                'date': '03.08.2025 14:30',
                'timestamp': time.time(),
                'url': 'https://t.me/cats_yalta/1001',
                'contact': '@volunteer1 ‚Ä¢ +7 978 123-45-67',
                'photo_url': 'https://via.placeholder.com/600x400?text=–ö–æ—Ç–µ–Ω–æ–∫+–ú—É—Ä–∑–∏–∫',
                'video_url': None,
                'has_media': True,
                'type': 'cats',
                'channel': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞',
                'channel_url': 'https://t.me/cats_yalta'
            },
            {
                'id': '1002',
                'title': 'üê± –í–∑—Ä–æ—Å–ª—ã–π –∫–æ—Ç –ë–∞—Ä—Å–∏–∫',
                'description': '–ò—â–µ—Ç –¥–æ–º –≤–∑—Ä–æ—Å–ª—ã–π –∫–æ—Ç, 3 –≥–æ–¥–∞, –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–∏—É—á–µ–Ω –∫ –ª–æ—Ç–∫—É.',
                'date': '02.08.2025 11:20',
                'timestamp': time.time() - 3600,
                'url': 'https://t.me/cats_yalta_group/1002',
                'contact': '+7 978 765-43-21',
                'photo_url': 'https://via.placeholder.com/600x400?text=–ö–æ—Ç+–ë–∞—Ä—Å–∏–∫',
                'video_url': None,
                'has_media': True,
                'type': 'cats',
                'channel': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)',
                'channel_url': 'https://t.me/cats_yalta_group'
            }
        ]
    
    def get_cached_posts(self, channel_type: str = 'all') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        if (not self.last_update or 
            (datetime.now() - self.last_update).seconds > 3600):  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            try:
                return self.get_channel_posts(channel_type)
            except:
                pass
        return [p for p in self.posts_cache if channel_type == 'all' or p['type'] == channel_type] or self.get_mock_posts(channel_type)

class CatBotWithPhotos:
    """–ë–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∫–æ—à–∫–∞–º –Ø–ª—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AdvancedChannelParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ JSON
        self.contacts = self.load_contacts()
        
        self.setup_handlers()
        self.setup_routes()
    
    def load_contacts(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open('assets/contacts.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ contacts.json: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            return {
                "–∫–ª–∏–Ω–∏–∫–∞ –¥–æ–≤–µ—Ä–∏–µ": "üìû –ö–ª–∏–Ω–∏–∫–∞ '–î–æ–≤–µ—Ä–∏–µ': +7 978 111-22-33\nüìç –ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞, 10\nüïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 9:00-21:00",
                "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä": "üìû –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å:\nüîπ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: +7 978 222-33-44\nüîπ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: +7 978 333-44-55",
                "–≤–æ–ª–æ–Ω—Ç–µ—Ä—ã": "üìû –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: +7 978 444-55-66\nüì± Telegram: @cats_yalta_help",
                "—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è": "üìû –ó–∞–ø–∏—Å—å –Ω–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—é:\nüîπ –ü–ª–∞—Ç–Ω–∞—è: +7 978 555-66-77\nüîπ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è: +7 978 666-77-88"
            }
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            post_text = (
                f"{emoji} <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üì¢ <a href='{post['channel_url']}'>{post['channel']}</a>\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç</a>"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            if post.get('video_url'):
                try:
                    self.bot.send_video(
                        chat_id,
                        post['video_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_channel_posts(self, chat_id: int, animal_type: str = 'cats'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã —Å –º–µ–¥–∏–∞"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    "üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—ã:\n"
                    f"‚Ä¢ {self.parser.channels[0]['url']}\n"
                    f"‚Ä¢ {self.parser.channels[1]['url']}"
                )
                return
            
            self.bot.send_message(
                chat_id,
                f"üê± <b>–ö–û–¢–ò–ö–ò –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø –Ø–ª—Ç—ã:",
                parse_mode="HTML"
            )
            
            for post in posts:
                self.send_post(chat_id, post)
                time.sleep(0.7)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
            
            self.bot.send_message(
                chat_id,
                "üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å?</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å –∫–æ—Ç–∏–∫–∞:</b>\n–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üì¢ <b>–ì—Ä—É–ø–ø—ã:</b>\n"
                f"‚Ä¢ <a href='{self.parser.channels[0]['url']}'>–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)</a>\n"
                f"‚Ä¢ <a href='{self.parser.channels[1]['url']}'>–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)</a>\n\n"
                "ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≥—Ä—É–ø–ø—ã:\n"
                f"‚Ä¢ {self.parser.channels[0]['url']}\n"
                f"‚Ä¢ {self.parser.channels[1]['url']}"
            )

    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        markup.add("üê± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã")
        return markup
    
    def get_adoption_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º")
        markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup
    
    def get_sterilization_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup

    def load_html_file(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ assets"""
        try:
            with open(f'assets/{filename}', 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML: {e}")
            return f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ({filename})"

    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç—ã"!</b>

üêæ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–æ—à–∫–∞–º –Ø–ª—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∫–æ—Ç–∏–∫–∏ –∏—â—É—Ç –¥–æ–º
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
üê± <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã</b> - —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
            if message.from_user.id not in [123456789]:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
                return
                
            self.parser.posts_cache = []
            self.parser.last_update = None
            self.bot.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—è—é –ø–æ—Å—Ç—ã...")
            posts = self.parser.get_channel_posts()
            self.bot.send_message(
                message.chat.id, 
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {len(posts)} –ø–æ—Å—Ç–æ–≤ (—Å –º–µ–¥–∏–∞: {sum(1 for p in posts if p['has_media'])})"
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def sterilization_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            try:
                with open('assets/images/sterilization.jpg', 'rb') as photo:
                    self.bot.send_photo(
                        message.chat.id,
                        photo,
                        caption="üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                        parse_mode="HTML",
                        reply_markup=self.get_sterilization_keyboard()
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                self.bot.send_message(
                    message.chat.id,
                    "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                    parse_mode="HTML",
                    reply_markup=self.get_sterilization_keyboard()
                )
        
        @self.bot.message_handler(func=lambda m: m.text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def paid_sterilization_handler(message):
            self.bot.send_message(
                message.chat.id,
                self.load_html_file('paid_text.html'),
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def free_sterilization_handler(message):
            self.bot.send_message(
                message.chat.id,
                self.load_html_file('free_text.html'),
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üê± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã")
        def recent_posts_handler(message):
            self.send_channel_posts(message.chat.id)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ @CatYalta_bot –≤ –≥—Ä—É–ø–ø–µ
        @self.bot.message_handler(func=lambda m: m.chat.type in ['group', 'supergroup'] and 
                                          m.text and 
                                          '@CatYalta_bot' in m.text)
        def group_request_handler(message):
            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –±—ã–ª–æ –≤–∏–¥–Ω–æ –≤ –≥—Ä—É–ø–ø–µ
                self.bot.delete_message(message.chat.id, message.message_id)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                request_text = message.text.replace('@CatYalta_bot', '').strip().lower()
                
                # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
                response = None
                for key, value in self.contacts.items():
                    if key in request_text:
                        response = value
                        break
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–∫—É
                if response:
                    try:
                        self.bot.send_message(
                            message.from_user.id,
                            f"üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{request_text}':\n\n{response}",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
                        self.bot.send_message(
                            message.chat.id,
                            f"@{message.from_user.username}, —è –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. " +
                            "–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.",
                            reply_to_message_id=message.message_id
                        )
                else:
                    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
                    self.bot.send_message(
                        message.from_user.id,
                        "üîç –Ø –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n" +
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n" +
                        "\n".join([f"‚Ä¢ {key}" for key in self.contacts.keys()]),
                        parse_mode="HTML"
                    )
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        @self.bot.message_handler(func=lambda m: True)
        def message_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            text = message.text
            chat_id = message.chat.id
            
            try:
                if text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ":
                    info_text = """üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—Ç–∏–∫–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üê± <b>–ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø

üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>
–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
                    
                    self.bot.send_message(
                        chat_id, 
                        info_text, 
                        parse_mode="HTML",
                        reply_markup=self.get_adoption_keyboard()
                    )
                
                elif text == "üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º":
                    self.send_channel_posts(chat_id)
                
                elif text == "üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
                    info_text = f"""üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>

üì¢ <b>–ì—Ä—É–ø–ø—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>
‚Ä¢ <a href="{self.parser.channels[0]['url']}">–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)</a>
‚Ä¢ <a href="{self.parser.channels[1]['url']}">–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)</a>

‚úçÔ∏è <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å:</b>
1Ô∏è‚É£ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É
2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
3Ô∏è‚É£ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º: +7 978 000-00-01

üìã <b>–ù—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üîπ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –æ–∫—Ä–∞—Å
üîπ –•–∞—Ä–∞–∫—Ç–µ—Ä
üîπ –ó–¥–æ—Ä–æ–≤—å–µ (–ø—Ä–∏–≤–∏–≤–∫–∏, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è)
üîπ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
                    
                    self.bot.send_message(chat_id, info_text, parse_mode="HTML")
                
                elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                    contacts_text = """üìû <b>–ö–û–ù–¢–ê–ö–¢–´</b>

üë• <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã:</b>
üîπ –ü–æ –∫–æ—à–∫–∞–º: +7 978 144-90-70
üîπ –ü–æ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏: +7 978 000-00-02
üîπ –õ–µ—á–µ–Ω–∏–µ: +7 978 000-00-03

üè• <b>–ö–ª–∏–Ω–∏–∫–∏:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-04
üîπ "–í–µ—Ç–ú–∏—Ä": +7 978 000-00-05

üì± <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
üîπ Telegram: @cats_yalta
üîπ Instagram: @yalta_cats"""
                    
                    self.bot.send_message(chat_id, contacts_text, parse_mode="HTML")
                
                elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
                    about_text = """‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï "–ö–û–¢–ò–ö–ò –Ø–õ–¢–´"</b>

üéØ <b>–ú–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∫–æ—à–∫–∞–º –Ø–ª—Ç—ã

üìä <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 500+ –∫–æ—à–µ–∫
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ: 300+ –∫–æ—Ç—è—Ç
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 30+ –∞–∫—Ç–∏–≤–Ω—ã—Ö

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å:</b>
–ö–∞—Ä—Ç–∞: 2202 2020 0000 0000

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ü–∏—à–∏—Ç–µ @cats_yalta_coordinator"""
                    
                    self.bot.send_message(chat_id, about_text, parse_mode="HTML")
                
                elif text == "üîô –ù–∞–∑–∞–¥":
                    self.bot.send_message(
                        chat_id, 
                        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                        reply_markup=self.get_main_keyboard()
                    )
                
                else:
                    self.bot.send_message(
                        chat_id,
                        "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        reply_markup=self.get_main_keyboard()
                    )
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                self.bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    
    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            return jsonify({
                "status": "ü§ñ Cat Bot Running",
                "time": datetime.now().strftime('%H:%M:%S'),
                "users": len(self.stats["users"]),
                "messages": self.stats["messages"],
                "channels": [c['url'] for c in self.parser.channels],
                "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None
            })
        
        @self.app.route('/posts')
        def posts_api():
            try:
                posts = self.parser.get_cached_posts()
                return jsonify({
                    "status": "ok",
                    "count": len(posts),
                    "posts": [{
                        "title": p["title"],
                        "url": p["url"],
                        "date": p["date"],
                        "channel": p["channel"]
                    } for p in posts],
                    "channels": [c['url'] for c in self.parser.channels]
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
    
    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ CatBot –¥–ª—è –Ø–ª—Ç—ã...")
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤
        try:
            posts = self.parser.get_cached_posts()
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        if self.setup_webhook():
            self.app.run(host='0.0.0.0', port=self.port)
        else:
            logger.error("üö® –û—à–∏–±–∫–∞ webhook, –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
            self.bot.polling()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs('assets/images', exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏
    if not os.path.exists('assets/free_text.html'):
        with open('assets/free_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üêæ –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø –ö–û–®–ï–ö</b>

üè• <b>–ü—Ä–æ–≥—Ä–∞–º–º—ã:</b>
üîπ –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ø–ª—Ç—ã
üîπ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã

üìã <b>–£—Å–ª–æ–≤–∏—è:</b>
‚úÖ –ë–µ–∑–¥–æ–º–Ω—ã–µ –∫–æ—à–∫–∏
‚úÖ –ö–æ—à–∫–∏ –∏–∑ –º–∞–ª–æ–∏–º—É—â–∏—Ö —Å–µ–º–µ–π
‚úÖ –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
üîπ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: +7 978 144-90-70
üîπ –ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-11

üìç <b>–ê–¥—Ä–µ—Å–∞:</b>
—É–ª. –ö–∏—Ä–æ–≤–∞, 15 (–ø–Ω-–ø—Ç 9:00-18:00)""")

    if not os.path.exists('assets/paid_text.html'):
        with open('assets/paid_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üíµ –ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø –ö–û–®–ï–ö</b>

üè• <b>–ö–ª–∏–Ω–∏–∫–∏:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç": –æ—Ç 3000‚ÇΩ
üîπ "–í–µ—Ç–ú–∏—Ä": –æ—Ç 2500‚ÇΩ

üåü <b>–í–∫–ª—é—á–µ–Ω–æ:</b>
‚úîÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è
‚úîÔ∏è –ù–∞—Ä–∫–æ–∑
‚úîÔ∏è –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ö–æ–¥
‚úîÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è

üìû <b>–ó–∞–ø–∏—Å—å:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-12
üîπ "–í–µ—Ç–ú–∏—Ä": +7 978 000-00-13

üí° <b>–°–∫–∏–¥–∫–∏:</b>
üî∏ –í–æ–ª–æ–Ω—Ç–µ—Ä–∞–º - 20%
üî∏ –ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–º –∫–æ—à–∫–∞–º - 15%""")

    # –°–æ–∑–¥–∞–µ–º contacts.json, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists('assets/contacts.json'):
        with open('assets/contacts.json', 'w', encoding='utf-8') as f:
            json.dump({
                "–∫–ª–∏–Ω–∏–∫–∞ –¥–æ–≤–µ—Ä–∏–µ": "üìû –ö–ª–∏–Ω–∏–∫–∞ '–î–æ–≤–µ—Ä–∏–µ': +7 978 111-22-33\nüìç –ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞, 10\nüïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 9:00-21:00",
                "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä": "üìû –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å:\nüîπ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: +7 978 222-33-44\nüîπ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: +7 978 333-44-55",
                "–≤–æ–ª–æ–Ω—Ç–µ—Ä—ã": "üìû –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: +7 978 444-55-66\nüì± Telegram: @cats_yalta_help",
                "—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è": "üìû –ó–∞–ø–∏—Å—å –Ω–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—é:\nüîπ –ü–ª–∞—Ç–Ω–∞—è: +7 978 555-66-77\nüîπ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è: +7 978 666-77-88"
            }, f, ensure_ascii=False, indent=2)

    # –°–æ–∑–¥–∞–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists('assets/images/sterilization.jpg'):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pass

    bot = CatBotWithPhotos()
    bot.run()
