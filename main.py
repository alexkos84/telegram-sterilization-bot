import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
import random
from urllib.parse import quote_plus
import cloudscraper
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AnimalNewsParser:
    """–ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –º–µ–¥–∏–∞"""
    
    def __init__(self):
        self.channels = [
            {
                'username': 'yalta_podslushano',
                'url': 'https://t.me/yalta_podslushano',
                'name': '–Ø–ª—Ç–∞ –ü–æ–¥—Å–ª—É—à–∞–Ω–æ'
            },
            {
                'username': 'vet_yalta',
                'url': 'https://t.me/vet_yalta',
                'name': '–í–µ—Ç–Ø–ª—Ç–∞'
            },
            {
                'username': 'yaltaya',
                'url': 'https://t.me/yaltaya',
                'name': '–Ø–ª—Ç–∞—è'
            }
        ]
        
        self.animal_keywords = [
            '–∫–æ—à–∫', '–∫–æ—Ç', '–∫–æ—Ç—ë–Ω', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç—ç', '–∫–æ—Ç–µ–π–∫', '–∫–∏—Å', '–∫–∏—Å-–∫–∏—Å',
            '—Å–æ–±–∞', '–ø—ë—Å', '–ø–µ—Å', '—â–µ–Ω', '—Å–æ–±–∞–∫', '–ø—Å–∏–Ω', '—Ö–≤–æ—Å—Ç', '–ª–∞–ø',
            '–∂–∏–≤–æ—Ç–Ω', '–ø–∏—Ç–æ–º', '–∑–≤–µ—Ä', '–∑–≤–µ—Ä—é—à–∫', '–∑–≤–µ—Ä—ë–∫', '–ø–∏—Ç–æ–º–µ—Ü',
            '–ø—Ä–∏—Å—Ç—Ä', '–ø–æ—Ç–µ—Ä—è–ª', '–Ω–∞—à–µ–ª', '–Ω–∞–π–¥—ë–Ω', '–Ω–∞–π–¥–µ–Ω', '–ø—Ä–æ–ø–∞–ª', '–ø—Ä–æ–ø–∞–¥–∞',
            '–ø—Ä–∏—é—Ç', '–ø–µ—Ä–µ–¥–µ—Ä–∂', '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–∫–æ—Ä–º', '—Å—Ç–µ—Ä–∏–ª–∏–∑', '–∫–∞—Å—Ç—Ä–∞—Ü'
        ]
        
        self.posts_cache = []
        self.last_update = None
        self.last_attempt = None
        self.failure_count = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CloudScraper
        try:
            self.scraper = cloudscraper.create_scraper(
                browser={
                    'browser': 'chrome',
                    'platform': 'windows',
                    'mobile': False
                }
            )
        except:
            self.scraper = requests.Session()
            logger.warning("‚ö†Ô∏è CloudScraper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π requests")
        
        # User-Agents –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
        ]
    
    def extract_media(self, div) -> Optional[Dict]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)"""
        try:
            # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Ç–µ–≥ img
            img = div.select_one('.tgme_widget_message_photo img[src]')
            if img and img['src'].startswith('http'):
                return {'type': 'photo', 'url': img['src']}
            
            # 2. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ background-image
            photo_wrap = div.select_one('.tgme_widget_message_photo_wrap[style*="background-image"]')
            if photo_wrap:
                style = photo_wrap.get('style', '')
                match = re.search(r"url\('([^']+)'\)", style)
                if match and match.group(1).startswith('http'):
                    return {'type': 'photo', 'url': match.group(1)}
            
            # 3. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ
            video = div.select_one('video.tgme_widget_message_video[src]')
            if video and video['src'].startswith('http'):
                return {'type': 'video', 'url': video['src']}
            
            # 4. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (–≥–∏—Ñ–∫–∏ –∏ –¥—Ä.)
            doc = div.select_one('a.tgme_widget_message_document[href]')
            if doc and doc['href'].startswith('http'):
                return {'type': 'document', 'url': doc['href']}
            
            # 5. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ç–æ (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
            photo_div = div.select_one('.tgme_widget_message_photo')
            if photo_div:
                img = photo_div.select_one('img[src]')
                if img and img['src'].startswith('http'):
                    return {'type': 'photo', 'url': img['src']}
                
                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ data-src
                img = photo_div.select_one('img[data-src]')
                if img and img['data-src'].startswith('http'):
                    return {'type': 'photo', 'url': img['data-src']}
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {str(e)}")
            return None
    
    def parse_message_div(self, div, channel: Dict) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞"""
        try:
            # ID –ø–æ—Å—Ç–∞
            post_id = div.get('data-post', '') or f"msg_{hash(str(div)[:100]) % 10000}"
            if '/' in str(post_id):
                post_id = str(post_id).split('/')[-1]
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_elem = div.select_one('.tgme_widget_message_text')
            if not text_elem:
                return None
                
            text = '\n'.join([p.get_text(strip=True) for p in text_elem.find_all(['p', 'br']) if p.get_text(strip=True)])
            if not text:
                text = text_elem.get_text(separator='\n', strip=True)
            
            text = self.clean_text(text)
            if len(text) < 10:
                return None
            
            # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            date_elem = div.select_one('.tgme_widget_message_date time')
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            timestamp = 0
            
            if date_elem:
                datetime_attr = date_elem.get('datetime')
                if datetime_attr:
                    try:
                        dt = datetime.fromisoformat(datetime_attr.replace('Z', '+00:00'))
                        date_str = dt.strftime('%d.%m.%Y %H:%M')
                        timestamp = dt.timestamp()
                    except:
                        date_str = date_elem.get_text(strip=True)
            
            # –ú–µ–¥–∏–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ)
            media = self.extract_media(div)
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'timestamp': timestamp,
                'url': f"{channel['url']}/{post_id}",
                'channel_name': channel['name'],
                'channel_url': channel['url'],
                'media': media,
                'has_media': bool(media),
                'source': 'parsed'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {channel['name']}: {str(e)}")
            return None

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

class AnimalNewsBot:
    """–ë–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–¥–∏–∞"""
    
    def send_animal_post(self, chat_id: int, post: Dict):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —Å –º–µ–¥–∏–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
            post_text = (
                f"üêæ <b>{post['channel_name']}</b>\n\n"
                f"{post['text']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>"
            )
            
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(post_text) > 4000:
                lines = post_text.split('\n')
                truncated = []
                length = 0
                for line in lines:
                    if length + len(line) < 3800:
                        truncated.append(line)
                        length += len(line) + 1
                    else:
                        break
                post_text = '\n'.join(truncated) + "...\n\nüîó –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ –≤ –∫–∞–Ω–∞–ª–µ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if post.get('has_media'):
                media = post['media']
                try:
                    if media['type'] == 'photo':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Ñ–æ—Ç–æ
                        if not media['url'].startswith('http'):
                            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ñ–æ—Ç–æ")
                            
                        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                        test_response = requests.head(media['url'], timeout=5)
                        if test_response.status_code != 200:
                            raise ValueError("–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                            
                        self.bot.send_photo(
                            chat_id,
                            media['url'],
                            caption=post_text,
                            parse_mode="HTML",
                            reply_markup=self.get_post_markup(post['url'])
                        )
                        return
                    
                    elif media['type'] == 'video':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –≤–∏–¥–µ–æ
                        if not media['url'].startswith('http'):
                            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π URL –≤–∏–¥–µ–æ")
                            
                        self.bot.send_video(
                            chat_id,
                            media['url'],
                            caption=post_text,
                            parse_mode="HTML",
                            reply_markup=self.get_post_markup(post['url'])
                        )
                        return
                    
                    elif media['type'] == 'document':
                        # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                        post_text += f"\n\nüìé –í–ª–æ–∂–µ–Ω–∏–µ: {media['url']}"
                        
                except Exception as media_error:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {media_error}. –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç.")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=self.get_post_markup(post['url'])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä—è–º–æ –≤ –∫–∞–Ω–∞–ª–µ:\n{post['url']}"
            )

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == "__main__":
    print("""
üîß –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
pip install telebot flask requests beautifulsoup4 cloudscraper lxml

üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...
""")
    
    try:
        bot = AnimalNewsBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        print("\n‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ Telegram API")
        print("\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...")
        time.sleep(5)
