import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
import random
from urllib.parse import quote_plus
import cloudscraper
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AnimalPostsParser:
    """–ü–∞—Ä—Å–µ—Ä –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ø–ª—Ç–∞ –ü–æ–¥—Å–ª—É—à–∞–Ω–æ"""
    
    def __init__(self):
        self.channel = {
            'username': 'yalta_podslushano',
            'url': 'https://t.me/yalta_podslushano',
            'name': '–Ø–ª—Ç–∞ –ü–æ–¥—Å–ª—É—à–∞–Ω–æ'
        }
        self.animal_keywords = [
            '–∫–æ—à–∫–∞', '–∫–æ—Ç', '–∫–æ—Ç—ë–Ω–æ–∫', '–∫–æ—Ç–µ–Ω–æ–∫', '–∫–æ—à–µ—á–∫–∞', '–∫–æ—Ç—ç',
            '—Å–æ–±–∞–∫–∞', '–ø—ë—Å', '–ø–µ—Å', '—â–µ–Ω–æ–∫', '—â–µ–Ω–∫–∏', '—Å–æ–±–∞—á–∫–∞',
            '–∂–∏–≤–æ—Ç–Ω–æ–µ', '–ø–∏—Ç–æ–º–µ—Ü', '–∑–≤–µ—Ä—å', '–∑–≤–µ—Ä—ë–∫', '–∑–≤–µ—Ä—é—à–∫–∞',
            '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–ø–æ—Ç–µ—Ä—è–ª', '–Ω–∞—à–µ–ª', '–Ω–∞–π–¥—ë–Ω', '–ø—Ä–æ–ø–∞–ª', '–ø—Ä–æ–ø–∞–ª–∞',
            '–ø—Ä–∏—é—Ç–∏—Ç—å', '–ø–µ—Ä–µ–¥–µ—Ä–∂–∫–∞', '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–∫–æ—Ä–º', '—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è',
            '–∫–∞—Å—Ç—Ä–∞—Ü–∏—è', '–ª–∞–ø–∞', '—Ö–≤–æ—Å—Ç', '—É—Å—ã', '–º—è—É', '–≥–∞–≤', '–º—É—Ä'
        ]
        self.posts_cache = []
        self.last_update = None
        self.last_attempt = None
        self.failure_count = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CloudScraper
        try:
            self.scraper = cloudscraper.create_scraper(
                browser={
                    'browser': 'chrome',
                    'platform': 'windows',
                    'mobile': False
                }
            )
        except:
            self.scraper = requests.Session()
            logger.warning("‚ö†Ô∏è CloudScraper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π requests")
        
        # User-Agents –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
        ]
    
    def is_animal_post(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –∂–∏–≤–æ—Ç–Ω—ã–º"""
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in self.animal_keywords)
    
    def clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        cleaned = html.unescape(text)
        cleaned = re.sub(r'\n{3,}', '\n\n', cleaned)
        symbol_replacements = {
            '‚ûø': 'üåÄ',
            'Ô∏è': '',
            '‚ÄØ': ' ',
        }
        for old, new in symbol_replacements.items():
            cleaned = cleaned.replace(old, new)
        return cleaned.strip()
    
    def get_animal_posts(self, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        self.last_attempt = datetime.now()
        
        try:
            url = f'https://t.me/s/{self.channel["username"]}'
            logger.info(f"üåê –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {url}")
            
            headers = {
                'User-Agent': random.choice(self.user_agents),
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            }
            
            response = self.scraper.get(url, headers=headers, timeout=20)
            
            if response.status_code == 200:
                posts = self.parse_html_content(response.text, limit)
                if posts:
                    self.posts_cache = posts
                    self.last_update = datetime.now()
                    self.failure_count = 0
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö")
                    return posts
            else:
                logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
            self.failure_count += 1
        
        return self.posts_cache if self.posts_cache else []
    
    def parse_html_content(self, html_content: str, limit: int) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ HTML –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
            
            if "Cloudflare" in html_content or "checking your browser" in html_content.lower():
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ Cloudflare")
                return []
            
            messages = soup.select('div.tgme_widget_message_wrap')
            if not messages:
                logger.warning("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
                return []
            
            animal_posts = []
            for msg_div in messages:
                post = self.parse_message_div(msg_div)
                if post and self.is_animal_post(post['text']):
                    animal_posts.append(post)
                    if len(animal_posts) >= limit:
                        break
            
            return animal_posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {str(e)}")
            return []
    
    def parse_message_div(self, div) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # ID –ø–æ—Å—Ç–∞
            post_id = div.get('data-post', '') or f"msg_{hash(str(div)[:100]) % 10000}"
            if '/' in str(post_id):
                post_id = str(post_id).split('/')[-1]
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_elem = div.select_one('.tgme_widget_message_text')
            if not text_elem:
                return None
                
            text = '\n'.join([p.get_text(strip=True) for p in text_elem.find_all(['p', 'br']) if p.get_text(strip=True)])
            if not text:
                text = text_elem.get_text(separator='\n', strip=True)
            
            text = self.clean_text(text)
            if len(text) < 20:
                return None
            
            # –î–∞—Ç–∞
            date_elem = div.select_one('.tgme_widget_message_date time')
            date_str = date_elem.get('datetime', '–ù–µ–¥–∞–≤–Ω–æ') if date_elem else "–ù–µ–¥–∞–≤–Ω–æ"
            
            # –ú–µ–¥–∏–∞
            media = self.extract_media(div)
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'url': f"{self.channel['url']}/{post_id}",
                'media': media,
                'has_media': bool(media),
                'source': 'parsed'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None
    
    def extract_media(self, div):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ)"""
        # –§–æ—Ç–æ
        photo_elem = div.select_one('.tgme_widget_message_photo')
        if photo_elem:
            img_elem = photo_elem.select_one('img[src]')
            if img_elem:
                return {'type': 'photo', 'url': img_elem.get('src')}
            
            style = photo_elem.get('style', '')
            match = re.search(r"background-image:url\('([^']+)'\)", style)
            if match:
                return {'type': 'photo', 'url': match.group(1)}
        
        # –í–∏–¥–µ–æ
        video_elem = div.select_one('video.tgme_widget_message_video')
        if video_elem:
            video_src = video_elem.get('src')
            if video_src:
                return {'type': 'video', 'url': video_src}
        
        return None
    
    def get_cached_animal_posts(self, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        should_update = (
            not self.last_update or 
            (datetime.now() - self.last_update).seconds > 3600 or
            not self.posts_cache
        )
        
        if should_update:
            return self.get_animal_posts(limit)
        
        return self.posts_cache[:limit]

class AnimalPostsBot:
    """–ë–æ—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AnimalPostsParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_animal_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            post_text = (
                f"üêæ <b>–ü–æ—Å—Ç –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b> üêæ\n\n"
                f"{post['text']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>"
            )
            
            if len(post_text) > 4000:
                lines = post_text.split('\n')
                truncated = []
                length = 0
                for line in lines:
                    if length + len(line) < 3800:
                        truncated.append(line)
                        length += len(line) + 1
                    else:
                        break
                post_text = '\n'.join(truncated) + "...\n\nüîó –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ –≤ –∫–∞–Ω–∞–ª–µ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if post.get('has_media'):
                media = post['media']
                try:
                    if media['type'] == 'photo':
                        self.bot.send_photo(
                            chat_id,
                            media['url'],
                            caption=post_text,
                            parse_mode="HTML",
                            reply_markup=self.get_post_markup(post['url'])
                        )
                        return
                    elif media['type'] == 'video':
                        self.bot.send_video(
                            chat_id,
                            media['url'],
                            caption=post_text,
                            parse_mode="HTML",
                            reply_markup=self.get_post_markup(post['url'])
                        )
                        return
                except Exception as media_error:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {media_error}")
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=self.get_post_markup(post['url'])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä—è–º–æ –≤ –∫–∞–Ω–∞–ª–µ:\n{post['url']}"
            )
    
    def get_post_markup(self, url: str):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", url=url))
        return markup
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üêæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        markup.add("‚ÑπÔ∏è –û –±–æ—Ç–µ")
        return markup
    
    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        
        @self.bot.message_handler(commands=['start', 'help'])
        def start_handler(message):
            welcome_text = (
                "üêæ <b>–ë–æ—Ç –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –Ø–ª—Ç–∞ –ü–æ–¥—Å–ª—É—à–∞–Ω–æ</b>\n\n"
                "–Ø —Å–æ–±–∏—Ä–∞—é –ø–æ—Å—Ç—ã –æ –∫–æ—à–∫–∞—Ö, —Å–æ–±–∞–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö "
                "–∏–∑ –∫–∞–Ω–∞–ª–∞ –Ø–ª—Ç–∞ –ü–æ–¥—Å–ª—É—à–∞–Ω–æ.\n\n"
                "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/posts - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
                "/update - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
                "/channel - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
                "üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ"
            )
            
            self.bot.send_message(
                message.chat.id,
                welcome_text,
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['posts'])
        def posts_handler(message):
            self.bot.send_chat_action(message.chat.id, 'typing')
            posts = self.parser.get_cached_animal_posts(5)
            
            if not posts:
                self.bot.send_message(
                    message.chat.id,
                    "üòï –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.get_main_keyboard()
                )
                return
            
            self.bot.send_message(
                message.chat.id,
                f"üêæ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(posts)} –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>",
                parse_mode="HTML"
            )
            
            for post in posts:
                self.send_animal_post(message.chat.id, post)
                time.sleep(0.3)
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            self.bot.send_chat_action(message.chat.id, 'typing')
            self.bot.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            posts = self.parser.get_animal_posts(5)
            
            if posts:
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö.\n"
                    f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}",
                    reply_markup=self.get_main_keyboard()
                )
                self.posts_handler(message)
            else:
                self.bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.get_main_keyboard()
                )
        
        @self.bot.message_handler(commands=['channel'])
        def channel_handler(message):
            self.bot.send_message(
                message.chat.id,
                f"üì¢ <b>{self.parser.channel['name']}</b>\n\n"
                f"üîó {self.parser.channel['url']}",
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", 
                        url=self.parser.channel['url']
                    )
                )
            )
        
        @self.bot.message_handler(func=lambda m: m.text in ["üêæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã", "–ø–æ—Å—Ç—ã"])
        def posts_button_handler(message):
            posts_handler(message)
        
        @self.bot.message_handler(func=lambda m: m.text in ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "–æ–±–Ω–æ–≤–∏—Ç—å"])
        def update_button_handler(message):
            update_handler(message)
        
        @self.bot.message_handler(func=lambda m: m.text in ["‚ÑπÔ∏è –û –±–æ—Ç–µ", "–æ –±–æ—Ç–µ"])
        def about_button_handler(message):
            self.bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ—Å—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ø–ª—Ç–∞ –ü–æ–¥—Å–ª—É—à–∞–Ω–æ.\n"
                "–Ø —É–º–µ—é –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ—à–∫–∞—Ö, —Å–æ–±–∞–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö, "
                "–∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –ø–æ–º–æ—â–∏, –∏—â—É—Ç –¥–æ–º –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ @–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç",
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: True)
        def default_handler(message):
            self.bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n\n"
                "üêæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
                "‚ÑπÔ∏è –û –±–æ—Ç–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
                reply_markup=self.get_main_keyboard()
            )
    
    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            if request.headers.get('content-type') == 'application/json':
                json_string = request.get_data().decode('utf-8')
                update = telebot.types.Update.de_json(json_string)
                self.bot.process_new_updates([update])
                return '', 200
            return 'Bad request', 400
        
        @self.app.route('/')
        def home():
            return jsonify({
                "status": "Animal Posts Bot",
                "channel": self.parser.channel['url'],
                "animal_posts_cached": len(self.parser.posts_cache),
                "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None,
                "version": "1.0"
            })

    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(1)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {str(e)}")
            return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö...")
        
        try:
            import cloudscraper
            logger.info("‚úÖ CloudScraper –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            logger.warning("‚ö†Ô∏è CloudScraper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        
        try:
            posts = self.parser.get_cached_animal_posts()
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        
        try:
            if self.setup_webhook():
                logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ")
                self.app.run(host='0.0.0.0', port=self.port)
            else:
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
                self.bot.polling(none_stop=True, interval=1, timeout=20)
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
            time.sleep(5)
            self.run()

if __name__ == "__main__":
    print("""
üîß –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
pip install telebot flask requests beautifulsoup4 cloudscraper lxml

üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...
""")
    
    try:
        bot = AnimalPostsBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        print("\n‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ Telegram API")
        print("\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...")
        time.sleep(5)
