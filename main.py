import os
import time
import logging
from datetime import datetime
from functools import lru_cache

import telebot
from telebot import types
from flask import Flask, request
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get('TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')  # –ë–µ–∑ https:// –≤ –Ω–∞—á–∞–ª–µ
PORT = int(os.environ.get('PORT', 8080))
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["200 per day", "50 per hour"]
)

# üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
@lru_cache(maxsize=2)
def load_text(filename):
    try:
        with open(f"assets/{filename}", "r", encoding="utf-8") as f:
            return f.read()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return f"–¢–µ–∫—Å—Ç {filename} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

texts = {
    "paid_text": load_text("paid_text.html"),
    "free_text": load_text("free_text.html")
}

# üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
IMAGES = {
    'paid_text': 'https://via.placeholder.com/400x300/FFD700/000000?text=üí∞+–ü–ª–∞—Ç–Ω–∞—è+—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è',
    'free_text': 'https://via.placeholder.com/400x300/32CD32/FFFFFF?text=üÜì+–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è+—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è'
}

# üåê Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
@app.route(f'/{TOKEN}', methods=['POST'])
@limiter.limit("5 per second")
def webhook():
    if request.headers.get('content-type') == 'application/json':
        try:
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ callback_query –µ—Å–ª–∏ –µ—Å—Ç—å
            if update.callback_query:
                bot.process_new_updates([update])
                return '', 200
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if update.message:
                bot.process_new_updates([update])
                return '', 200
                
            logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return 'Bad request', 400
            
        except Exception as e:
            logger.error(f"‚ùå Webhook error: {e}")
            return 'Internal error', 500
    return 'Bad request', 400

# üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    return {
        "status": "Bot is running",
        "time": datetime.now().isoformat(),
        "webhook": f"https://{WEBHOOK_URL}/{TOKEN}" if WEBHOOK_URL else "None"
    }

# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@app.route('/stats')
def stats():
    webhook_info = bot.get_webhook_info()
    return {
        "webhook_url": webhook_info.url,
        "pending_updates": webhook_info.pending_update_count,
        "last_error": webhook_info.last_error_message or "None"
    }

# üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
def setup_webhook():
    if not WEBHOOK_URL:
        logger.warning("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
        return False
    
    try:
        bot.remove_webhook()
        time.sleep(1)
        webhook_url = f"https://{WEBHOOK_URL}/{TOKEN}"
        bot.set_webhook(url=webhook_url)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return False

# üé¨ –ö–æ–º–∞–Ω–¥–∞ /start —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", callback_data="free"),
            types.InlineKeyboardButton("–ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", callback_data="paid")
        )
        markup.row(types.InlineKeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about"))
        
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –∫–æ—à–µ–∫! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=markup
        )
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üîò –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
@bot.callback_query_handler(func=lambda call: True)
def handle_buttons(call):
    try:
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {call.data}")
        
        if call.data == "free":
            send_message_with_image(call.message.chat.id, "free_text")
        elif call.data == "paid":
            send_message_with_image(call.message.chat.id, "paid_text")
        elif call.data == "about":
            bot.send_message(call.message.chat.id, "üêæ –ü—Ä–æ–µ–∫—Ç –ø–æ–º–æ—â–∏ –±–µ–∑–¥–æ–º–Ω—ã–º –∫–æ—à–∫–∞–º –Ø–ª—Ç—ã")
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        bot.answer_callback_query(call.id, text="‚úÖ –ì–æ—Ç–æ–≤–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ {call.data}: {e}")
        bot.answer_callback_query(call.id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
def send_message_with_image(chat_id, text_key):
    try:
        text = texts.get(text_key, "–¢–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        image_url = IMAGES.get(text_key)
        
        if image_url:
            bot.send_photo(chat_id, image_url, caption=text, parse_mode="HTML")
        else:
            bot.send_message(chat_id, text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {text_key}: {e}")
        raise

# üîß –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫", callback_data="reset_webhook"))
    
    bot.send_message(
        message.chat.id,
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=markup
    )

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {len(texts)}")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    
    if WEBHOOK_URL and setup_webhook():
        app.run(host='0.0.0.0', port=PORT)
    else:
        logger.warning("üö´ –†–µ–∂–∏–º webhook –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫ polling...")
        bot.remove_webhook()
        bot.polling(none_stop=True)
