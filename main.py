import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
import concurrent.futures
from threading import Lock
import signal
import sys

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç requests –∏ urllib
logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    
    def __init__(self, token: str):
        self.token = token
        self.bot = None
        self.webhook_set = False
        self.polling_active = False
        
    def create_bot_instance(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        if self.bot:
            try:
                self.bot.stop_polling()
                self.bot.remove_webhook()
            except:
                pass
        
        self.bot = telebot.TeleBot(self.token, threaded=True, skip_pending=True)
        return self.bot
    
    def cleanup_bot_state(self):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            temp_bot = telebot.TeleBot(self.token)
            
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞...")
            
            # –£–¥–∞–ª—è–µ–º webhook
            result = temp_bot.remove_webhook()
            logger.info(f"üì° Webhook —É–¥–∞–ª–µ–Ω: {result}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º pending updates
            try:
                updates = temp_bot.get_updates(timeout=1)
                if updates:
                    last_update_id = updates[-1].update_id
                    temp_bot.get_updates(offset=last_update_id + 1, timeout=1)
                    logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {len(updates)} —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
            del temp_bot
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def setup_webhook_safe(self, webhook_url: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            if not self.bot:
                return False
            
            self.cleanup_bot_state()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            full_url = f"https://{webhook_url}/{self.token}"
            result = self.bot.set_webhook(
                url=full_url,
                max_connections=10,
                drop_pending_updates=True  # –í–∞–∂–Ω–æ: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            )
            
            if result:
                self.webhook_set = True
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False
    
    def start_polling_safe(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ polling"""
        try:
            if not self.bot:
                return False
            
            self.cleanup_bot_state()
            
            logger.info("üì± –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
            self.polling_active = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            self.bot.infinity_polling(
                timeout=20,
                long_polling_timeout=20,
                skip_pending=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                none_stop=True,
                interval=1
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
            self.polling_active = False
            raise
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            if self.bot:
                if self.polling_active:
                    logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling...")
                    self.bot.stop_polling()
                    self.polling_active = False
                
                if self.webhook_set:
                    logger.info("‚èπÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ webhook...")
                    self.bot.remove_webhook()
                    self.webhook_set = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")

# –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π MultiChannelParser –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
class MultiChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏"""
    
    def __init__(self):
        # üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.channels = [
            {
                'username': '–ö–æ—Ç–∏–∫–∏_–Ø–ª—Ç–∞',
                'url': 'https://t.me/cats_yalta',
                'type': 'cats',
                'priority': 1
            },
            {
                'username': 'dogs_yalta_official',
                'url': 'https://t.me/dogs_yalta_official', 
                'type': 'dogs',
                'priority': 1
            },
            {
                'username': 'yalta_animals_help',
                'url': 'https://t.me/yalta_animals_help',
                'type': 'all',
                'priority': 2
            },
            {
                'username': 'crimea_pets_adoption',
                'url': 'https://t.me/crimea_pets_adoption',
                'type': 'all',
                'priority': 2
            }
        ]
        
        self.posts_cache = {'cats': [], 'dogs': [], 'all': []}
        self.last_update = {}
        self.update_lock = Lock()
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã MultiChannelParser –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def parse_single_channel(self, channel: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"""
        try:
            web_url = f'https://t.me/s/{channel["username"]}'
            logger.info(f"üåê –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {channel['username']} ({channel['type']})")
            
            response = self.session.get(web_url, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            message_divs = soup.find_all('div', class_='tgme_widget_message')
            
            posts = []
            for div in message_divs[:10]:
                post_data = self.parse_message_div(div, channel)
                if post_data and self.is_animal_related(post_data.get('text', '')):
                    if channel['type'] == 'all':
                        post_data['type'] = self.detect_animal_type(post_data.get('text', ''))
                    else:
                        post_data['type'] = channel['type']
                    
                    post_data['source_channel'] = channel['username']
                    post_data['channel_priority'] = channel['priority']
                    posts.append(post_data)
            
            logger.info(f"‚úÖ {channel['username']}: –Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel['username']}: {e}")
            return []
    
    def get_cached_posts(self, channel_type: str = 'all') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if channel_type == 'cats':
            return [
                {
                    'id': 'mock_cat_1',
                    'title': 'üê± –†—ã–∂–∏–π –∫–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –∏–≥—Ä–∏–≤—ã–π –∏ –ª–∞—Å–∫–æ–≤—ã–π.',
                    'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                    'url': 'https://t.me/cats_yalta/1001',
                    'contact': '@yalta_cats ‚Ä¢ +7 978 123-45-67',
                    'photo_url': 'https://via.placeholder.com/600x400/FF6B35/FFFFFF?text=üê±+–ö–æ—Ç–µ–Ω–æ–∫+–ú—É—Ä–∑–∏–∫',
                    'has_photo': True,
                    'type': 'cats',
                    'source_channel': '–ö–æ—Ç–∏–∫–∏_–Ø–ª—Ç–∞'
                }
            ]
        else:  # dogs
            return [
                {
                    'id': 'mock_dog_1',
                    'title': 'üê∂ –©–µ–Ω–æ–∫ –ë–æ–±–∏–∫ –∏—â–µ—Ç —Å–µ–º—å—é',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 4 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –∞–∫—Ç–∏–≤–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π.',
                    'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                    'url': 'https://t.me/dogs_yalta_official/3001',
                    'contact': '@dog_volunteers ‚Ä¢ +7 978 345-67-89',
                    'photo_url': 'https://via.placeholder.com/600x400/4682B4/FFFFFF?text=üê∂+–©–µ–Ω–æ–∫+–ë–æ–±–∏–∫',
                    'has_photo': True,
                    'type': 'dogs',
                    'source_channel': 'dogs_yalta_official'
                }
            ]
    
    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞"""
        return {
            'channels_total': len(self.channels),
            'channels_active': len([c for c in self.channels if c['priority'] <= 2]),
            'cache_status': {
                'cats': len(self.posts_cache.get('cats', [])),
                'dogs': len(self.posts_cache.get('dogs', [])),
                'all': len(self.posts_cache.get('all', []))
            },
            'last_updates': {
                k: v.strftime('%H:%M:%S') if v else '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å' 
                for k, v in self.last_update.items()
            }
        }
    
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞...
    def detect_animal_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
        text_lower = text.lower()
        cat_keywords = ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É']
        dog_keywords = ['—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–≥–∞–≤', '–ª–∞–π–∫', '–æ–≤—á–∞—Ä–∫']
        
        cat_count = sum(1 for word in cat_keywords if word in text_lower)
        dog_count = sum(1 for word in dog_keywords if word in text_lower)
        
        return 'cats' if cat_count > dog_count else 'dogs'
    
    def is_animal_related(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑—å —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏"""
        keywords = ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–∂–∏–≤–æ—Ç–Ω', '–ø–∏—Ç–æ–º–µ—Ü']
        return any(keyword in text.lower() for keyword in keywords)
    
    def parse_message_div(self, div, channel) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç"""
        try:
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            if not text:
                return None
            
            return {
                'id': f"mock_{int(time.time())}",
                'text': text,
                'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                'url': f"{channel['url']}/123",
                'title': text[:50] + "..." if len(text) > 50 else text,
                'description': text,
                'contact': "–°–º. –≤ –∫–∞–Ω–∞–ª–µ",
                'photo_url': None,
                'has_photo': False,
                'type': channel.get('type', 'all'),
                'source_channel': channel['username']
            }
        except:
            return None

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
class CatBotWithPhotos:
    """–ë–æ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BotManager –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.bot_manager = BotManager(self.token)
        self.bot = self.bot_manager.create_bot_instance()
        
        self.parser = MultiChannelParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        self.setup_handlers()
        self.setup_routes()
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.bot_manager.stop_bot()
        sys.exit(0)
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            source = post.get('source_channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            
            post_text = (
                f"{emoji} <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üì∫ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç</a>"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")
    
    def send_channel_posts(self, chat_id: int, animal_type: str = 'cats'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    f"üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–∏–ø–∞ '{animal_type}'"
                )
                return
            
            header_text = f"{'üê± –ö–û–®–ö–ò' if animal_type == 'cats' else 'üê∂ –°–û–ë–ê–ö–ò'} –ò–©–£–¢ –î–û–ú\n\n–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(posts)}"
            self.bot.send_message(chat_id, header_text, parse_mode="HTML")
            
            for post in posts:
                self.send_post(chat_id, post)
                time.sleep(0.5)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        return markup
    
    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üêæ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['status'])
        def status_handler(message):
            status_text = f"""üìä <b>–°–¢–ê–¢–£–° –ë–û–¢–ê</b>

ü§ñ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ
üì° Webhook: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.bot_manager.webhook_set else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üì± Polling: {'–ê–∫—Ç–∏–≤–µ–Ω' if self.bot_manager.polling_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['users'])}
üì® –°–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages']}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"""
            
            self.bot.send_message(message.chat.id, status_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        def adoption_handler(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏")
            markup.add("üîô –ù–∞–∑–∞–¥")
            
            self.bot.send_message(
                message.chat.id,
                "üè† <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:</b>",
                parse_mode="HTML",
                reply_markup=markup
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üê± –ö–æ—à–∫–∏")
        def cats_handler(message):
            self.send_channel_posts(message.chat.id, 'cats')
        
        @self.bot.message_handler(func=lambda m: m.text == "üê∂ –°–æ–±–∞–∫–∏")
        def dogs_handler(message):
            self.send_channel_posts(message.chat.id, 'dogs')
        
        @self.bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        def contacts_handler(message):
            contacts_text = """üìû <b>–ö–û–ù–¢–ê–ö–¢–´</b>

üë• –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã:
üîπ –ö–æ—à–∫–∏: +7 978 144-90-70
üîπ –°–æ–±–∞–∫–∏: +7 978 234-56-78

üè• –ö–ª–∏–Ω–∏–∫–∏:
üîπ "–ê–π–±–æ–ª–∏—Ç": +7 978 456-78-90"""
            
            self.bot.send_message(message.chat.id, contacts_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
        def back_handler(message):
            self.bot.send_message(
                message.chat.id,
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: True)
        def default_handler(message):
            self.bot.send_message(
                message.chat.id,
                "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞",
                reply_markup=self.get_main_keyboard()
            )
    
    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            return jsonify({
                "status": "ü§ñ Bot Running (Conflict Fixed)",
                "time": datetime.now().strftime('%H:%M:%S'),
                "webhook_set": self.bot_manager.webhook_set,
                "polling_active": self.bot_manager.polling_active,
                "users": len(self.stats["users"]),
                "messages": self.stats["messages"]
            })
        
        @self.app.route('/health')
        def health():
            return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Animal Bot (–≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)...")
        
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            if self.webhook_url:
                logger.info("üåê –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å webhook...")
                if self.bot_manager.setup_webhook_safe(self.webhook_url):
                    logger.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
                    self.app.run(host='0.0.0.0', port=self.port, debug=False)
                else:
                    logger.warning("‚ö†Ô∏è Webhook –Ω–µ —É–¥–∞–ª—Å—è, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling...")
                    self.bot_manager.start_polling_safe()
            else:
                logger.info("üì± –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
                self.bot_manager.start_polling_safe()
                
        except KeyboardInterrupt:
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
        finally:
            self.bot_manager.stop_bot()

if __name__ == "__main__":
    try:
        bot = CatBotWithPhotos()
        bot.run()
    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
