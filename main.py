import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class GroupParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è Telegram –≥—Ä—É–ø–ø—ã lapki_ruchki_yalta"""
    
    def __init__(self):
        self.group = {
            'username': 'lapki_ruchki_yalta',
            'url': 'https://t.me/lapki_ruchki_yalta',
            'web_url': 'https://t.me/s/lapki_ruchki_yalta'
        }
        self.posts_cache = []
        self.last_update = None
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none'
        })
    
    def get_group_posts(self, animal_type: str = 'all', limit: int = 15) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        try:
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {self.group['web_url']}")
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –≥—Ä—É–ø–ø—ã
            response = self.session.get(
                self.group['web_url'], 
                timeout=20,
                allow_redirects=True
            )
            
            if response.status_code != 200:
                logger.error(f"‚ùå HTTP {response.status_code}: {response.reason}")
                return self.get_mock_posts(animal_type)
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
            message_containers = soup.find_all('div', class_='tgme_widget_message')
            
            if not message_containers:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                message_containers = soup.find_all('div', {'data-post': True})
            
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(message_containers)}")
            
            posts = []
            processed_ids = set()
            
            for container in message_containers:
                try:
                    post_data = self.parse_group_message(container)
                    
                    if (post_data and 
                        post_data['id'] not in processed_ids and
                        self.is_adoption_post(post_data['text'], animal_type)):
                        
                        posts.append(post_data)
                        processed_ids.add(post_data['id'])
                        
                        if len(posts) >= limit:
                            break
                            
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue
            
            if posts:
                self.posts_cache = posts
                self.last_update = datetime.now()
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cats_count = len([p for p in posts if p['type'] == 'cats'])
                dogs_count = len([p for p in posts if p['type'] == 'dogs'])
                with_photos = sum(1 for p in posts if p['photo_url'])
                
                logger.info(f"üìä –ö–æ—à–∫–∏: {cats_count}, –°–æ–±–∞–∫–∏: {dogs_count}, –° —Ñ–æ—Ç–æ: {with_photos}")
                
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏")
                return self.get_mock_posts(animal_type)
                
            return posts
            
        except requests.exceptions.Timeout:
            logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø—ã")
            return self.get_mock_posts(animal_type)
        except requests.exceptions.RequestException as e:
            logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
            return self.get_mock_posts(animal_type)
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_mock_posts(animal_type)
    
    def parse_group_message(self, container) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞
            post_id = container.get('data-post', '')
            if post_id:
                post_id = post_id.split('/')[-1]
            else:
                post_id = f"msg_{int(time.time())}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_element = container.find('div', class_='tgme_widget_message_text')
            if not text_element:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞
                text_element = container.find('div', class_='js-message_text')
            
            if not text_element:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            full_text = self.extract_full_text(text_element)
            
            if not full_text or len(full_text.strip()) < 20:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
            date_str = self.extract_date(container)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ
            photo_url = self.extract_photo(container)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            animal_type = self.detect_animal_type(full_text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            phone_numbers = self.extract_phone_numbers(full_text)
            contact_info = self.extract_other_contacts(full_text)
            
            return {
                'id': post_id,
                'text': full_text,
                'date': date_str,
                'url': f"{self.group['url']}/{post_id}" if post_id.isdigit() else self.group['url'],
                'title': self.generate_title(full_text, animal_type),
                'description': self.clean_description(full_text),
                'contact': contact_info,
                'phone_numbers': phone_numbers,
                'photo_url': photo_url,
                'has_photo': bool(photo_url),
                'type': animal_type,
                'source': 'group'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def extract_full_text(self, text_element) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not text_element:
            return ""
        
        # –ó–∞–º–µ–Ω—è–µ–º <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        for br in text_element.find_all("br"):
            br.replace_with("\n")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        text = text_element.get_text(separator='\n', strip=True)
        
        # –û—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        text = re.sub(r'\n\s*\n', '\n\n', text)
        text = re.sub(r'\n{3,}', '\n\n', text)
        
        return text.strip()
    
    def extract_date(self, container) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
            time_element = container.find('time', datetime=True)
            if time_element:
                dt_string = time_element.get('datetime')
                if dt_string:
                    dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
                    return dt.strftime('%d.%m.%Y %H:%M')
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞—Ç—ã
            date_element = container.find('span', class_='tgme_widget_message_meta')
            if date_element:
                date_text = date_element.get_text(strip=True)
                if date_text:
                    return date_text
                    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
        
        return datetime.now().strftime('%d.%m.%Y %H:%M')
    
    def extract_photo(self, container) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –°–ø–æ—Å–æ–± 1: —Ñ–æ—Ç–æ –≤ –æ–±–µ—Ä—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            photo_wrap = container.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap:
                style = photo_wrap.get('style', '')
                match = re.search(r"background-image:url\('([^']+)'\)", style)
                if match:
                    return match.group(1)
            
            # –°–ø–æ—Å–æ–± 2: –≤–∏–¥–µ–æ –ø—Ä–µ–≤—å—é
            video_wrap = container.find('a', class_='tgme_widget_message_video_wrap')
            if video_wrap:
                style = video_wrap.get('style', '')
                match = re.search(r"background-image:url\('([^']+)'\)", style)
                if match:
                    return match.group(1)
            
            # –°–ø–æ—Å–æ–± 3: –ø—Ä—è–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_tag = container.find('img', src=True)
            if img_tag:
                src = img_tag.get('src')
                if src and not src.startswith('data:'):
                    return src
            
            # –°–ø–æ—Å–æ–± 4: –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞
            media_group = container.find('div', class_='tgme_widget_message_grouped_wrap')
            if media_group:
                img_in_group = media_group.find('img', src=True)
                if img_in_group:
                    return img_in_group.get('src')
                    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        
        return None
    
    def detect_animal_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ—à–µ–∫
        cat_keywords = [
            '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–∫–æ—Ç—è—Ç', '–∫–∏—Å–∞', '–∫–∏—Å—è',
            '–º—É—Ä–∑', '–º—è—É', '–∫–∞—Å—Ç—Ä', '—Å—Ç–µ—Ä–∏–ª', '—Ç—Ä—ë—Ö—Ü–≤–µ—Ç–Ω', '—Ä—ã–∂–∏–π –∫–æ—Ç',
            '—á—ë—Ä–Ω–∞—è –∫–æ—à–∫', '–±–µ–ª–∞—è –∫–æ—à–∫', '–ø—É—à–∏—Å—Ç—ã–π –∫–æ—Ç', '–≥–ª–∞–¥–∫–æ—à–µ—Ä—Å—Ç–Ω'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–±–∞–∫  
        dog_keywords = [
            '—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '—Å–æ–±–∞—á–∫', '—â–µ–Ω–æ–∫', '—â–µ–Ω–∫–∏', '–ø—Å–∏–Ω',
            '–¥–≤–æ—Ä–Ω—è–∂–∫', '–º–µ—Ç–∏—Å', '–ª–∞–π–∫', '–æ–≤—á–∞—Ä–∫', '—Ç–µ—Ä—å–µ—Ä', '–¥–æ–≥', '–±—É–ª—å–¥–æ–≥',
            '—Ö–∞—Å–∫–∏', '–ª–∞–±—Ä–∞–¥–æ—Ä', '—Å–ø–∞–Ω–∏–µ–ª—å', '—Ç–∞–∫—Å', '—á–∏—Ö—É–∞—Ö—É–∞'
        ]
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        cat_matches = sum(1 for keyword in cat_keywords if keyword in text_lower)
        dog_matches = sum(1 for keyword in dog_keywords if keyword in text_lower)
        
        if cat_matches > dog_matches:
            return 'cats'
        elif dog_matches > cat_matches:
            return 'dogs'
        else:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            if any(word in text_lower for word in ['–º—è—É', '–º—É—Ä—á', '–ª–∞–ø–∫']):
                return 'cats'
            elif any(word in text_lower for word in ['–≥–∞–≤', '–ª–∞–π', '—Ö–≤–æ—Å—Ç –≤–∏–ª—è–µ—Ç']):
                return 'dogs'
            
            return 'cats'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—à–∫–∏ (–±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
    
    def is_adoption_post(self, text: str, filter_type: str = 'all') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º –æ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        adoption_keywords = [
            '–∏—â–µ—Ç –¥–æ–º', '–∏—â—É –¥–æ–º', '–Ω—É–∂–µ–Ω –¥–æ–º', '–≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏',
            '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–ø—Ä–∏—é—Ç', '–ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏', '–∫–æ–º—É –Ω—É–∂–µ–Ω',
            '–æ—Ç–¥–∞–º', '–æ—Ç–¥–∞—é', '–≤–æ–∑—å–º–∏—Ç–µ', '–∑–∞–±–µ—Ä–∏—Ç–µ', '—É—Å—ã–Ω–æ–≤',
            '—Ö–æ–∑—è–µ–≤', '—Å–µ–º—å—é', '–ª—é–±—è—â', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω'
        ]
        
        # –ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Ñ—Ä–∞–∑—ã
        exclude_keywords = [
            '–ø–æ—Ç–µ—Ä—è–ª', '–ø–æ—Ç–µ—Ä—è', '–Ω–∞–π–¥–µ–Ω', '–ø—Ä–æ–ø–∞–ª', '—Å–±–µ–∂–∞–ª',
            '—É–∫—Ä–∞–ª–∏', '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–ª–µ—á–µ–Ω–∏–µ', '–æ–ø–µ—Ä–∞—Ü–∏—è'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        has_adoption_keywords = any(keyword in text_lower for keyword in adoption_keywords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤
        has_exclude_keywords = any(keyword in text_lower for keyword in exclude_keywords)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        min_length = len(text.strip()) >= 50
        
        # –ù–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ username)
        has_contacts = (len(self.extract_phone_numbers(text)) > 0 or 
                       '@' in text or 
                       '—Ç–µ–ª–µ—Ñ–æ–Ω' in text_lower or 
                       '–∑–≤–æ–Ω–∏—Ç—å' in text_lower)
        
        return has_adoption_keywords and not has_exclude_keywords and min_length and has_contacts
    
    def generate_title(self, text: str, animal_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        for line in lines[:3]:
            if (len(line) > 10 and len(line) < 100 and 
                not line.startswith('+') and not line.startswith('8') and 
                '@' not in line[:15]):
                
                # –û—á–∏—â–∞–µ–º –æ—Ç —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
                title = re.sub(r'^[üê±üê∂üè†‚ù§Ô∏èüíïüôè‚ú®üåü‚≠êÔ∏èüî•üí´üéØüì¢üì£‚ÄºÔ∏è‚ùóÔ∏è‚ö°Ô∏èüíØ\s]+', '', line)
                title = title.strip()
                
                if title and len(title) > 10:
                    if len(title) > 60:
                        title = title[:60] + "..."
                    return title
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        emoji = 'üê±' if animal_type == 'cats' else 'üê∂'
        animal_name = '–ö–æ—Ç–∏–∫' if animal_type == 'cats' else '–°–æ–±–∞–∫–∞'
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç
        text_lower = text.lower()
        
        if animal_type == 'cats':
            if any(word in text_lower for word in ['–∫–æ—Ç–µ–Ω–æ–∫', '–∫–æ—Ç—è—Ç–∞', '–º–∞–ª—ã—à']):
                animal_name = '–ö–æ—Ç–µ–Ω–æ–∫'
            elif '–∫–æ—à–∫–∞' in text_lower:
                animal_name = '–ö–æ—à–∫–∞'
            elif '–∫–æ—Ç ' in text_lower:
                animal_name = '–ö–æ—Ç'
        else:
            if any(word in text_lower for word in ['—â–µ–Ω–æ–∫', '—â–µ–Ω–∫–∏', '–º–∞–ª—ã—à']):
                animal_name = '–©–µ–Ω–æ–∫'
            elif '—Å–æ–±–∞–∫–∞' in text_lower:
                animal_name = '–°–æ–±–∞–∫–∞'
        
        return f"{emoji} {animal_name} –∏—â–µ—Ç –¥–æ–º"
    
    def clean_description(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
        # –£–¥–∞–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã (–æ–Ω–∏ –±—É–¥—É—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ)
        clean_text = re.sub(r'(\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,})', '', text)
        
        # –£–¥–∞–ª—è–µ–º username'—ã
        clean_text = re.sub(r'@\w+', '', clean_text)
        
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        clean_text = re.sub(r'https?://\S+', '', clean_text)
        
        # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        clean_text = re.sub(r'\n\s*\n', '\n', clean_text)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(clean_text) > 350:
            # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            sentences = clean_text.split('.')
            result = ""
            for sentence in sentences:
                if len(result + sentence + '.') <= 350:
                    result += sentence + '.'
                else:
                    break
            clean_text = result if result else clean_text[:350] + "..."
        
        return clean_text
    
    def extract_phone_numbers(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
        patterns = [
            r'\+7[\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,}',      # +7 9xx xxx-xx-xx
            r'8[\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,}',        # 8 9xx xxx-xx-xx  
            r'9\d{2}[\s\-]?[\d\s\-]{7,}',                  # 9xx xxx-xx-xx
            r'\+7\d{10}',                                   # +79xxxxxxxxxx
            r'8\d{10}'                                      # 89xxxxxxxxxx
        ]
        
        found_phones = []
        
        for pattern in patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
                clean_phone = re.sub(r'[^\d]', '', match)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
                if len(clean_phone) == 11:
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É 7xxxxxxxxxx
                    if clean_phone.startswith('8'):
                        clean_phone = '7' + clean_phone[1:]
                    found_phones.append(clean_phone)
                elif len(clean_phone) == 10 and clean_phone.startswith('9'):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
                    clean_phone = '7' + clean_phone
                    found_phones.append(clean_phone)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        unique_phones = list(dict.fromkeys(found_phones))[:3]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤
        valid_phones = []
        for phone in unique_phones:
            if len(phone) == 11 and phone.startswith('79') and phone[2:5] in [
                '910', '911', '912', '913', '914', '915', '916', '917', '918', '919',
                '920', '921', '922', '923', '924', '925', '926', '927', '928', '929',
                '930', '931', '932', '933', '934', '936', '937', '938', '939',
                '950', '951', '952', '953', '954', '955', '956', '958', '960', '961',
                '962', '963', '964', '965', '966', '967', '968', '969', '977', '978',
                '980', '981', '982', '983', '984', '985', '986', '987', '988', '989',
                '991', '992', '993', '994', '995', '996', '997', '999'
            ]:
                valid_phones.append(phone)
        
        return valid_phones
    
    def extract_other_contacts(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (username, email)"""
        contacts = []
        
        # Username'—ã Telegram
        usernames = re.findall(r'@[a-zA-Z][a-zA-Z0-9_]{4,31}', text)
        contacts.extend(usernames[:2])
        
        # Email –∞–¥—Ä–µ—Å–∞
        emails = re.findall(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', text)
        contacts.extend(emails[:1])
        
        if not contacts:
            return "–°–º. –≤ –≥—Ä—É–ø–ø–µ"
        
        return ' ‚Ä¢ '.join(contacts)
    
    def get_mock_posts(self, animal_type: str = 'cats') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
        
        if animal_type == 'dogs':
            return [
                {
                    'id': 'mock_dog_1',
                    'title': 'üê∂ –©–µ–Ω–æ–∫ –ë–æ–±–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                    'description': '–û—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —â–µ–Ω–æ–∫, –≤–æ–∑—Ä–∞—Å—Ç –æ–∫–æ–ª–æ 4 –º–µ—Å—è—Ü–µ–≤. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –∞–∫—Ç–∏–≤–Ω—ã–π –∏ –∏–≥—Ä–∏–≤—ã–π. –•–æ—Ä–æ—à–æ –ª–∞–¥–∏—Ç —Å –¥–µ—Ç—å–º–∏.',
                    'date': current_time,
                    'url': self.group['url'],
                    'contact': '–°–º. –≤ –≥—Ä—É–ø–ø–µ',
                    'phone_numbers': ['79781234567'],
                    'photo_url': 'https://via.placeholder.com/600x400/4A90E2/FFFFFF?text=–©–µ–Ω–æ–∫+–∏—â–µ—Ç+–¥–æ–º',
                    'has_photo': True,
                    'type': 'dogs',
                    'source': 'mock'
                }
            ]
        else:
            return [
                {
                    'id': 'mock_cat_1',
                    'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                    'description': '–õ–∞—Å–∫–æ–≤—ã–π –∫–æ—Ç–µ–Ω–æ–∫, –≤–æ–∑—Ä–∞—Å—Ç 2 –º–µ—Å—è—Ü–∞. –û—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π. –ö –ª–æ—Ç–∫—É –ø—Ä–∏—É—á–µ–Ω, –µ—Å—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.',
                    'date': current_time,
                    'url': self.group['url'],
                    'contact': '–°–º. –≤ –≥—Ä—É–ø–ø–µ',
                    'phone_numbers': ['79787654321'],
                    'photo_url': 'https://via.placeholder.com/600x400/FF6B6B/FFFFFF?text=–ö–æ—Ç–µ–Ω–æ–∫+–∏—â–µ—Ç+–¥–æ–º',
                    'has_photo': True,
                    'type': 'cats',
                    'source': 'mock'
                }
            ]
    
    def get_cached_posts(self, animal_type: str = 'all') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ"""
        # –ö—ç—à –¥–µ–π—Å—Ç–≤—É–µ—Ç 20 –º–∏–Ω—É—Ç
        cache_duration = 1200  # —Å–µ–∫—É–Ω–¥—ã
        
        if (not self.last_update or 
            (datetime.now() - self.last_update).total_seconds() > cache_duration):
            
            logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å—Ç–æ–≤...")
            try:
                new_posts = self.get_group_posts(animal_type)
                if new_posts:
                    return new_posts
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        if self.posts_cache:
            filtered_posts = [
                post for post in self.posts_cache 
                if animal_type == 'all' or post['type'] == animal_type
            ]
            if filtered_posts:
                return filtered_posts
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞
        return self.get_mock_posts(animal_type)

class AnimalBot:
    """Telegram –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–æ–π lapki_ruchki_yalta"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = GroupParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "users": set(), 
            "messages": 0, 
            "start_time": datetime.now()
        }
        
        self.setup_handlers()
        self.setup_routes()
    
    def format_phone_for_display(self, phone: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if len(phone) == 11 and phone.startswith('7'):
            return f"+7 ({phone[1:4]}) {phone[4:7]}-{phone[7:9]}-{phone[9:11]}"
        return phone
    
    def send_post_with_clickable_phones(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            post_text = f"{emoji} <b>{post['title']}</b>\n\n"
            post_text += f"{post['description']}\n\n"
            post_text += f"üìÖ {post['date']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if post.get('contact') and post['contact'] != "–°–º. –≤ –≥—Ä—É–ø–ø–µ":
                post_text += f"üí¨ {post['contact']}\n"
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
            post_text += f"\nüîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ</a>"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram
            if len(post_text) > 1024:
                post_text = post_text[:950] + "...\n\nüîó <a href='{post['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –≥—Ä—É–ø–ø–µ</a>"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            if post.get('phone_numbers'):
                for phone in post['phone_numbers']:
                    formatted_phone = self.format_phone_for_display(phone)
                    keyboard.add(
                        types.InlineKeyboardButton(
                            f"üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å {formatted_phone}", 
                            url=f"tel:+{phone}"
                        )
                    )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É
            keyboard.add(
                types.InlineKeyboardButton(
                    "üí¨ –û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ", 
                    url=post['url']
                )
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
            if post.get('photo_url') and post['photo_url'].startswith('http'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    return
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ {post.get('id', 'unknown')}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            self.bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üì¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ: {self.parser.group['url']}"
            )

    def send_animals_list(self, chat_id: int, animal_type: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                animal_name = "–∫–æ—à–µ–∫" if animal_type == 'cats' else "—Å–æ–±–∞–∫"
                self.bot.send_message(
                    chat_id,
                    f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {animal_name}\n\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—É: {self.parser.group['url']}\n\n"
                    f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
                )
                return
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
            animal_emoji = 'üê±' if animal_type == 'cats' else 'üê∂'
            animal_name = "–ö–û–®–ö–ò" if animal_type == 'cats' else "–°–û–ë–ê–ö–ò"
            
            header_text = (
                f"{animal_emoji} <b>{animal_name} –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã:\n"
                f"<a href='{self.parser.group['url']}'>–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞</a>\n\n"
                f"üìû <b>–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞</b>"
            )
            
            self.bot.send_message(chat_id, header_text, parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã —Å –ø–∞—É–∑–∞–º–∏
            for i, post in enumerate(posts[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø–æ—Å—Ç–æ–≤
                self.send_post_with_clickable_phones(chat_id, post)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < len(posts) - 1 and i < 9:
                    time.sleep(1.5)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            help_text = (
                f"üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å –∂–∏–≤–æ—Ç–Ω—ã–º:</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞:</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∑–≤–æ–Ω–∏—Ç—å'\n\n"
                f"üì± <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è:</b> –ü–µ—Ä–µ—à–ª–∏—Ç–µ –¥—Ä—É–∑—å—è–º\n\n"
                f"üí¨ <b>–ì—Ä—É–ø–ø–∞:</b> <a href='{self.parser.group['url']}'>{self.parser.group['username']}</a>\n\n"
                f"ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b> –ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É"
            )
            
            self.bot.send_message(chat_id, help_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≥—Ä—É–ø–ø—É:\n{self.parser.group['url']}"
            )

    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè† –ñ–∏–≤–æ—Ç–Ω—ã–µ", "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        markup.add("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        return markup
    
    def get_animals_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏")
        markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üîô –ù–∞–∑–∞–¥")
        return markup

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_command(message):
            user_id = message.from_user.id
            self.stats["users"].add(user_id)
            self.stats["messages"] += 1
            
            user_name = message.from_user.first_name or "–¥—Ä—É–≥"
            
            welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

üêæ <b>–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º

<b>–ß—Ç–æ —É–º–µ—é:</b>
üè† <b>–ñ–∏–≤–æ—Ç–Ω—ã–µ</b> - –∫–æ—à–∫–∏ –∏ —Å–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º
üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ü–µ–Ω—ã  
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã –∏ –∫–ª–∏–Ω–∏–∫–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å

üí° –í—Å–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ!"""

            self.bot.send_message(
                message.chat.id,
                welcome_text,
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['help'])
        def help_command(message):
            help_text = """üÜò <b>–ü–û–ú–û–©–¨</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/update - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

<b>–ö–Ω–æ–ø–∫–∏:</b>
üè† –ñ–∏–≤–æ—Ç–Ω—ã–µ - —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–∫ –∏ —Å–æ–±–∞–∫
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã - —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
üîÑ –û–±–Ω–æ–≤–∏—Ç—å - —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

<b>–ü—Ä–æ–±–ª–µ–º—ã?</b>
–ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É: @lapki_ruchki_yalta"""

            self.bot.send_message(message.chat.id, help_text, parse_mode="HTML")
        
        @self.bot.message_handler(commands=['update', 'refresh'])
        def update_command(message):
            self.stats["messages"] += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            msg = self.bot.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—Ä—É–ø–ø—ã...")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.parser.posts_cache = []
            self.parser.last_update = None
            
            try:
                new_posts = self.parser.get_group_posts()
                
                cats_count = len([p for p in new_posts if p['type'] == 'cats'])
                dogs_count = len([p for p in new_posts if p['type'] == 'dogs'])
                photos_count = sum(1 for p in new_posts if p['photo_url'])
                
                result_text = f"""‚úÖ <b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üìÑ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(new_posts)}
üê± –ö–æ—à–∫–∏: {cats_count}  
üê∂ –°–æ–±–∞–∫–∏: {dogs_count}
üì∏ –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: {photos_count}

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"""
                
                self.bot.edit_message_text(
                    result_text,
                    message.chat.id,
                    msg.message_id,
                    parse_mode="HTML"
                )
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                self.bot.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                    message.chat.id,
                    msg.message_id
                )
        
        @self.bot.message_handler(commands=['stats'])
        def stats_command(message):
            uptime = datetime.now() - self.stats["start_time"]
            
            stats_text = f"""üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats["users"])}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {self.stats["messages"]}
‚è∞ –†–∞–±–æ—Ç–∞–µ—Ç: {uptime.days}–¥ {uptime.seconds//3600}—á
üïê –ó–∞–ø—É—â–µ–Ω: {self.stats["start_time"].strftime('%d.%m.%Y %H:%M')}

üìã –ö—ç—à –ø–æ—Å—Ç–æ–≤: {len(self.parser.posts_cache)}
üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.parser.last_update.strftime('%H:%M:%S') if self.parser.last_update else '–ù–∏–∫–æ–≥–¥–∞'}

üåê –ì—Ä—É–ø–ø–∞: @{self.parser.group["username"]}"""

            self.bot.send_message(message.chat.id, stats_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            text = message.text
            chat_id = message.chat.id
            
            try:
                if text == "üè† –ñ–∏–≤–æ—Ç–Ω—ã–µ":
                    self.bot.send_message(
                        chat_id,
                        "üè† <b>–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏—â—É—Ç –¥–æ–º</b>\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n"
                        "üê± <b>–ö–æ—à–∫–∏</b> - –∫–æ—Ç—è—Ç–∞ –∏ –≤–∑—Ä–æ—Å–ª—ã–µ –∫–æ—à–∫–∏\n"
                        "üê∂ <b>–°–æ–±–∞–∫–∏</b> - —â–µ–Ω–∫–∏ –∏ –≤–∑—Ä–æ—Å–ª—ã–µ —Å–æ–±–∞–∫–∏\n\n"
                        "üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b> - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ",
                        parse_mode="HTML",
                        reply_markup=self.get_animals_keyboard()
                    )
                
                elif text == "üê± –ö–æ—à–∫–∏":
                    self.send_animals_list(chat_id, 'cats')
                
                elif text == "üê∂ –°–æ–±–∞–∫–∏":
                    self.send_animals_list(chat_id, 'dogs')
                
                elif text == "üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
                    self.bot.send_message(
                        chat_id,
                        f"üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –∂–∏–≤–æ—Ç–Ω–æ–º</b>\n\n"
                        f"üì¢ <b>–ì—Ä—É–ø–ø–∞:</b> <a href='{self.parser.group['url']}'>{self.parser.group['username']}</a>\n\n"
                        f"‚úèÔ∏è <b>–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n"
                        f"1Ô∏è‚É£ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ\n"
                        f"2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
                        f"3Ô∏è‚É£ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
                        f"üìã <b>–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:</b>\n"
                        f"üîπ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–Ω–µ—Å–∫–æ–ª—å–∫–æ)\n"
                        f"üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–∞–∑–º–µ—Ä\n"
                        f"üîπ –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –ø—Ä–∏–≤—ã—á–∫–∏\n"
                        f"üîπ –ó–¥–æ—Ä–æ–≤—å–µ (–ø—Ä–∏–≤–∏–≤–∫–∏, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è)\n"
                        f"üîπ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏\n"
                        f"üîπ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (—Ä–∞–π–æ–Ω)\n\n"
                        f"üí° <b>–°–æ–≤–µ—Ç:</b> –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ö–æ–∑—è–µ–≤ –±—ã—Å—Ç—Ä–µ–µ!",
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                
                elif text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è":
                    self.bot.send_message(
                        chat_id,
                        "üè• <b>–°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø –ñ–ò–í–û–¢–ù–´–•</b>\n\n"
                        "üí∞ <b>–ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è:</b>\n"
                        "‚Ä¢ –ö–æ—à–∫–∏: –æ—Ç 2500‚ÇΩ –¥–æ 4000‚ÇΩ\n"
                        "‚Ä¢ –°–æ–±–∞–∫–∏: –æ—Ç 4000‚ÇΩ –¥–æ 7000‚ÇΩ\n"
                        "‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç: –æ–ø–µ—Ä–∞—Ü–∏—è, –Ω–∞—Ä–∫–æ–∑, —É—Ö–æ–¥\n\n"
                        "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è:</b>\n"
                        "‚Ä¢ –î–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
                        "‚Ä¢ –ü–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ø–æ–º–æ—â–∏\n"
                        "‚Ä¢ –û—á–µ—Ä–µ–¥—å: 2-4 –Ω–µ–¥–µ–ª–∏\n\n"
                        "üìû <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è:</b>\n"
                        "‚Ä¢ –í–æ–ª–æ–Ω—Ç–µ—Ä—ã: +7 978 144-90-70\n"
                        "‚Ä¢ –ö–ª–∏–Ω–∏–∫–∏: —Å–º. —Ä–∞–∑–¥–µ–ª –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
                        "üí° <b>–°–∫–∏–¥–∫–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º –¥–æ 20%</b>",
                        parse_mode="HTML"
                    )
                
                elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                    self.bot.send_message(
                        chat_id,
                        "üìû <b>–ö–û–ù–¢–ê–ö–¢–´</b>\n\n"
                        "üë• <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:</b>\n"
                        "üê± –ö–æ—à–∫–∏: +7 978 144-90-70\n"
                        "üê∂ –°–æ–±–∞–∫–∏: +7 978 000-11-22\n"
                        "üè• –õ–µ—á–µ–Ω–∏–µ: +7 978 000-33-44\n\n"
                        "üè• <b>–í–µ—Ç–∫–ª–∏–Ω–∏–∫–∏-–ø–∞—Ä—Ç–Ω–µ—Ä—ã:</b>\n"
                        "‚Ä¢ '–ê–π–±–æ–ª–∏—Ç': +7 978 555-66-77\n"
                        "‚Ä¢ '–í–µ—Ç–ú–µ–¥–∏—Ü–∏–Ω–∞': +7 978 888-99-00\n"
                        "‚Ä¢ '–ó–æ–æ–¥–æ–∫—Ç–æ—Ä': +7 978 111-22-33\n\n"
                        f"üì¢ <b>–ì—Ä—É–ø–ø–∞:</b> <a href='{self.parser.group['url']}'>{self.parser.group['username']}</a>\n\n"
                        "üìß <b>Email:</b> lapki.ruchki.yalta@gmail.com\n\n"
                        "üí≥ <b>–ö–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏:</b>\n2202 2020 1234 5678",
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                
                elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
                    self.bot.send_message(
                        chat_id,
                        "‚ÑπÔ∏è <b>–ü–†–û–ï–ö–¢ '–õ–ê–ü–ö–ò-–†–£–ß–ö–ò –Ø–õ–¢–ê'</b>\n\n"
                        "üéØ <b>–ù–∞—à–∞ –º–∏—Å—Å–∏—è:</b>\n"
                        "–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã –∏ –ö—Ä—ã–º–∞\n\n"
                        "üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
                        "üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 1000+ –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
                        "üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ: 500+ –ø–∏—Ç–æ–º—Ü–µ–≤\n" 
                        "üîπ –í—ã–ª–µ—á–µ–Ω–æ: 300+ –±–æ–ª—å–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
                        "üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 60+ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤\n\n"
                        "ü§ù <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:</b>\n"
                        "‚Ä¢ –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
                        "‚Ä¢ –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º\n"
                        "‚Ä¢ –õ–µ—á–µ–Ω–∏–µ –±–æ–ª—å–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
                        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤\n"
                        "‚Ä¢ –ü—Ä–æ—Å–≤–µ—Ç–∏—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞\n\n"
                        "üíù <b>–ö–∞–∫ –ø–æ–º–æ—á—å:</b>\n"
                        "‚Ä¢ –í–∑—è—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –¥–æ–º–æ–π\n"
                        "‚Ä¢ –°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º\n"
                        "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                        "‚Ä¢ –†–µ–ø–æ—Å—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                        f"üì¢ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å:</b> <a href='{self.parser.group['url']}'>{self.parser.group['username']}</a>",
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                
                elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
                    # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
                    self.parser.posts_cache = []
                    self.parser.last_update = None
                    
                    self.bot.send_message(
                        chat_id,
                        "üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö...\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
                    )
                    
                    try:
                        posts = self.parser.get_cached_posts()
                        self.bot.send_message(
                            chat_id,
                            f"‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                            f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(posts)}\n"
                            f"üê± –ö–æ—à–∫–∏: {len([p for p in posts if p['type'] == 'cats'])}\n"
                            f"üê∂ –°–æ–±–∞–∫–∏: {len([p for p in posts if p['type'] == 'dogs'])}"
                        )
                    except Exception as e:
                        self.bot.send_message(
                            chat_id,
                            "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                        )
                
                elif text == "üîô –ù–∞–∑–∞–¥":
                    self.bot.send_message(
                        chat_id,
                        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=self.get_main_keyboard()
                    )
                
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                    self.bot.send_message(
                        chat_id,
                        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏:\n"
                        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
                        "/update - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                        reply_markup=self.get_main_keyboard()
                    )
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '{text}': {e}")
                self.bot.send_message(
                    chat_id,
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                )

    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                else:
                    return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook error: {e}")
                return 'Internal server error', 500
        
        @self.app.route('/')
        def home():
            uptime = datetime.now() - self.stats["start_time"]
            return jsonify({
                "status": "üêæ Animal Adoption Bot Active",
                "group": f"@{self.parser.group['username']}",
                "time": datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                "uptime_hours": round(uptime.total_seconds() / 3600, 1),
                "users": len(self.stats["users"]),
                "messages": self.stats["messages"],
                "cached_posts": len(self.parser.posts_cache),
                "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None
            })
        
        @self.app.route('/api/posts')
        def get_posts_api():
            try:
                posts = self.parser.get_cached_posts()
                return jsonify({
                    "status": "success",
                    "total": len(posts),
                    "cats": len([p for p in posts if p['type'] == 'cats']),
                    "dogs": len([p for p in posts if p['type'] == 'dogs']),
                    "with_photos": sum(1 for p in posts if p['photo_url']),
                    "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None,
                    "posts": posts
                })
            except Exception as e:
                logger.error(f"API error: {e}")
                return jsonify({"status": "error", "message": str(e)}), 500
        
        @self.app.route('/api/update')
        def force_update_api():
            try:
                self.parser.posts_cache = []
                self.parser.last_update = None
                posts = self.parser.get_group_posts()
                
                return jsonify({
                    "status": "updated",
                    "timestamp": datetime.now().isoformat(),
                    "posts_count": len(posts),
                    "cats": len([p for p in posts if p['type'] == 'cats']),
                    "dogs": len([p for p in posts if p['type'] == 'dogs'])
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
        
        @self.app.route('/health')
        def health_check():
            return jsonify({
                "status": "healthy",
                "timestamp": datetime.now().isoformat(),
                "parser_working": bool(self.parser.posts_cache),
                "bot_token": bool(self.token)
            })

    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –¥–µ–ø–ª–æ—è"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            webhook_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=webhook_url)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Animal Adoption Bot –¥–ª—è –≥—Ä—É–ø–ø—ã lapki_ruchki_yalta...")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            logger.info("üì• –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã...")
            posts = self.parser.get_cached_posts()
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if self.webhook_url:
            # –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º —Å webhook
            if self.setup_webhook():
                logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
                self.app.run(
                    host='0.0.0.0', 
                    port=self.port, 
                    debug=False,
                    use_reloader=False
                )
            else:
                logger.error("üö® –û—à–∏–±–∫–∞ webhook! –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling —Ä–µ–∂–∏–º")
                self.bot.polling(none_stop=True, interval=1)
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å polling
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
            try:
                self.bot.polling(none_stop=True, interval=1, timeout=60)
            except KeyboardInterrupt:
                logger.info("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ Ctrl+C")
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs('logs', exist_ok=True)
    os.makedirs('temp', exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
    file_handler = logging.FileHandler('logs/bot.log', encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    logging.getLogger().addHandler(file_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        bot = AnimalBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        exit(1)

