import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import asyncio
from telethon import TelegramClient
from telethon.tl.types import Channel
import re
from typing import Dict, List, Optional, Union

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramChannelParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
    
    def __init__(self):
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è Telegram API (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://my.telegram.org)
        self.api_id = os.environ.get('TELEGRAM_API_ID')
        self.api_hash = os.environ.get('TELEGRAM_API_HASH')
        self.phone = os.environ.get('TELEGRAM_PHONE')  # –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
        self.channel_username = 'Lapki_ruchki_Yalta_help'  # –±–µ–∑ @
        self.channel_url = 'https://t.me/Lapki_ruchki_Yalta_help'
        
        self.client = None
        self.posts_cache = []
        self.last_update = None
        
    async def init_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if not all([self.api_id, self.api_hash]):
                logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH")
                return False
                
            self.client = TelegramClient('bot_session', self.api_id, self.api_hash)
            await self.client.start(phone=self.phone)
            logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    async def get_channel_posts(self, limit: int = 3) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            if not self.client:
                if not await self.init_client():
                    return self.get_mock_posts()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel = await self.client.get_entity(self.channel_username)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(channel, limit=limit*2)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
            posts = []
            for message in messages:
                if not message.text:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    continue
                    
                # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç
                post_data = await self.parse_post(message)
                if post_data and self.is_cat_related(post_data['text']):
                    posts.append(post_data)
                    
                if len(posts) >= limit:
                    break
            
            self.posts_cache = posts
            self.last_update = datetime.now()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞")
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return self.get_mock_posts()
    
    async def parse_post(self, message) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç"""
        try:
            text = message.text or ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            post_data = {
                'id': message.id,
                'text': text,
                'date': message.date.strftime('%d.%m.%Y %H:%M'),
                'url': f"{self.channel_url}/{message.id}",
                'photo': None,
                'title': self.extract_title(text),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text)
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            if message.photo:
                # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
                post_data['has_photo'] = True
            
            return post_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞: {e}")
            return None
    
    def extract_title(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        lines = text.split('\n')
        for line in lines[:3]:  # –°–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
            line = line.strip()
            if line and len(line) > 10:
                # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                if len(title) > 50:
                    title = title[:50] + "..."
                return title or "–ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º"
        return "–ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º"
    
    def extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
        clean_text = re.sub(r'@\w+|https?://\S+|\+?\d[\d\s\-\(\)]+', '', text)
        
        if len(clean_text) > 200:
            return clean_text[:200] + "..."
        return clean_text
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
        phone_pattern = r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}'
        phones = re.findall(phone_pattern, text)
        
        # –ò—â–µ–º —é–∑–µ—Ä–Ω–µ–π–º—ã
        username_pattern = r'@\w+'
        usernames = re.findall(username_pattern, text)
        
        contacts = []
        if phones:
            contacts.extend(phones[:1])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        if usernames:
            contacts.extend(usernames[:1])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π username
            
        return ' ‚Ä¢ '.join(contacts) if contacts else "–°–º. –≤ –∫–∞–Ω–∞–ª–µ"
    
    def is_cat_related(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –∫–æ—à–∫–∞–º"""
        cat_keywords = [
            '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É',
            '–∫–∞—Å—Ç—Ä', '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏—Ç', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º',
            '–∫–æ—Ç—è—Ç–∞', '–º–∞–º–∞-–∫–æ—à–∫–∞', '–±–µ—Ä–µ–º–µ–Ω–Ω–∞—è'
        ]
        
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in cat_keywords)
    
    def get_mock_posts(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"""
        return [
            {
                'id': 1001,
                'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π –∏ –ª–∞—Å–∫–æ–≤—ã–π.',
                'date': '03.08.2025 14:30',
                'url': f'{self.channel_url}/1001',
                'contact': '@volunteer1 ‚Ä¢ +7 978 123-45-67',
                'has_photo': True
            },
            {
                'id': 1002,
                'title': 'üò∫ –ö–æ—à–µ—á–∫–∞ –ú—É—Å—è —Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞',
                'description': '–í–æ–∑—Ä–∞—Å—Ç: 1 –≥–æ–¥, –¥–µ–≤–æ—á–∫–∞, —Ç—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–∞—è. –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞, –ø—Ä–∏–≤–∏—Ç–∞, –æ—á–µ–Ω—å —Å–ø–æ–∫–æ–π–Ω–∞—è.',
                'date': '03.08.2025 12:15',
                'url': f'{self.channel_url}/1002',
                'contact': '@volunteer2',
                'has_photo': True
            },
            {
                'id': 1003,
                'title': 'üêà –í–∑—Ä–æ—Å–ª—ã–π –∫–æ—Ç –ë–∞—Ä—Å–∏–∫',
                'description': '–í–æ–∑—Ä–∞—Å—Ç: 3 –≥–æ–¥–∞, –º–∞–ª—å—á–∏–∫, —Å–µ—Ä—ã–π –ø–æ–ª–æ—Å–∞—Ç—ã–π. –ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã.',
                'date': '02.08.2025 18:45',
                'url': f'{self.channel_url}/1003',
                'contact': '+7 978 987-65-43',
                'has_photo': False
            }
        ]
    
    def get_cached_posts(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        # –ï—Å–ª–∏ –∫—ç—à —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
        if (self.last_update and 
            (datetime.now() - self.last_update).seconds > 1800):
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                posts = loop.run_until_complete(self.get_channel_posts())
                loop.close()
                return posts
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞: {e}")
                return jsonify({"status": "error", "message": str(e)}), 500
    
    def setup_webhook(self) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url, max_connections=10)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Cat Helper Bot...")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞
        try:
            logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞–Ω–∞–ª–∞...")
            posts = self.channel_parser.get_cached_posts()
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫—ç—à–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        
        if self.setup_webhook():
            logger.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            logger.info(f"üì¢ –ö–∞–Ω–∞–ª: {self.channel_parser.channel_url}")
            self.app.run(host='0.0.0.0', port=self.port, debug=False)
        else:
            logger.error("üö® Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

# üöÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    bot = CatBot()
    bot.run():
                pass
        
        return self.posts_cache if self.posts_cache else self.get_mock_posts()

class ContentManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –±–æ—Ç–∞"""
    
    def __init__(self, assets_dir: str = "assets"):
        self.assets_dir = assets_dir
        self.texts = {}
        self.images = {}
        self.load_all_content()
    
    def load_text(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ HTML —Ñ–∞–π–ª–∞"""
        try:
            path = os.path.join(self.assets_dir, filename)
            with open(path, encoding="utf-8") as f:
                return f.read()
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return f"–ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑ {filename} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    
    def load_all_content(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if not os.path.exists(self.assets_dir):
            logger.warning(f"üìÅ –ü–∞–ø–∫–∞ {self.assets_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            os.makedirs(self.assets_dir, exist_ok=True)
            return
        
        try:
            for filename in os.listdir(self.assets_dir):
                if filename.endswith('.html'):
                    key = filename.replace('.html', '')
                    self.texts[key] = self.load_text(filename)
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç: {filename} -> {key}")
                elif filename.endswith(('.jpg', '.jpeg', '.png')):
                    key = filename.split('.')[0]
                    self.images[key] = os.path.join(self.assets_dir, filename)
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename} -> {key}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    def get_text(self, key: str, default: str = "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É"""
        return self.texts.get(key, default)
    
    def get_image_path(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–æ –∫–ª—é—á—É"""
        return self.images.get(key)

class DatabaseManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, db_file: str = "user_data.json"):
        self.db_file = db_file
        self.data = self.load_data()
    
    def load_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.db_file):
                with open(self.db_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"users": {}, "statistics": {"total_users": 0, "messages_sent": 0}}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.db_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def add_user(self, user_id: int, username: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        if user_id_str not in self.data["users"]:
            self.data["users"][user_id_str] = {
                "username": username,
                "first_seen": datetime.now().isoformat(),
                "last_activity": datetime.now().isoformat(),
                "message_count": 0
            }
            self.data["statistics"]["total_users"] += 1
            logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})")
        else:
            self.data["users"][user_id_str]["last_activity"] = datetime.now().isoformat()
        
        self.data["users"][user_id_str]["message_count"] += 1
        self.data["statistics"]["messages_sent"] += 1
        self.save_data()

class CatBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.content_manager = ContentManager()
        self.db_manager = DatabaseManager()
        self.channel_parser = TelegramChannelParser()
        self.app = Flask(__name__)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = (
            os.environ.get('RAILWAY_STATIC_URL') or 
            os.environ.get('RAILWAY_PUBLIC_DOMAIN') or
            os.environ.get('WEBHOOK_URL')
        )
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_message_with_image(self, chat_id: int, text: str, image_key: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ"""
        try:
            if image_key:
                image_path = self.content_manager.get_image_path(image_key)
                if image_path and os.path.exists(image_path):
                    with open(image_path, 'rb') as photo:
                        self.bot.send_photo(
                            chat_id,
                            photo,
                            caption=text,
                            parse_mode="HTML",
                            disable_web_page_preview=True
                        )
                        return True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_channel_posts(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ –æ –∫–æ—à–∫–∞—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞
            posts = self.channel_parser.get_cached_posts()
            
            if not posts:
                self.send_message_with_image(
                    chat_id,
                    "üòø –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –∫–æ—à–∫–∞—Ö.\n\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é: {self.channel_parser.channel_url}"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header_text = f"""üê± <b>–ö–û–®–ö–ò –ò–©–£–¢ –î–û–ú</b>

üì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞:
<a href="{self.channel_parser.channel_url}">–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞ –ø–æ–º–æ—â—å</a>

‚¨áÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(posts)} –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"""
            
            self.send_message_with_image(chat_id, header_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
            for i, post in enumerate(posts, 1):
                post_text = f"""{'üî∏' if i == 1 else 'üîπ'} <b>{post['title']}</b>

üìù {post['description']}

üìÖ {post['date']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {post['contact']}

üîó <a href="{post['url']}">–°–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>
{'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' if i < len(posts) else ''}"""
                
                self.send_message_with_image(chat_id, post_text)
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            footer_text = f"""üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å –∫–æ—à–∫–∞–º:</b>

üè† <b>–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫–æ—à–∫—É?</b>
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<a href="{self.channel_parser.channel_url}">–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞ –ø–æ–º–æ—â—å</a>

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ:</b>
–†–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ"""
            
            self.send_message_with_image(chat_id, footer_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞: {e}")
            self.send_message_with_image(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
                f"üì¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ:\n"
                f"{self.channel_parser.channel_url}"
            )
    
    def get_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        return markup
    
    def get_back_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.db_manager.add_user(message.from_user.id, message.from_user.username)
            self.send_message_with_image(
                message.chat.id,
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ª–∏—á–Ω—ã–º –∫–æ—à–∫–∞–º!</b>\n\n"
                "üêæ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é:\n\n"
                "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏\n"
                "üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∫–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º\n"
                "üö® <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å</b> - —Å—Ä–æ—á–Ω–∞—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å\n"
                "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏\n"
                "‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            self.bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['update_posts'])
        def update_posts_handler(message):
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
            admin_ids = [int(x) for x in os.environ.get('ADMIN_IDS', '').split(',') if x.strip()]
            if message.from_user.id not in admin_ids:
                return
            
            try:
                # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
                self.channel_parser.posts_cache = []
                self.channel_parser.last_update = None
                
                self.send_message_with_image(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...")
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                posts = loop.run_until_complete(self.channel_parser.get_channel_posts())
                loop.close()
                
                self.send_message_with_image(
                    message.chat.id, 
                    f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
                self.send_message_with_image(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        @self.bot.message_handler(func=lambda m: True)
        def message_handler(message):
            self.db_manager.add_user(message.from_user.id, message.from_user.username)
            self.handle_message(message)
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = message.text
        chat_id = message.chat.id
        
        try:
            if text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ":
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add("üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º")
                markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üîô –ù–∞–∑–∞–¥")
                
                self.bot.send_message(
                    chat_id,
                    "üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—à–µ–∫</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
                    "üê± <b>–ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º</b> - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                    "üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b> - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                    reply_markup=markup,
                    parse_mode="HTML"
                )
            
            elif text == "üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞
                self.send_channel_posts(chat_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
                self.bot.send_message(
                    chat_id,
                    "–ß—Ç–æ –µ—â–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    reply_markup=self.get_back_keyboard()
                )
            
            elif text == "üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
                channel_info = f"""üìù <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</b>

üì¢ <b>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>
<a href="{self.channel_parser.channel_url}">–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞ –ø–æ–º–æ—â—å</a>

‚úçÔ∏è <b>–°–ø–æ—Å–æ–±—ã –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>

1Ô∏è‚É£ <b>–ù–∞–ø–∏—Å–∞—Ç—å –≤ –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é</b>
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

2Ô∏è‚É£ <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏:</b>
   ‚Ä¢ –ê–Ω–Ω–∞ (–ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ): +7 978 000-00-01
   ‚Ä¢ Telegram –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: @adoption_coordinator

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>
üîπ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –æ–∫—Ä–∞—Å
üîπ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è (–ø—Ä–∏–≤–∏–≤–∫–∏, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è)
üîπ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
üîπ –ò—Å—Ç–æ—Ä–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–æ—Ç–∫—É–¥–∞ –≤–∑—è–ª–æ—Å—å)

üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>
‚úÖ –ß–µ—Å—Ç–Ω–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä
‚úÖ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º
‚úÖ –î–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚úÖ –û—Ç–≤–µ—á–∞–π—Ç–µ –±—ã—Å—Ç—Ä–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ö–æ–∑—è–µ–≤
‚úÖ –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏

ü§ù <b>–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –ø–æ–º–æ–≥—É—Ç:</b>
‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–æ—Ä–æ—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –°–¥–µ–ª–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ –ù–∞–π—Ç–∏ –ø–µ—Ä–µ–¥–µ—Ä–∂–∫—É –Ω–∞ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ö–æ–∑—è–µ–≤

üì± <b>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞–Ω–∞–ª–æ–º:</b>
–í –∫–∞–Ω–∞–ª–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤—É."""

                self.send_message_with_image(chat_id, channel_info)
            
            elif text == "üîô –ù–∞–∑–∞–¥":
                self.bot.send_message(
                    chat_id,
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=self.get_main_keyboard()
                )
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏...
            # (–¥–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                self.bot.send_message(
                    chat_id,
                    "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                    "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞",
                    reply_markup=self.get_main_keyboard()
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.send_message_with_image(
                chat_id, 
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            stats = self.db_manager.data["statistics"]
            return jsonify({
                "status": "ü§ñ Cat Helper Bot is running!",
                "time": datetime.now().strftime('%H:%M:%S'),
                "date": datetime.now().strftime('%d.%m.%Y'),
                "users": stats["total_users"],
                "messages": stats["messages_sent"],
                "channel": self.channel_parser.channel_url
            })
        
        @self.app.route('/channel_posts')
        def channel_posts_api():
            """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞"""
            try:
                posts = self.channel_parser.get_cached_posts()
                return jsonify({
                    "status": "ok",
                    "posts_count": len(posts),
                    "posts": posts,
                    "channel_url": self.channel_parser.channel_url,
                    "last_update": self.channel_parser.last_update.isoformat() if self.channel_parser.last_update else None
                })
            except
