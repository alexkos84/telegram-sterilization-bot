import os
import telebot
from telebot import types
from datetime import datetime
import time
import logging
import re
import requests
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv('TELEGRAM_TOKEN'))

# –ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤
class ChannelParser:
    CHANNELS = {
        "cats": {
            "username": "Lapki_ruchki_Yalta_help",
            "url": "https://t.me/Lapki_ruchki_Yalta_help",
            "keywords": ["–∫–æ—Ç", "–∫–æ—à–∫", "–∫–æ—Ç–µ–Ω", "–∫–æ—Ç–∏–∫"]
        },
        "dogs": {
            "username": "yalta_aninmals",
            "url": "https://t.me/yalta_aninmals",
            "keywords": ["—Å–æ–±–∞–∫", "—â–µ–Ω", "–ø–µ—Å", "–≥–∞–≤"]
        }
    }

    def get_posts(self, animal_type: str, limit: int = 3) -> list:
        try:
            channel = self.CHANNELS[animal_type]
            url = f"https://t.me/s/{channel['username']}"
            response = requests.get(url, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            posts = []
            for message in soup.find_all('div', class_='tgme_widget_message')[:limit]:
                text_div = message.find('div', class_='tgme_widget_message_text')
                if text_div:
                    text = text_div.get_text('\n').strip()
                    if any(kw in text.lower() for kw in channel['keywords']):
                        post_id = message.get('data-post', '').split('/')[-1]
                        photo_style = message.find('a', class_='tgme_widget_message_photo_wrap').get('style', '')
                        photo_url = re.search(r"url\('(.*?)'\)", photo_style).group(1) if photo_style else None
                        
                        posts.append({
                            'text': text,
                            'photo_url': photo_url,
                            'url': f"{channel['url']}/{post_id}"
                        })
            
            return posts if posts else self._get_mock_posts(animal_type)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
            return self._get_mock_posts(animal_type)

    def _get_mock_posts(self, animal_type: str) -> list:
        if animal_type == "cats":
            return [{
                'text': "–ö–æ—Ç–µ–Ω–æ–∫ –∏—â–µ—Ç –¥–æ–º. –ú–∞–ª—å—á–∏–∫, 2 –º–µ—Å—è—Ü–∞.",
                'photo_url': None,
                'url': "https://t.me/Lapki_ruchki_Yalta_help/123"
            }]
        else:
            return [{
                'text': "–©–µ–Ω–æ–∫ –∏—â–µ—Ç —Ö–æ–∑—è–∏–Ω–∞. –î–µ–≤–æ—á–∫–∞, 3 –º–µ—Å—è—Ü–∞.",
                'photo_url': None,
                'url': "https://t.me/yalta_aninmals/456"
            }]

parser = ChannelParser()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.row("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        
        bot.send_message(
            message.chat.id,
            "üêæ <b>–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ø–ª—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=markup,
            parse_mode="HTML"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")

@bot.message_handler(func=lambda m: m.text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
def adoption(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏")
    markup.add("üîô –ù–∞–∑–∞–¥")
    
    bot.send_message(
        message.chat.id,
        "üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup,
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda m: m.text in ["üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏"])
def show_animals(message):
    animal_type = "cats" if message.text == "üê± –ö–æ—à–∫–∏" else "dogs"
    posts = parser.get_posts(animal_type)
    
    emoji = "üê±" if animal_type == "cats" else "üê∂"
    bot.send_message(
        message.chat.id,
        f"{emoji} <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>",
        parse_mode="HTML"
    )
    
    for post in posts:
        try:
            if post['photo_url']:
                bot.send_photo(
                    message.chat.id,
                    post['photo_url'],
                    caption=f"{post['text']}\n\nüîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>",
                    parse_mode="HTML"
                )
            else:
                bot.send_message(
                    message.chat.id,
                    f"{post['text']}\n\nüîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>",
                    parse_mode="HTML"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")

@bot.message_handler(func=lambda m: m.text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
def sterilization(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üí∞ –ü–ª–∞—Ç–Ω–∞—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è")
    markup.add("üîô –ù–∞–∑–∞–¥")
    
    bot.send_message(
        message.chat.id,
        "üè• <b>–ü—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=markup,
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda m: m.text in ["üí∞ –ü–ª–∞—Ç–Ω–∞—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"])
def show_sterilization(message):
    text = (
        "–ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è:\n\n"
        "–ö–ª–∏–Ω–∏–∫–∞ '–ê–π–±–æ–ª–∏—Ç': 1500-2000 —Ä—É–±\n"
        "–¢–µ–ª: +7 978 123-45-67" 
        if message.text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è" else
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è:\n\n"
        "–î–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
        "–ó–∞–ø–∏—Å—å: +7 978 765-43-21"
    )
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def back(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
    markup.row("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def contacts(message):
    bot.send_message(
        message.chat.id,
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ –∫–æ—à–∫–∞–º: @cat_helper\n"
        "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ —Å–æ–±–∞–∫–∞–º: @dog_helper\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 978 111-22-33",
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def about(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
        "–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã\n"
        "–†–∞–±–æ—Ç–∞–µ–º —Å 2020 –≥–æ–¥–∞",
        parse_mode="HTML"
    )

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            time.sleep(15)
