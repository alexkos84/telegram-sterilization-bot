import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AdvancedAnimalParser:
    """–ü–∞—Ä—Å–µ—Ä –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –Ø–ª—Ç–µ"""
    
    def __init__(self):
        self.channels = [
            {
                'username': 'cats_yalta',
                'url': 'https://t.me/cats_yalta',
                'type': 'cats',
                'title': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)'
            },
            {
                'username': 'cats_yalta_group',
                'url': 'https://t.me/cats_yalta_group',
                'type': 'cats',
                'title': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)'
            },
            {
                'username': 'dogs_yalta',
                'url': 'https://t.me/dogs_yalta',
                'type': 'dogs',
                'title': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)'
            },
            {
                'username': 'dogs_yalta_group',
                'url': 'https://t.me/dogs_yalta_group',
                'type': 'dogs',
                'title': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)'
            }
        ]
        self.posts_cache = {'cats': [], 'dogs': []}
        self.last_update = {'cats': None, 'dogs': None}
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.animal_keywords = {
            'cats': [
                '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É',
                '–∫–∏—Å–∞', '–∫–∏—Å', '–º—É—Ä–∫–∞', '–≤–∞—Å—å–∫–∞', '–±–∞—Ä—Å–∏–∫',
                '–∫–æ—à–∞—á–∏–π', '–∫–æ—à–∞—á—å—è', '–∫–æ—à–∞—á—å–µ'
            ],
            'dogs': [
                '—Å–æ–±–∞–∫', '–ø–µ—Å', '–ø—Å–∏–Ω', '—â–µ–Ω', '–≥–∞–≤',
                '–ª–∞–±—Ä–∞–¥–æ—Ä', '–æ–≤—á–∞—Ä–∫–∞', '–¥–≤–æ—Ä–Ω—è–∂–∫–∞', '–¥–≤–æ—Ä–Ω—è–≥–∞',
                '–±–æ–±–∏–∫', '—à–∞—Ä–∏–∫', '—Ä–µ–∫—Å', '–¥–∂–µ–∫',
                '—Å–æ–±–∞—á–∏–π', '—Å–æ–±–∞—á—å—è', '—Å–æ–±–∞—á—å–µ'
            ]
        }
    
    def load_vet_clinics(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –≤–µ—Ç–∫–ª–∏–Ω–∏–∫ –∏–∑ JSON"""
        try:
            with open('vet_clinics.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫: {e}")
            return {"–º–µ—Å—Ç–∞": {}, "—Å–∏–Ω–æ–Ω–∏–º—ã": {}}
    
    def get_channel_posts(self, animal_type: str = 'cats', limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∏–ø–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        try:
            posts = []
            relevant_channels = [ch for ch in self.channels if ch['type'] == animal_type]
            
            for channel in relevant_channels:
                web_url = f'https://t.me/s/{channel["username"]}'
                logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ {animal_type} –ø–æ—Å—Ç–æ–≤ —Å {web_url}")
                
                try:
                    response = requests.get(web_url, headers={
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                    }, timeout=15)
                    response.raise_for_status()
                    
                    soup = BeautifulSoup(response.content, 'html.parser')
                    message_divs = soup.find_all('div', class_='tgme_widget_message')
                    
                    for div in message_divs[:limit*2]:
                        post_data = self.parse_message_div(div, channel)
                        if post_data and self.is_animal_related(post_data.get('text', ''), animal_type):
                            posts.append(post_data)
                            if len(posts) >= limit:
                                break
                                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel['username']}: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            posts.sort(key=lambda x: x.get('timestamp', 0), reverse=True)
            
            if posts:
                self.posts_cache[animal_type] = posts[:limit]
                self.last_update[animal_type] = datetime.now()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} {animal_type} –ø–æ—Å—Ç–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ {animal_type} –ø–æ—Å—Ç–æ–≤")
                
            return posts[:limit] or self.get_mock_posts(animal_type)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {animal_type}: {e}")
            return self.get_mock_posts(animal_type)
    
    def parse_message_div(self, div, channel) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç, –∏–∑–≤–ª–µ–∫–∞—è —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞"""
        try:
            post_id = div.get('data-post', '').split('/')[-1] or 'unknown'
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            # –î–∞—Ç–∞
            timestamp = 0
            date_elem = div.find('time', datetime=True)
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    date_str = dt.strftime('%d.%m.%Y %H:%M')
                    timestamp = dt.timestamp()
                except:
                    pass
            
            # –ú–µ–¥–∏–∞
            photo_url = None
            video_url = None
            
            photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and photo_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            video_wrap = div.find('div', class_='tgme_widget_message_video_wrap')
            if video_wrap and video_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", video_wrap['style'])
                if match:
                    video_url = match.group(1)
            
            if not text and not photo_url and not video_url:
                return None
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'timestamp': timestamp,
                'url': f"{channel['url']}/{post_id}" if post_id else channel['url'],
                'title': self.extract_title(text, channel['type']),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text),
                'photo_url': photo_url,
                'video_url': video_url,
                'has_media': bool(photo_url or video_url),
                'type': channel['type'],
                'channel': channel['title'],
                'channel_url': channel['url']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ div: {e}")
            return None
    
    def extract_title(self, text: str, animal_type: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        emoji = 'üê±' if animal_type == 'cats' else 'üê∂'
        animal_name = '–∫–æ—Ç–∏–∫' if animal_type == 'cats' else '–ø–µ—Å–∏–∫'
        
        lines = text.split('\n')
        for line in lines[:3]:
            line = line.strip()
            if line and len(line) > 5:
                title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                if len(title) > 50:
                    title = title[:50] + "..."
                return f"{emoji} {title}" or f"{emoji} {animal_name.title()} –∏—â–µ—Ç –¥–æ–º"
        return f"{emoji} {animal_name.title()} –∏—â–µ—Ç –¥–æ–º"
    
    def extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        clean_text = re.sub(r'@\w+|https?://\S+|\+?\d[\d\s\-\(\)]+', '', text)
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        if len(clean_text) > 200:
            return clean_text[:200] + "..."
        return clean_text or "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç–µ"
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        phone_pattern = r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}'
        phones = re.findall(phone_pattern, text)
        
        username_pattern = r'@\w+'
        usernames = re.findall(username_pattern, text)
        
        contacts = []
        if phones:
            contacts.extend(phones[:1])
        if usernames:
            contacts.extend(usernames[:1])
            
        return ' ‚Ä¢ '.join(contacts) if contacts else "–°–º. –≤ –≥—Ä—É–ø–ø–µ"
    
    def is_animal_related(self, text: str, animal_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        keywords = self.animal_keywords.get(animal_type, [])
        keywords.extend([
            '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º', '–ø–∏—Ç–æ–º–µ—Ü', '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏–≤–∫',
            '–ø–æ—Ç–µ—Ä—è–ª', '–Ω–∞—à–µ–ª', '–ø—Ä–æ–ø–∞–ª', '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è—à–∫–∞',
            '–∏—â–µ—Ç', '—Å–µ–º—å—é', '—Ö–æ–∑—è–∏–Ω', '–ø—Ä–∏—é—Ç'
        ])
        
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in keywords)
    
    def get_mock_posts(self, animal_type: str = 'cats') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã"""
        if animal_type == 'cats':
            return [
                {
                    'id': '1001',
                    'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π.',
                    'date': '03.08.2025 14:30',
                    'timestamp': time.time(),
                    'url': 'https://t.me/cats_yalta/1001',
                    'contact': '@volunteer1 ‚Ä¢ +7 978 123-45-67',
                    'photo_url': 'https://via.placeholder.com/600x400?text=–ö–æ—Ç–µ–Ω–æ–∫+–ú—É—Ä–∑–∏–∫',
                    'has_media': True,
                    'type': 'cats',
                    'channel': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞',
                    'channel_url': 'https://t.me/cats_yalta'
                }
            ]
        else:  # dogs
            return [
                {
                    'id': '2001',
                    'title': 'üê∂ –©–µ–Ω–æ–∫ –†–µ–∫—Å –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 3 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, –º–µ—Ç–∏—Å –æ–≤—á–∞—Ä–∫–∏. –ê–∫—Ç–∏–≤–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π.',
                    'date': '03.08.2025 15:20',
                    'timestamp': time.time(),
                    'url': 'https://t.me/dogs_yalta/2001',
                    'contact': '@volunteer2 ‚Ä¢ +7 978 765-43-21',
                    'photo_url': 'https://via.placeholder.com/600x400?text=–©–µ–Ω–æ–∫+–†–µ–∫—Å',
                    'has_media': True,
                    'type': 'dogs',
                    'channel': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞',
                    'channel_url': 'https://t.me/dogs_yalta'
                }
            ]
    
    def get_cached_posts(self, animal_type: str = 'cats') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        if (not self.last_update.get(animal_type) or 
            (datetime.now() - self.last_update[animal_type]).seconds > 3600):
            try:
                return self.get_channel_posts(animal_type)
            except:
                pass
        return self.posts_cache.get(animal_type, []) or self.get_mock_posts(animal_type)

class ImprovedPetBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AdvancedAnimalParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            post_text = (
                f"{emoji} <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üì¢ <a href='{post['channel_url']}'>{post['channel']}</a>"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_animal_posts(self, chat_id: int, animal_type: str = 'cats'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∏–ø–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                animal_name = '–∫–æ—Ç–∏–∫–∏' if animal_type == 'cats' else '—Å–æ–±–∞–∫–∏'
                emoji = 'üòø' if animal_type == 'cats' else 'üòî'
                channels = [ch['url'] for ch in self.parser.channels if ch['type'] == animal_type]
                
                self.bot.send_message(
                    chat_id,
                    f"{emoji} –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {animal_name}.\n\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—ã:\n" + 
                    '\n'.join(f"‚Ä¢ {url}" for url in channels)
                )
                return
            
            animal_name_caps = '–ö–û–¢–ò–ö–ò' if animal_type == 'cats' else '–°–û–ë–ê–ö–ò'
            emoji = 'üê±' if animal_type == 'cats' else 'üê∂'
            
            self.bot.send_message(
                chat_id,
                f"{emoji} <b>{animal_name_caps} –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø –Ø–ª—Ç—ã:",
                parse_mode="HTML"
            )
            
            for post in posts:
                self.send_post(chat_id, post)
                time.sleep(0.7)
            
            channels = [ch for ch in self.parser.channels if ch['type'] == animal_type]
            channels_text = '\n'.join(f"‚Ä¢ <a href='{ch['url']}'>{ch['title']}</a>" for ch in channels)
            
            self.bot.send_message(
                chat_id,
                f"üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å?</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞:</b>\n–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üì¢ <b>–ì—Ä—É–ø–ø—ã:</b>\n{channels_text}\n\n"
                "ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {animal_type} –ø–æ—Å—Ç–æ–≤: {e}")
            animal_name = '–∫–æ—Ç–∏–∫–æ–≤' if animal_type == 'cats' else '—Å–æ–±–∞–∫'
            channels = [ch['url'] for ch in self.parser.channels if ch['type'] == animal_type]
            
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {animal_name}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≥—Ä—É–ø–ø—ã:\n" + 
                '\n'.join(f"‚Ä¢ {url}" for url in channels)
            )

    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üè• –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∏", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        return markup
    
    def get_adoption_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º", "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup
    
    def get_sterilization_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup

    def send_vet_clinics(self, chat_id: int, city: str = '—è–ª—Ç–∞'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫"""
        try:
            clinics_data = self.parser.load_vet_clinics()
            city_clinics = clinics_data.get('–º–µ—Å—Ç–∞', {}).get(city, {})
            
            if not city_clinics:
                self.bot.send_message(
                    chat_id,
                    f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞—Ö –≤ –≥–æ—Ä–æ–¥–µ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                )
                return
            
            self.bot.send_message(
                chat_id,
                f"üè• <b>–í–ï–¢–ö–õ–ò–ù–ò–ö–ò {city.upper()}</b>\n\n"
                f"üìç –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–Ω–∏–∫: {len(city_clinics)}",
                parse_mode="HTML"
            )
            
            for clinic_name, info in city_clinics.items():
                clinic_text = f"üè• <b>{clinic_name.upper()}</b>\n\n"
                
                if '–∞–¥—Ä–µ—Å' in info:
                    clinic_text += f"üìç {info['–∞–¥—Ä–µ—Å']}\n"
                if '–≤—Ä–µ–º—è' in info:
                    clinic_text += f"üïí {info['–≤—Ä–µ–º—è']}\n"
                if '—Ç–µ–ª–µ—Ñ–æ–Ω' in info:
                    phones = info['—Ç–µ–ª–µ—Ñ–æ–Ω'] if isinstance(info['—Ç–µ–ª–µ—Ñ–æ–Ω'], list) else [info['—Ç–µ–ª–µ—Ñ–æ–Ω']]
                    clinic_text += f"üìû {' ‚Ä¢ '.join(phones)}\n"
                if '–≤—Ä–∞—á–∏' in info:
                    clinic_text += "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏:\n"
                    for doctor in info['–≤—Ä–∞—á–∏']:
                        if '–∏–º—è' in doctor:
                            clinic_text += f"  ‚Ä¢ {doctor['–∏–º—è']}"
                            if '—Ç–µ–ª' in doctor:
                                clinic_text += f" - {doctor['—Ç–µ–ª']}"
                            clinic_text += "\n"
                if '—É—Å–ª—É–≥–∏' in info:
                    clinic_text += f"üî¨ –£—Å–ª—É–≥–∏: {', '.join(info['—É—Å–ª—É–≥–∏'])}\n"
                if '–≤—ã–µ–∑–¥' in info and info['–≤—ã–µ–∑–¥']:
                    if isinstance(info['–≤—ã–µ–∑–¥'], dict) and '—Å—Ç–æ–∏–º–æ—Å—Ç—å' in info['–≤—ã–µ–∑–¥']:
                        clinic_text += f"üöó –í—ã–µ–∑–¥: {info['–≤—ã–µ–∑–¥']['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}\n"
                    else:
                        clinic_text += "üöó –í—ã–µ–∑–¥: –¥–∞\n"
                
                if '—Å—Å—ã–ª–∫–∞' in info:
                    clinic_text += f"üåê <a href='{info['—Å—Å—ã–ª–∫–∞']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
                
                self.bot.send_message(chat_id, clinic_text, parse_mode="HTML")
                time.sleep(0.5)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫: {e}")
            self.bot.send_message(
                chat_id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞—Ö"
            )

    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã!</b>

üêæ –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:

üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ü–µ–Ω—ã
üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∫–æ—à–∫–∏ –∏ —Å–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º  
üè• <b>–í–µ—Ç–∫–ª–∏–Ω–∏–∫–∏</b> - –∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['update_cats', 'update_dogs'])
        def update_handler(message):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
            if message.from_user.id not in [123456789]:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
                return
            
            animal_type = 'cats' if 'cats' in message.text else 'dogs'
            self.parser.posts_cache[animal_type] = []
            self.parser.last_update[animal_type] = None
            
            self.bot.send_message(message.chat.id, f"üîÑ –û–±–Ω–æ–≤–ª—è—é {animal_type} –ø–æ—Å—Ç—ã...")
            posts = self.parser.get_channel_posts(animal_type)
            self.bot.send_message(
                message.chat.id, 
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {len(posts)} {animal_type} –ø–æ—Å—Ç–æ–≤"
            )
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        @self.bot.message_handler(func=lambda m: m.text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def sterilization_handler(message):
            self.bot.send_message(
                message.chat.id,
                "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                parse_mode="HTML",
                reply_markup=self.get_sterilization_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        def adoption_handler(message):
            self.bot.send_message(
                message.chat.id,
                "üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:",
                parse_mode="HTML",
                reply_markup=self.get_adoption_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º")
        def cats_adoption_handler(message):
            self.send_animal_posts(message.chat.id, 'cats')
        
        @self.bot.message_handler(func=lambda m: m.text == "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        def dogs_adoption_handler(message):
            self.send_animal_posts(message.chat.id, 'dogs')
        
        @self.bot.message_handler(func=lambda m: m.text == "üè• –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∏")
        def vet_clinics_handler(message):
            self.send_vet_clinics(message.chat.id)
        
        @self.bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        def contacts_handler(message):
            contacts_text = """üìû <b>–ö–û–ù–¢–ê–ö–¢–´ –í–û–õ–û–ù–¢–ï–†–û–í</b>

üë• <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã:</b>
üê± –ü–æ –∫–æ—à–∫–∞–º: +7 978 144-90-70
üê∂ –ü–æ —Å–æ–±–∞–∫–∞–º: +7 978 000-00-02
üíâ –ü–æ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏: +7 978 000-00-03
üöë –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å: +7 978 000-00-04

üì± <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
üê± Telegram: @cats_yalta
üê∂ Telegram: @dogs_yalta
üì∑ Instagram: @yalta_animals"""
            
            self.bot.send_message(message.chat.id, contacts_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        def about_handler(message):
            about_text = """‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï "–ñ–ò–í–û–¢–ù–´–ï –Ø–õ–¢–´"</b>

üéØ <b>–ú–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∫–æ—à–∫–∞–º –∏ —Å–æ–±–∞–∫–∞–º –Ø–ª—Ç—ã

üìä <b>–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üê± –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ –∫–æ—à–µ–∫: 500+
üê∂ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ —Å–æ–±–∞–∫: 200+
üè† –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: 800+
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 50+

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:</b>
–ö–∞—Ä—Ç–∞ –°–±–µ—Ä–±–∞–Ω–∫: 2202 2020 0000 0000
–ö–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: 5536 9137 0000 0000

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ù–∞–ø–∏—à–∏—Ç–µ @animals_yalta_coordinator

üåê <b>–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:</b>
‚Ä¢ Telegram-–∫–∞–Ω–∞–ª—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –ë–∞–∑–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –ø–æ–º–æ—â–∏ –∂–∏–≤–æ—Ç–Ω—ã–º
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
            
            self.bot.send_message(message.chat.id, about_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def paid_sterilization_handler(message):
            paid_text = """üíµ <b>–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–ª–∏–Ω–∏–∫–∏:</b>

üîπ <b>–ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç"</b>
üìç —É–ª. –í–∞—Å–∏–ª—å–µ–≤–∞-–¢—Ä–µ–Ω—ë–≤–∞, 3/7
üí∞ –ö–æ—à–∫–∏: –æ—Ç 3000‚ÇΩ, –°–æ–±–∞–∫–∏: –æ—Ç 4500‚ÇΩ
üìû +7 (978) 869-73-80

üîπ <b>–ö–ª–∏–Ω–∏–∫–∞ "–î–æ–≤–µ—Ä–∏–µ"</b>
üìç —É–ª. –•–∞–ª—Ç—É—Ä–∏–Ω–∞, 52–ê
üí∞ –ö–æ—à–∫–∏: –æ—Ç 2800‚ÇΩ, –°–æ–±–∞–∫–∏: –æ—Ç 4000‚ÇΩ
üìû +7 (978) 256-15-01

üîπ <b>–í–µ—Ç—Ü–µ–Ω—Ç—Ä "–•–∞—Ç–∏–∫–æ"</b>
üìç —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 59
üí∞ –ö–æ—à–∫–∏: –æ—Ç 3200‚ÇΩ, –°–æ–±–∞–∫–∏: –æ—Ç 4800‚ÇΩ
üìû +7 (978) 725-91-59

üåü <b>–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥ –Ω–∞—Ä–∫–æ–∑–æ–º
‚úÖ –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ö–æ–¥
‚úÖ –ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã
‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞

üí° <b>–°–∫–∏–¥–∫–∏ –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤:</b>
üî∏ –ü—Ä–∏ –ø—Ä–µ–¥—ä—è–≤–ª–µ–Ω–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è - 20%
üî∏ –ü—Ä–∏ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö - 15%

üìû –ó–∞–ø–∏—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º –∫–ª–∏–Ω–∏–∫"""
            
            self.bot.send_message(message.chat.id, paid_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def free_sterilization_handler(message):
            free_text = """üÜì <b>–ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üèõÔ∏è <b>–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>
‚úÖ –î–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
‚úÖ –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç

üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
üîπ –°–ø—Ä–∞–≤–∫–∞ –æ —Å—Ç–∞—Ç—É—Å–µ (–±–µ–∑–¥–æ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ)
üîπ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å
üîπ –ë–∞–∑–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∑–∞ —Å–≤–æ–π —Å—á–µ—Ç

üè• <b>–£—á–∞—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–Ω–∏–∫–∏:</b>
‚Ä¢ –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞
üìç —É–ª. –°–∞—Ö–∞–Ω—è, 5
üìû +7 (978) 860-36-98
üïí –ü–Ω-–ü—Ç: 8:00-16:00

‚Ä¢ –ü–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ "–ó–∞–±–æ—Ç–∞"
üìç –ö–æ—Ä–µ–∏–∑, —É–ª. –ú–∞—è–∫–æ–≤—Å–∫–æ–≥–æ, 2–ë  
üìû +7 (978) 651-07-47
üí∞ –õ—å–≥–æ—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è

üìû <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è:</b>
–ö—É—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: +7 978 144-90-70

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
–ú–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –∑–∞–ø–∏—Å—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —É–ª–∏—á–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ –∏–∑ –ø—Ä–∏—é—Ç–æ–≤."""
            
            self.bot.send_message(message.chat.id, free_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        def submit_ad_handler(message):
            submit_text = """üìù <b>–ö–ê–ö –ü–û–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï</b>

üì¢ <b>–ö–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b>

üê± <b>–î–ª—è –∫–æ—à–µ–∫:</b>
‚Ä¢ <a href="https://t.me/cats_yalta">–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)</a>
‚Ä¢ <a href="https://t.me/cats_yalta_group">–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)</a>

üê∂ <b>–î–ª—è —Å–æ–±–∞–∫:</b>
‚Ä¢ <a href="https://t.me/dogs_yalta">–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–∫–∞–Ω–∞–ª)</a>
‚Ä¢ <a href="https://t.me/dogs_yalta_group">–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞ (–≥—Ä—É–ø–ø–∞)</a>

‚úçÔ∏è <b>–°–ø–æ—Å–æ–±—ã –ø–æ–¥–∞—á–∏:</b>
1Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É –Ω–∞–ø—Ä—è–º—É—é
2Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
3Ô∏è‚É£ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: +7 978 144-90-70

üìã <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üì∑ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
üéÇ –í–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª
üé® –û–∫—Ä–∞—Å –∏ –æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã
üò∫ –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
üíâ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è (–ø—Ä–∏–≤–∏–≤–∫–∏, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è)
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏
üìç –†–∞–π–æ–Ω (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)

üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>
‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Ö–æ—Ä–æ—à–∏–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ
‚Ä¢ –ß–µ—Å—Ç–Ω–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Å–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è
‚Ä¢ –ë—É–¥—å—Ç–µ –Ω–∞ —Å–≤—è–∑–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤

üö´ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>
‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
‚Ä¢ –ù–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –†–µ–∫–ª–∞–º–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥"""
            
            self.bot.send_message(message.chat.id, submit_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
        def back_handler(message):
            self.bot.send_message(
                message.chat.id, 
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: True)
        def default_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∏
            text = message.text.lower()
            if any(word in text for word in ['–∫–ª–∏–Ω–∏–∫–∞', '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–≤—Ä–∞—á', '–ª–µ—á–µ–Ω–∏–µ']):
                self.send_vet_clinics(message.chat.id)
            else:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n"
                    "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    reply_markup=self.get_main_keyboard()
                )
    
    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            return jsonify({
                "status": "üêæ Animals Bot Running",
                "time": datetime.now().strftime('%H:%M:%S'),
                "users": len(self.stats["users"]),
                "messages": self.stats["messages"],
                "channels": {
                    "cats": [c['url'] for c in self.parser.channels if c['type'] == 'cats'],
                    "dogs": [c['url'] for c in self.parser.channels if c['type'] == 'dogs']
                },
                "last_update": {
                    "cats": self.parser.last_update['cats'].isoformat() if self.parser.last_update['cats'] else None,
                    "dogs": self.parser.last_update['dogs'].isoformat() if self.parser.last_update['dogs'] else None
                }
            })
        
        @self.app.route('/posts/<animal_type>')
        def posts_api(animal_type):
            try:
                if animal_type not in ['cats', 'dogs']:
                    return jsonify({"error": "Invalid animal type"}), 400
                    
                posts = self.parser.get_cached_posts(animal_type)
                return jsonify({
                    "status": "ok",
                    "animal_type": animal_type,
                    "count": len(posts),
                    "posts": [{
                        "title": p["title"],
                        "url": p["url"],
                        "date": p["date"],
                        "channel": p["channel"],
                        "has_media": p["has_media"]
                    } for p in posts],
                    "channels": [c['url'] for c in self.parser.channels if c['type'] == animal_type]
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
        
        @self.app.route('/clinics')
        def clinics_api():
            try:
                clinics_data = self.parser.load_vet_clinics()
                return jsonify({
                    "status": "ok",
                    "data": clinics_data
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
    
    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ø–ª—Ç—ã...")
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            cats_posts = self.parser.get_cached_posts('cats')
            dogs_posts = self.parser.get_cached_posts('dogs')
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(cats_posts)} –∫–æ—à–µ–∫, {len(dogs_posts)} —Å–æ–±–∞–∫")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        if self.setup_webhook():
            logger.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            self.app.run(host='0.0.0.0', port=self.port, debug=False)
        else:
            logger.error("üö® –û—à–∏–±–∫–∞ webhook, –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ...")
            try:
                self.bot.polling(none_stop=True, interval=0, timeout=20)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")

def create_vet_clinics_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞–º–∏ –∏–∑ JSON"""
    vet_data = {
        "–º–µ—Å—Ç–∞": {
            "—è–ª—Ç–∞": {
                "–∞–π–±–æ–ª–∏—Ç": {
                    "–∞–¥—Ä–µ—Å": "—É–ª. –í–∞—Å–∏–ª—å–µ–≤–∞-–¢—Ä–µ–Ω—ë–≤–∞, 3/7",
                    "–≤—Ä–µ–º—è": "–ü–Ω‚Äì–ü—Ç: 9:00‚Äì19:00; –°–±‚Äì–í—Å: 9:00‚Äì17:00",
                    "–≤–µ—Ç–∞–ø—Ç–µ–∫–∞": "+7 (978) 869-73-80",
                    "–≤—Ä–∞—á–∏": [
                        {"–∏–º—è": "–†–æ–º–∞–Ω –õ–µ–æ–Ω–∏–¥–æ–≤–∏—á", "—Ç–µ–ª": "+7 (978) 761-66-52"},
                        {"–∏–º—è": "–ù–∞—Ç–∞–ª—å—è –ì–µ–æ—Ä–≥–∏–µ–≤–Ω–∞", "—Ç–µ–ª": "+7 (978) 869-70-09"},
                        {"—Ç–µ–ª": "+7 (978) 761-65-79"}
                    ],
                    "–≤—ã–µ–∑–¥": False,
                    "—Å—Å—ã–ª–∫–∞": "https://vk.com/zoovet1"
                },
                "–∑–¥–æ—Ä–æ–≤–µ–π–∫–æ": {
                    "–∞–¥—Ä–µ—Å": "—É–ª. –ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∞—è, 6",
                    "–≤—Ä–µ–º—è": "–ü–Ω‚Äì–ü—Ç: 9:00‚Äì17:00",
                    "–≤–µ—Ç–∞–ø—Ç–µ–∫–∞": True,
                    "–≤—ã–µ–∑–¥": {"—Å—Ç–æ–∏–º–æ—Å—Ç—å": "1500 —Ä—É–±."},
                    "–≤—Ä–∞—á–∏": [
                        {"–∏–º—è": "–Æ–ª–∏—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞", "—Ç–µ–ª": "+7 (978) 782-46-81"},
                        {"—Ç–µ–ª": "+7 (978) 782-46-82"}
                    ],
                    "—Å—Å—ã–ª–∫–∞": "https://vk.com/vet.zdoroveyko"
                },
                "–¥–æ–≤–µ—Ä–∏–µ": {
                    "–∞–¥—Ä–µ—Å": "—É–ª. –•–∞–ª—Ç—É—Ä–∏–Ω–∞, 52–ê",
                    "–≤—Ä–µ–º—è": "–ü–Ω‚Äì–í—Å: 9:00‚Äì21:00",
                    "—É—Å–ª—É–≥–∏": ["—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä", "–∑–æ–æ–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞", "–¥–æ–Ω–æ—Ä—Å–∫–∞—è –±–∞–∑–∞", "–£–ó–ò", "–≠–•–û —Å–µ—Ä–¥—Ü–∞", "—Ä–µ–Ω—Ç–≥–µ–Ω"],
                    "—ç–∫–∑–æ—Ç–∏–∫–∞": True,
                    "–≤—ã–µ–∑–¥": False,
                    "—Ç–µ–ª–µ—Ñ–æ–Ω": ["+7 (978) 256-15-01", "+7 (978) 976-84-34"],
                    "—Å—Å—ã–ª–∫–∞": "https://vk.com/doverieyalta"
                },
                "—Ö–∞—Ç–∏–∫–æ": {
                    "–∞–¥—Ä–µ—Å": "—É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 59 (–æ—Å—Ç. –ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª)",
                    "–≤—Ä–µ–º—è": "–ü–Ω‚Äì–í—Å: 9:00‚Äì21:00",
                    "–≤–µ—Ç–∞–ø—Ç–µ–∫–∞": True,
                    "—É—Å–ª—É–≥–∏": ["–£–ó–ò", "—Ä–µ–Ω—Ç–≥–µ–Ω", "–∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏"],
                    "—ç–∫–∑–æ—Ç–∏–∫–∞": True,
                    "–≤—ã–µ–∑–¥": {"—Å—Ç–æ–∏–º–æ—Å—Ç—å": "2000 —Ä—É–±."},
                    "—Ç–µ–ª–µ—Ñ–æ–Ω": ["+7 (978) 725-91-59", "+7 (978) 106-72-06"]
                }
            },
            "–∞–ª—É–ø–∫–∞": {
                "–¥–∞–π –ª–∞–ø—É": {
                    "–∞–¥—Ä–µ—Å": "—É–ª. –ó–∞–ø–∞–¥–Ω–∞—è, 22–ë",
                    "–≤—Ä–µ–º—è": "–ü–Ω‚Äì–°–±: 9:00‚Äì18:00; –í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π",
                    "—Ç–µ–ª–µ—Ñ–æ–Ω": "+7 (978) 083-90-99"
                }
            }
        },
        "—Å–∏–Ω–æ–Ω–∏–º—ã": {
            "–¥–æ–≤–µ—Ä–∏–µ": "–¥–æ–≤–µ—Ä–∏–µ",
            "—Ö–∞—Ç–∏–∫–æ": "—Ö–∞—Ç–∏–∫–æ", 
            "–∞–π–±–æ–ª–∏—Ç": "–∞–π–±–æ–ª–∏—Ç"
        }
    }
    
    try:
        with open('vet_clinics.json', 'w', encoding='utf-8') as f:
            json.dump(vet_data, f, ensure_ascii=False, indent=2)
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª vet_clinics.json")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫: {e}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    os.makedirs('assets/images', exist_ok=True)
    create_vet_clinics_file()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = ImprovedPetBot()
    bot.run()
