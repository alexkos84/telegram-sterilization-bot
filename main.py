import os
import time
import logging
from datetime import datetime
from functools import lru_cache

import telebot
from telebot import types
from flask import Flask, request

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get('TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')  # –ë–µ–∑ https:// –≤ –Ω–∞—á–∞–ª–µ
PORT = int(os.environ.get('PORT', 8080))
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
def load_text(filename):
    try:
        with open(f"assets/{filename}", "r", encoding="utf-8") as f:
            return f.read()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return f"–¢–µ–∫—Å—Ç {filename} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

texts = {
    "paid_text": load_text("paid_text.html"),
    "free_text": load_text("free_text.html")
}

# üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
IMAGES = {
    'paid_text': 'https://via.placeholder.com/400x300/FFD700/000000?text=üí∞+–ü–ª–∞—Ç–Ω–∞—è+—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è',
    'free_text': 'https://via.placeholder.com/400x300/32CD32/FFFFFF?text=üÜì+–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è+—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è'
}

# üåê Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        try:
            json_data = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_data)
            bot.process_new_updates([update])
            return '', 200
        except Exception as e:
            logger.error(f"‚ùå Webhook error: {e}")
            return 'Internal error', 500
    return 'Bad request', 400

# üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    return {"status": "Bot is running", "time": datetime.now().isoformat()}

# üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def setup_webhook():
    if not WEBHOOK_URL:
        logger.warning("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
        return False
    
    try:
        bot.remove_webhook()
        time.sleep(1)
        webhook_url = f"https://{WEBHOOK_URL}/{TOKEN}"
        bot.set_webhook(url=webhook_url)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return False

# üé¨ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = ["üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "üö® –ü–æ–º–æ—â—å"]
        markup.add(*buttons)
        
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞!",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")

# üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
@bot.message_handler(commands=['status'])
def status(message):
    webhook_info = bot.get_webhook_info()
    status_text = (
        f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
        f"‚Ä¢ Webhook: {webhook_info.url or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {webhook_info.pending_update_count}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook_info.last_error_message or '–Ω–µ—Ç'}"
    )
    bot.send_message(message.chat.id, status_text)

# üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
def send_message_with_image(chat_id, text_key):
    text = texts.get(text_key, "–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    image_url = IMAGES.get(text_key)
    
    try:
        if image_url:
            bot.send_photo(chat_id, image_url, caption=text)
        else:
            bot.send_message(chat_id, text)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# üè• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è"
@bot.message_handler(func=lambda m: m.text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
def handle_sterilization(message):
    send_message_with_image(message.chat.id, "paid_text")

# üè† –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
@bot.message_handler(func=lambda m: m.text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
def handle_adoption(message):
    send_message_with_image(message.chat.id, "free_text")

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {len(texts)}")
    
    if WEBHOOK_URL:
        setup_webhook()
        app.run(host='0.0.0.0', port=PORT)
    else:
        logger.info("üö´ –†–µ–∂–∏–º webhook –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫ polling...")
        bot.remove_webhook()
        bot.polling(none_stop=True)
