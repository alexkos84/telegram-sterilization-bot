import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class YaltaChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤ –Ø–ª—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.channels = [
            {
                'username': 'lapki_ruchki_yalta',
                'url': 'https://t.me/lapki_ruchki_yalta',
                'type': 'cats',
                'name': '–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞'
            },
            {
                'username': 'yalta_aninmals',
                'url': 'https://t.me/yalta_aninmals',
                'type': 'dogs',
                'name': '–Ø–ª—Ç–∞ –ñ–∏–≤–æ—Ç–Ω—ã–µ'
            }
        ]
        self.posts_cache = []
        self.last_update = None
    
    def get_channel_posts(self, channel_type: str = 'all', limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            all_posts = []
            
            for channel in self.channels:
                if channel_type != 'all' and channel['type'] != channel_type:
                    continue
                    
                web_url = f'https://t.me/s/{channel["username"]}'
                logger.info(f"üåê –ü–∞—Ä—Å–∏–Ω–≥ {channel['name']}: {web_url}")
                
                response = requests.get(web_url, headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                }, timeout=15)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                message_divs = soup.find_all('div', class_='tgme_widget_message')
                
                channel_posts = []
                for div in message_divs[:limit*3]:  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    post_data = self.parse_message_div(div, channel)
                    if post_data and self.is_relevant_post(post_data.get('text', ''), channel['type']):
                        post_data['channel_name'] = channel['name']
                        channel_posts.append(post_data)
                        
                        if len(channel_posts) >= limit:
                            break
                
                all_posts.extend(channel_posts)
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            all_posts.sort(key=lambda x: x.get('timestamp', 0), reverse=True)
            
            if all_posts:
                self.posts_cache = all_posts
                self.last_update = datetime.now()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len([c for c in self.channels if channel_type == 'all' or c['type'] == channel_type])} –∫–∞–Ω–∞–ª–æ–≤")
            
            return all_posts[:limit*2] if all_posts else self.get_mock_posts(channel_type)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_mock_posts(channel_type)
    
    def parse_message_div(self, div, channel) -> Optional[Dict]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # ID –ø–æ—Å—Ç–∞
            post_id = div.get('data-post', '').split('/')[-1] or str(int(time.time()))
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = ""
            if text_div:
                text = text_div.get_text(separator='\n', strip=True)
            
            if not text or len(text.strip()) < 10:
                return None
            
            # –î–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            timestamp = int(time.time())
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            date_elem = div.find('time', datetime=True)
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    timestamp = int(dt.timestamp())
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ-—Ä—É—Å—Å–∫–∏
                    date_str = dt.strftime('%d.%m.%Y –≤ %H:%M')
                except:
                    pass
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
            photo_url = self.extract_photo_url(div)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            title = self.extract_title(text, channel['type'])
            description = self.extract_description(text)
            contacts = self.extract_contacts(text)
            animal_info = self.extract_animal_info(text, channel['type'])
            
            return {
                'id': post_id,
                'text': text,
                'title': title,
                'description': description,
                'contacts': contacts,
                'animal_info': animal_info,
                'date': date_str,
                'timestamp': timestamp,
                'url': f"{channel['url']}/{post_id}",
                'photo_url': photo_url,
                'has_photo': bool(photo_url),
                'type': channel['type'],
                'channel_name': channel['name']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def extract_photo_url(self, div) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL —Ñ–æ—Ç–æ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ
        photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
        if photo_wrap and photo_wrap.get('style'):
            match = re.search(r"background-image:url\('([^']+)'\)", photo_wrap['style'])
            if match:
                return match.group(1)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        img_tag = div.find('img')
        if img_tag and img_tag.get('src'):
            return img_tag['src']
        
        # –î–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–µ–≤—å—é
        doc_thumb = div.find('i', class_='tgme_widget_message_document_thumb')
        if doc_thumb and doc_thumb.get('style'):
            match = re.search(r"background-image:url\('([^']+)'\)", doc_thumb['style'])
            if match:
                return match.group(1)
        
        return None
    
    def extract_title(self, text: str, animal_type: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        keywords = {
            'cats': ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–∏—â–µ—Ç –¥–æ–º'],
            'dogs': ['—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–∏—â–µ—Ç –¥–æ–º']
        }
        
        for line in lines[:4]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å—Ç—Ä–æ–∫–∏
            if len(line) > 5:
                line_lower = line.lower()
                if any(keyword in line_lower for keyword in keywords.get(animal_type, [])):
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    clean_line = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                    if len(clean_line) > 50:
                        clean_line = clean_line[:47] + "..."
                    return clean_line
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        for line in lines[:3]:
            if len(line) > 15:
                clean_line = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                if len(clean_line) > 50:
                    clean_line = clean_line[:47] + "..."
                return clean_line
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        return "üê± –ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º" if animal_type == 'cats' else "üê∂ –°–æ–±–∞–∫–∞ –∏—â–µ—Ç –¥–æ–º"
    
    def extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ —é–∑–µ—Ä–Ω–µ–π–º—ã
        clean_text = re.sub(r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-\(\)]{7,15}', '', text)
        clean_text = re.sub(r'@\w+', '', clean_text)
        clean_text = re.sub(r'https?://\S+', '', clean_text)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        if len(clean_text) > 300:
            return clean_text[:297] + "..."
        return clean_text
    
    def extract_contacts(self, text: str) -> Dict[str, List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        contacts = {
            'phones': [],
            'usernames': [],
            'formatted_phones': []
        }
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        phone_patterns = [
            r'\+?7[\s\-]?\(?9\d{2}\)?\s?[\d\s\-\(\)]{7,10}',
            r'8[\s\-]?\(?9\d{2}\)?\s?[\d\s\-\(\)]{7,10}',
            r'9\d{2}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}'
        ]
        
        for pattern in phone_patterns:
            phones = re.findall(pattern, text)
            for phone in phones:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
                clean_phone = re.sub(r'[^\d]', '', phone)
                if len(clean_phone) >= 10:
                    if clean_phone.startswith('8'):
                        clean_phone = '7' + clean_phone[1:]
                    elif not clean_phone.startswith('7'):
                        clean_phone = '7' + clean_phone
                    
                    if clean_phone not in [p.replace('+', '') for p in contacts['phones']]:
                        formatted_phone = f"+{clean_phone}"
                        contacts['phones'].append(formatted_phone)
                        
                        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
                        if len(clean_phone) == 11:
                            pretty_phone = f"+{clean_phone[0]} ({clean_phone[1:4]}) {clean_phone[4:7]}-{clean_phone[7:9]}-{clean_phone[9:11]}"
                            contacts['formatted_phones'].append(pretty_phone)
        
        # –Æ–∑–µ—Ä–Ω–µ–π–º—ã
        usernames = re.findall(r'@\w+', text)
        contacts['usernames'] = list(set(usernames))
        
        return contacts
    
    def extract_animal_info(self, text: str, animal_type: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω–æ–º"""
        info = {
            'age': '',
            'gender': '',
            'color': '',
            'size': '',
            'health': '',
            'character': ''
        }
        
        text_lower = text.lower()
        
        # –í–æ–∑—Ä–∞—Å—Ç
        age_patterns = [
            r'(\d+)\s*(–ª–µ—Ç|–≥–æ–¥–∞|–≥–æ–¥|–º–µ—Å|–º–µ—Å—è—Ü)',
            r'(–∫–æ—Ç–µ–Ω|—â–µ–Ω|–º–∞–ª—ã—à|–¥–µ—Ç–µ–Ω—ã—à)',
            r'(–≤–∑—Ä–æ—Å–ª—ã–π|–≤–∑—Ä–æ—Å–ª–∞—è|–ø–æ–∂–∏–ª–æ–π|–ø–æ–∂–∏–ª–∞—è)'
        ]
        for pattern in age_patterns:
            match = re.search(pattern, text_lower)
            if match:
                info['age'] = match.group(0)
                break
        
        # –ü–æ–ª
        if any(word in text_lower for word in ['–º–∞–ª—å—á–∏–∫', '–∫–æ—Ç ', '–ø–µ—Å ']):
            info['gender'] = '–º–∞–ª—å—á–∏–∫'
        elif any(word in text_lower for word in ['–¥–µ–≤–æ—á–∫–∞', '–∫–æ—à–∫–∞', '—Å—É–∫–∞']):
            info['gender'] = '–¥–µ–≤–æ—á–∫–∞'
        
        # –û–∫—Ä–∞—Å
        colors = ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Ä—ã–∂–∏–π', '—Å–µ—Ä—ã–π', '—Ç—Ä–µ—Ö—Ü–≤–µ—Ç–Ω', '–ø—è—Ç–Ω–∏—Å—Ç', '–ø–æ–ª–æ—Å–∞—Ç', '—Ç–∏–≥—Ä–æ–≤']
        for color in colors:
            if color in text_lower:
                info['color'] = color
                break
        
        # –†–∞–∑–º–µ—Ä (–¥–ª—è —Å–æ–±–∞–∫)
        if animal_type == 'dogs':
            sizes = ['–º–∞–ª–µ–Ω—å–∫', '—Å—Ä–µ–¥–Ω', '–±–æ–ª—å—à', '–∫—Ä—É–ø–Ω']
            for size in sizes:
                if size in text_lower:
                    info['size'] = size
                    break
        
        # –ó–¥–æ—Ä–æ–≤—å–µ
        if any(word in text_lower for word in ['–ø—Ä–∏–≤–∏—Ç', '–≤–∞–∫—Ü–∏–Ω', '–æ–±—Ä–∞–±–æ—Ç–∞–Ω']):
            info['health'] = '–ø—Ä–∏–≤–∏—Ç'
        if any(word in text_lower for word in ['–∫–∞—Å—Ç—Ä–∏—Ä', '—Å—Ç–µ—Ä–∏–ª–∏–∑']):
            info['health'] += (' –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' if info['health'] else '–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        
        return {k: v for k, v in info.items() if v}
    
    def is_relevant_post(self, text: str, animal_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞"""
        if len(text.strip()) < 20:
            return False
        
        text_lower = text.lower()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã
        exclude_keywords = [
            '—Ä–µ–∫–ª–∞–º', '–ø—Ä–æ–¥–∞–º', '–∫—É–ø–ª—é', '—É—Å–ª—É–≥', '—Ä–∞–±–æ—Ç',
            '–º–∞–≥–∞–∑–∏–Ω', '–≤–µ—Ç–∞–ø—Ç–µ–∫', '–∫–æ—Ä–º –ø—Ä–æ–¥–∞–∂'
        ]
        if any(keyword in text_lower for keyword in exclude_keywords):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if animal_type == 'cats':
            relevant_keywords = [
                '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É',
                '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–∏—â–µ—Ç –¥–æ–º', '–≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏', '–æ—Ç–¥–∞–º',
                '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è–ª—Å—è', '–∫–∞—Å—Ç—Ä–∏—Ä', '—Å—Ç–µ—Ä–∏–ª–∏–∑'
            ]
        else:  # dogs
            relevant_keywords = [
                '—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–ø—Å–∏–Ω', '–ª–∞–π–∫',
                '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–∏—â–µ—Ç –¥–æ–º', '–≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏', '–æ—Ç–¥–∞–º',
                '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è–ª—Å—è', '–∫–∞—Å—Ç—Ä–∏—Ä', '—Å—Ç–µ—Ä–∏–ª–∏–∑'
            ]
        
        return any(keyword in text_lower for keyword in relevant_keywords)
    
    def get_mock_posts(self, channel_type: str = 'cats') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if channel_type == 'cats':
            return [{
                'id': '1001',
                'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                'description': '–í–æ–∑—Ä–∞—Å—Ç 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –∏–≥—Ä–∏–≤—ã–π, –∫ –ª–æ—Ç–∫—É –ø—Ä–∏—É—á–µ–Ω.',
                'contacts': {
                    'phones': ['+7 (978) 123-45-67'],
                    'usernames': ['@cat_volunteer'],
                    'formatted_phones': ['+7 (978) 123-45-67']
                },
                'animal_info': {'age': '2 –º–µ—Å—è—Ü–∞', 'gender': '–º–∞–ª—å—á–∏–∫', 'color': '—Ä—ã–∂–∏–π'},
                'date': '08.08.2025 –≤ 14:30',
                'timestamp': int(time.time()),
                'url': 'https://t.me/lapki_ruchki_yalta/1001',
                'photo_url': 'https://via.placeholder.com/400x300/FF6B35/ffffff?text=–ö–æ—Ç–µ–Ω–æ–∫+–ú—É—Ä–∑–∏–∫',
                'has_photo': True,
                'type': 'cats',
                'channel_name': '–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞'
            }]
        else:
            return [{
                'id': '2001',
                'title': 'üê∂ –©–µ–Ω–æ–∫ –ë–æ–±–∏–∫ –∏—â–µ—Ç —Å–µ–º—å—é',
                'description': '–í–æ–∑—Ä–∞—Å—Ç 4 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —á–µ—Ä–Ω—ã–π –æ–∫—Ä–∞—Å. –ê–∫—Ç–∏–≤–Ω—ã–π, –∑–¥–æ—Ä–æ–≤—ã–π, –ø—Ä–∏–≤–∏—Ç.',
                'contacts': {
                    'phones': ['+7 (978) 765-43-21'],
                    'usernames': ['@dog_helper'],
                    'formatted_phones': ['+7 (978) 765-43-21']
                },
                'animal_info': {'age': '4 –º–µ—Å—è—Ü–∞', 'gender': '–º–∞–ª—å—á–∏–∫', 'color': '—á–µ—Ä–Ω—ã–π'},
                'date': '08.08.2025 –≤ 16:45',
                'timestamp': int(time.time()),
                'url': 'https://t.me/yalta_aninmals/2001',
                'photo_url': 'https://via.placeholder.com/400x300/4ECDC4/ffffff?text=–©–µ–Ω–æ–∫+–ë–æ–±–∏–∫',
                'has_photo': True,
                'type': 'dogs',
                'channel_name': '–Ø–ª—Ç–∞ –ñ–∏–≤–æ—Ç–Ω—ã–µ'
            }]
    
    def get_cached_posts(self, channel_type: str = 'all', force_update: bool = False) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∏–ª–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (force_update or not self.last_update or 
            (datetime.now() - self.last_update).seconds > 1800):
            try:
                return self.get_channel_posts(channel_type)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—ç—à –ø–æ —Ç–∏–ø—É
        filtered_posts = []
        for post in self.posts_cache:
            if channel_type == 'all' or post.get('type') == channel_type:
                filtered_posts.append(post)
        
        return filtered_posts if filtered_posts else self.get_mock_posts(channel_type)


class YaltaAnimalBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ø–ª—Ç—ã"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token, parse_mode='HTML')
        self.parser = YaltaChannelParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        
        self.stats = {
            "users": set(),
            "messages": 0,
            "start_time": datetime.now()
        }
        
        self.setup_handlers()
        self.setup_routes()
    
    def create_beautiful_post_message(self, post: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∂–∏–≤–æ—Ç–Ω–æ–º"""
        emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
        type_name = '–ö–û–®–ö–ê' if post['type'] == 'cats' else '–°–û–ë–ê–ö–ê'
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message_parts = [f"<b>{emoji} {post['title']}</b>"]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–≤–æ—Ç–Ω–æ–º
        if post.get('animal_info'):
            info_lines = []
            animal_info = post['animal_info']
            
            if animal_info.get('age'):
                info_lines.append(f"üìÖ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {animal_info['age']}")
            if animal_info.get('gender'):
                info_lines.append(f"üë´ <b>–ü–æ–ª:</b> {animal_info['gender']}")
            if animal_info.get('color'):
                info_lines.append(f"üé® <b>–û–∫—Ä–∞—Å:</b> {animal_info['color']}")
            if animal_info.get('size'):
                info_lines.append(f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {animal_info['size']}")
            if animal_info.get('health'):
                info_lines.append(f"üè• <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {animal_info['health']}")
            
            if info_lines:
                message_parts.append('\n'.join(info_lines))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if post.get('description'):
            message_parts.append(f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{post['description']}")
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
        contacts = post.get('contacts', {})
        if contacts.get('phones') or contacts.get('usernames'):
            contact_lines = ["üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>"]
            
            for phone in contacts.get('formatted_phones', contacts.get('phones', []))[:2]:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–º–µ—Ä
                clean_phone = re.sub(r'[^\d]', '', phone)
                contact_lines.append(f"üì± <a href='tel:+{clean_phone}'>{phone}</a>")
            
            for username in contacts.get('usernames', [])[:2]:
                contact_lines.append(f"üí¨ {username}")
            
            message_parts.append('\n'.join(contact_lines))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        footer_parts = []
        if post.get('date'):
            footer_parts.append(f"üïê {post['date']}")
        if post.get('channel_name'):
            footer_parts.append(f"üì¢ {post['channel_name']}")
        
        if footer_parts:
            message_parts.append(' ‚Ä¢ '.join(footer_parts))
        
        return '\n\n'.join(message_parts)
    
    def send_animal_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –æ –∂–∏–≤–æ—Ç–Ω–æ–º"""
        try:
            message_text = self.create_beautiful_post_message(post)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                types.InlineKeyboardButton(
                    f"üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ {post.get('channel_name', '–∫–∞–Ω–∞–ª–µ')}", 
                    url=post['url']
                )
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
            contacts = post.get('contacts', {})
            if contacts.get('phones'):
                phone_clean = re.sub(r'[^\d]', '', contacts['phones'][0])
                keyboard.add(
                    types.InlineKeyboardButton(
                        f"üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å {contacts.get('formatted_phones', contacts.get('phones'))[0]}", 
                        url=f"tel:+{phone_clean}"
                    )
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=message_text,
                        reply_markup=keyboard
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            self.bot.send_message(
                chat_id,
                message_text,
                reply_markup=keyboard,
                disable_web_page_preview=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: {post.get('url', '–≤ –∫–∞–Ω–∞–ª–µ')}"
            )
    
    def send_channel_posts(self, chat_id: int, animal_type: str = 'cats', limit: int = 5):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            type_emoji = 'üê±' if animal_type == 'cats' else 'üê∂'
            type_name = '–ö–û–®–ö–ò' if animal_type == 'cats' else '–°–û–ë–ê–ö–ò'
            
            self.bot.send_message(
                chat_id,
                f"{type_emoji} <b>{type_name} –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...",
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    f"üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.\n\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–ø—Ä—è–º—É—é:\n"
                    f"‚Ä¢ <a href='{self.parser.channels[0]['url']}'>{self.parser.channels[0]['name']}</a>\n"
                    f"‚Ä¢ <a href='{self.parser.channels[1]['url']}'>{self.parser.channels[1]['name']}</a>"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
            sent_count = 0
            for post in posts[:limit]:
                if post.get('type') == animal_type or animal_type == 'all':
                    self.send_animal_post(chat_id, post)
                    sent_count += 1
                    time.sleep(0.8)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if sent_count > 0:
                help_text = (
                    f"üí° <b>–ü–æ–∫–∞–∑–∞–Ω–æ {sent_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>\n\n"
                    f"üè† <b>–ö–∞–∫ –≤–∑—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞:</b>\n"
                    f"1Ô∏è‚É£ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É\n"
                    f"2Ô∏è‚É£ –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                    f"3Ô∏è‚É£ –î–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ\n\n"
                    f"üì¢ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>\n"
                )
                
                for channel in self.parser.channels:
                    if animal_type == 'all' or channel['type'] == animal_type:
                        help_text += f"‚Ä¢ <a href='{channel['url']}'>{channel['name']}</a>\n"
                
                help_text += f"\nü§ù <b>–•–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å?</b>\n–°—Ç–∞–Ω—å—Ç–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º - –ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª—ã!"
                
                self.bot.send_message(chat_id, help_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:\n"
                f"‚Ä¢ <a href='{self.parser.channels[0]['url']}'>{self.parser.channels[0]['name']}</a>\n"
                f"‚Ä¢ <a href='{self.parser.channels[1]['url']}'>{self.parser.channels[1]['name']}</a>"
            )
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton("üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º"),
            types.KeyboardButton("üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        )
        markup.add(
            types.KeyboardButton("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è"),
            types.KeyboardButton("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        )
        markup.add(
            types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
            types.KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
