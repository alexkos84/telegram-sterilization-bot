import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AdvancedChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –Ø–ª—Ç–µ"""
    
    def __init__(self):
        self.channels = [
            {
                'username': 'cats_yalta',
                'url': 'https://t.me/cats_yalta',
                'type': 'cats',
                'title': '–ö–æ—Ç–∏–∫–∏ –Ø–ª—Ç–∞'
            },
            {
                'username': 'dogs_yalta',
                'url': 'https://t.me/dogs_yalta',
                'type': 'dogs',
                'title': '–°–æ–±–∞–∫–∏ –Ø–ª—Ç–∞'
            }
        ]
        self.posts_cache = []
        self.last_update = None
    
    def get_channel_posts(self, channel_type: str = 'all', limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            posts = []
            for channel in self.channels:
                if channel_type != 'all' and channel['type'] != channel_type:
                    continue
                    
                web_url = f'https://t.me/s/{channel["username"]}'
                logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å {web_url}")
                response = requests.get(web_url, timeout=15)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                message_divs = soup.find_all('div', class_='tgme_widget_message')
                
                for div in message_divs[:limit*2]:
                    post_data = self.parse_message_div(div, channel)
                    if post_data:
                        posts.append(post_data)
                        if len(posts) >= limit:
                            break
            
            posts.sort(key=lambda x: x.get('timestamp', 0), reverse=True)
            return posts[:limit]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []

    def parse_message_div(self, div, channel) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç"""
        try:
            post_id = div.get('data-post', '').split('/')[-1] or 'unknown'
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            # –î–∞—Ç–∞
            date_elem = div.find('time', datetime=True)
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    date_str = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    pass
            
            # –ú–µ–¥–∏–∞
            photo_url = None
            photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and photo_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'url': f"{channel['url']}/{post_id}",
                'channel': channel['title'],
                'channel_url': channel['url'],
                'photo_url': photo_url
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None

class AnimalBot:
    """–ë–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∂–∏–≤–æ—Ç–Ω—ã–º –≤ –Ø–ª—Ç–µ"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AdvancedChannelParser()
        self.contacts = self.load_contacts()
        
        self.setup_handlers()
    
    def load_contacts(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ JSON"""
        try:
            with open('assets/contacts.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return {
                "–∫–æ–Ω—Ç–∞–∫—Ç—ã": {
                    "—Å–≤–µ—Ç–ª–∞–Ω–∞": "+7 978 123-45-67",
                    "–≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞": "—É–ª. –ö–∏—Ä–æ–≤–∞, 15",
                    "—Å–æ–±–∞–∫–∏": "@dogs_yalta"
                },
                "—Å–∏–Ω–æ–Ω–∏–º—ã": {
                    "—Å–≤–µ—Ç–∞": "—Å–≤–µ—Ç–ª–∞–Ω–∞",
                    "–∫–ª–∏–Ω–∏–∫–∞": "–≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞"
                }
            }

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.bot.message_handler(func=lambda m: m.text and '@catYalta_bot' in m.text)
        def handle_mention(message):
            try:
                query = message.text.lower().replace('@catyalta_bot', '').strip()
                contacts = self.contacts["–∫–æ–Ω—Ç–∞–∫—Ç—ã"]
                synonyms = self.contacts["—Å–∏–Ω–æ–Ω–∏–º—ã"]
                
                # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                response = None
                for name, contact in contacts.items():
                    if name in query:
                        response = f"üìû {name.capitalize()}: {contact}"
                        break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
                if not response:
                    for syn, original in synonyms.items():
                        if syn in query:
                            response = f"üìû {original.capitalize()}: {contacts[original]}"
                            break
                
                if not response:
                    response = "ü§∑ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–°–≤–µ—Ç–ª–∞–Ω–∞', '–í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞'"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É
                self.bot.reply_to(
                    message,
                    response,
                    disable_notification=True
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
                self.bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.bot.polling()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É assets –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('assets', exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists('assets/contacts.json'):
        with open('assets/contacts.json', 'w', encoding='utf-8') as f:
            json.dump({
                "–∫–æ–Ω—Ç–∞–∫—Ç—ã": {
                    "—Å–≤–µ—Ç–ª–∞–Ω–∞": "+7 978 123-45-67 (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä)",
                    "–≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞": "—É–ª. –ö–∏—Ä–æ–≤–∞, 15, —Ç–µ–ª. +7 978 000-11-22",
                    "—Å–æ–±–∞–∫–∏": "@dogs_yalta (–≥—Ä—É–ø–ø–∞ –ø–æ —Å–æ–±–∞–∫–∞–º)"
                },
                "—Å–∏–Ω–æ–Ω–∏–º—ã": {
                    "—Å–≤–µ—Ç–∞": "—Å–≤–µ—Ç–ª–∞–Ω–∞",
                    "–∫–ª–∏–Ω–∏–∫–∞": "–≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞"
                }
            }, f, ensure_ascii=False, indent=4)

    bot = AnimalBot()
    bot.run()
