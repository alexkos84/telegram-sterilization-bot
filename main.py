import os
import re
import logging
from typing import List, Dict, Optional
from datetime import datetime
import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
from flask import Flask, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class GroupParser:
    def __init__(self):
        self.group_username = 'lapki_ruchki_yalta'
        self.group_url = f'https://t.me/{self.group_username}'
        self.posts_cache = []
        self.last_update = None
        self.phone_patterns = [
            r'\+?7[\s\-]?\(?9\d{2}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}',  # RU
            r'\+?380[\s\-]?\d{2}[\s\-]?\d{3}[\s\-]?\d{4}',  # UA
            r'0\d{9}'  # UA –ª–æ–∫–∞–ª—å–Ω—ã–π
        ]

    def extract_phones(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        phones = []
        for pattern in self.phone_patterns:
            phones.extend(re.findall(pattern, text))
        return phones

    def parse_webpage(self) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"""
        try:
            url = f'https://t.me/s/{self.group_username}'
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            messages = soup.find_all('div', class_='tgme_widget_message')
            
            posts = []
            for msg in messages:
                text_elem = msg.find('div', class_='tgme_widget_message_text')
                if not text_elem:
                    continue
                    
                text = text_elem.get_text()
                phones = self.extract_phones(text)
                if not phones:
                    continue
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
                photo_elem = msg.find('a', class_='tgme_widget_message_photo_wrap')
                photo_url = None
                if photo_elem and photo_elem.get('style'):
                    match = re.search(r"url\('(.*?)'\)", photo_elem['style'])
                    if match:
                        photo_url = match.group(1)
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã
                date_elem = msg.find('time', {'datetime': True})
                post_date = "–ù–µ–¥–∞–≤–Ω–æ"
                if date_elem:
                    try:
                        dt = datetime.strptime(date_elem['datetime'], '%Y-%m-%dT%H:%M:%S%z')
                        post_date = dt.strftime('%d.%m.%Y %H:%M')
                    except:
                        pass
                
                posts.append({
                    'text': text,
                    'phones': phones,
                    'date': post_date,
                    'photo_url': photo_url,
                    'url': f"{self.group_url}/{msg.get('data-post', '').split('/')[-1]}"
                })
                
                if len(posts) >= 15:  # –õ–∏–º–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
                    break
            
            return posts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []

    def get_posts_with_phones(self, limit=5) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç—ã
            fresh_posts = self.parse_webpage()
            if fresh_posts:
                self.posts_cache = fresh_posts
                self.last_update = datetime.now()
                return fresh_posts[:limit]
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à
            return self.posts_cache[:limit] if self.posts_cache else self.get_mock_posts()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return self.get_mock_posts()

    def get_mock_posts(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        return [{
            'text': "–ö–æ—Ç–µ–Ω–æ–∫ –∏—â–µ—Ç –¥–æ–º. –û—á–µ–Ω—å –ª–∞—Å–∫–æ–≤—ã–π. –¢–µ–ª: +79781234567, 0652123456",
            'phones': ["+79781234567", "0652123456"],
            'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
            'photo_url': "https://via.placeholder.com/600x400?text=–ö–æ—Ç–µ–Ω–æ–∫",
            'url': "https://t.me/lapki_ruchki_yalta/123"
        }]

class AnimalBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
            
        self.bot = telebot.TeleBot(self.token)
        self.parser = GroupParser()
        self.app = Flask(__name__)
        self.setup_handlers()
        
    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üê± –ü–æ—Å—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏", "üÜò –ü–æ–º–æ—â—å")
            self.bot.send_message(
                message.chat.id,
                "üîç –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏–∑ @lapki_ruchki_yalta",
                reply_markup=markup
            )

        @self.bot.message_handler(func=lambda m: m.text == "üê± –ü–æ—Å—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏")
        def show_posts(message):
            self.bot.send_chat_action(message.chat.id, 'typing')
            posts = self.parser.get_posts_with_phones(limit=5)
            
            if not posts:
                self.bot.send_message(message.chat.id, "üòî –°–µ–π—á–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏")
                return
                
            for post in posts:
                try:
                    text = (
                        f"üìÖ {post['date']}\n\n"
                        f"{post['text']}\n\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã: {', '.join(post['phones'])}\n"
                        f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ</a>"
                    )
                    
                    if post.get('photo_url'):
                        self.bot.send_photo(
                            message.chat.id,
                            post['photo_url'],
                            caption=text,
                            parse_mode='HTML'
                        )
                    else:
                        self.bot.send_message(
                            message.chat.id,
                            text,
                            parse_mode='HTML'
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

        @self.bot.message_handler(func=lambda m: m.text == "üÜò –ü–æ–º–æ—â—å")
        def help(message):
            self.bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ –∏–∑ –≥—Ä—É–ø–ø—ã @lapki_ruchki_yalta\n\n"
                "üê± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ—Å—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
                "‚ö†Ô∏è –ë–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –Ω–µ –∑–≤–æ–Ω–∏—Ç —Å–∞–º"
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if os.getenv('WEBHOOK_MODE') == 'True':
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            self.app.route(f'/{self.token}', methods=['POST'])(lambda: self.bot.process_new_updates(
                [telebot.types.Update.de_json(request.stream.read().decode("utf-8"))]
            ))
            self.app.run(host='0.0.0.0', port=int(os.getenv('PORT', 8080)))
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å polling
            self.bot.polling(none_stop=True)

if __name__ == '__main__':
    bot = AnimalBot()
    bot.run()
