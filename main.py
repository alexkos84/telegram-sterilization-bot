import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
from enum import Enum

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PostCategory(Enum):
    CATS = "cats"
    DOGS = "dogs"
    FREE_ITEMS = "free_items"
    LOST_PETS = "lost_pets"

class EnhancedChannelParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    
    def __init__(self):
        self.channel_username = 'Lapki_ruchki_Yalta_help'
        self.channel_url = 'https://t.me/Lapki_ruchki_Yalta_help'
        self.web_url = f'https://t.me/s/{self.channel_username}'
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        self.posts_cache = {category.value: [] for category in PostCategory}
        self.last_update = None
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.keywords = {
            PostCategory.CATS: [
                '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É',
                '–∫–∞—Å—Ç—Ä', '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏—Ç', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–∫–æ—Ç—è—Ç–∞', 
                '–º–∞–º–∞-–∫–æ—à–∫–∞', '–±–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '—Ç—Ä—ë—Ö—Ü–≤–µ—Ç–Ω–∞—è', '—Ä—ã–∂–∏–π',
                '—á–µ—Ä–Ω—ã–π –∫–æ—Ç', '–±–µ–ª–∞—è –∫–æ—à–∫–∞', '–ø–æ–ª–æ—Å–∞—Ç—ã–π', '–ø—É—à–∏—Å—Ç—ã–π'
            ],
            PostCategory.DOGS: [
                '—Å–æ–±–∞–∫', '—â–µ–Ω–æ–∫', '–ø–µ—Å', '–ø–µ—Å–∏–∫', '—â–µ–Ω', '—Å–æ–±–∞—á–∫',
                '–ª–∞–±—Ä–∞–¥–æ—Ä', '–æ–≤—á–∞—Ä–∫–∞', '–¥–≤–æ—Ä–Ω—è–≥', '–º–µ—Ç–∏—Å', '—Ö–∞—Å–∫–∏',
                '–π–æ—Ä–∫', '—Ç–∞–∫—Å', '—á–∏—Ö—É–∞—Ö—É–∞', '–±—É–ª—å–¥–æ–≥', '—à–ø–∏—Ü',
                '—Ä–æ—Ç–≤–µ–π–ª–µ—Ä', '–ø–∏—Ç–±—É–ª—å', '—Å—Ç–∞—Ñ—Ñ', '–¥–æ–≥', '–º–æ–ø—Å'
            ],
            PostCategory.FREE_ITEMS: [
                '–æ—Ç–¥–∞–º', '–¥–∞—Ä–æ–º', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '—à–ª–µ–π–∫–∞', '–ø–æ–≤–æ–¥–æ–∫',
                '–ª–æ—Ç–æ–∫', '–∫–æ—Ä–º', '–º–∏—Å–∫', '–ø–µ—Ä–µ–Ω–æ—Å–∫–∞', '–¥–æ–º–∏–∫',
                '–∫–æ–≥—Ç–µ—Ç–æ—á–∫–∞', '–∏–≥—Ä—É—à–∫', '–ª–µ–∫–∞—Ä—Å—Ç–≤', '–≤–∏—Ç–∞–º–∏–Ω',
                '–Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ø–æ–¥—Å—Ç–∏–ª–∫–∞', '–æ–¥–µ—è–ª–æ', '–∫–ª–µ—Ç–∫–∞'
            ],
            PostCategory.LOST_PETS: [
                '–ø–æ—Ç–µ—Ä—è–ª', '–ø–æ—Ç–µ—Ä—è—à', '–Ω–∞–π–¥–µ–Ω', '–∏—â—É', '–ø—Ä–æ–ø–∞–ª',
                '—É–±–µ–∂–∞–ª', '—Å–±–µ–∂–∞–ª', '–Ω–∞–π–¥–∏—Ç–µ', '–ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏',
                '–≤–∏–¥–µ–ª–∏', '–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑', '—Ä–∞–π–æ–Ω', '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ',
                '–≤–µ—Ä–Ω–∏—Ç–µ', '–æ—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å'
            ]
        }
    
    def get_channel_posts(self, category: PostCategory = None, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤—Å–µ"""
        try:
            logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å {self.web_url}")
            response = requests.get(self.web_url, headers=self.headers, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            message_divs = soup.find_all('div', class_='tgme_widget_message')
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if category:
                self.posts_cache[category.value] = []
            else:
                for cat in PostCategory:
                    self.posts_cache[cat.value] = []
            
            # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç—ã
            for div in message_divs[:limit*3]:  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                post_data = self.parse_message_div(div)
                if post_data:
                    post_category = self.categorize_post(post_data.get('text', ''))
                    if post_category:
                        post_data['category'] = post_category.value
                        post_data['category_emoji'] = self.get_category_emoji(post_category)
                        
                        if not category or category == post_category:
                            self.posts_cache[post_category.value].append(post_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for cat in PostCategory:
                self.posts_cache[cat.value] = self.posts_cache[cat.value][:limit]
            
            self.last_update = datetime.now()
            
            if category:
                posts = self.posts_cache[category.value]
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.value}")
                return posts or self.get_mock_posts(category)
            else:
                total_posts = sum(len(posts) for posts in self.posts_cache.values())
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {total_posts} –ø–æ—Å—Ç–æ–≤ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                return self.posts_cache
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_mock_posts(category) if category else self.get_all_mock_posts()
    
    def categorize_post(self, text: str) -> Optional[PostCategory]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        text_lower = text.lower()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_scores = {}
        for category, keywords in self.keywords.items():
            score = sum(1 for keyword in keywords if keyword in text_lower)
            if score > 0:
                category_scores[category] = score
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if category_scores:
            return max(category_scores.items(), key=lambda x: x[1])[0]
        
        return None
    
    def get_category_emoji(self, category: PostCategory) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        emoji_map = {
            PostCategory.CATS: "üê±",
            PostCategory.DOGS: "üê∂",
            PostCategory.FREE_ITEMS: "üéÅ",
            PostCategory.LOST_PETS: "üîç"
        }
        return emoji_map.get(category, "üìã")
    
    def parse_message_div(self, div) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç, –∏–∑–≤–ª–µ–∫–∞—è –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            post_id = div.get('data-post', '').split('/')[-1] or f"post_{int(time.time())}"
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            if not text or len(text) < 20:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ—Å—Ç—ã
                return None
            
            # –î–∞—Ç–∞
            date_elem = div.find('time', datetime=True)
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    date_str = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    pass
            
            # –§–æ—Ç–æ
            photo_url = None
            photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and photo_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ
            additional_photos = []
            photo_album = div.find('div', class_='tgme_widget_message_grouped')
            if photo_album:
                album_photos = photo_album.find_all('a', class_='tgme_widget_message_photo_wrap')
                for photo in album_photos[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
                    if photo.get('style'):
                        match = re.search(r"background-image:url\('(.*?)'\)", photo['style'])
                        if match:
                            additional_photos.append(match.group(1))
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'url': f"{self.channel_url}/{post_id}",
                'title': self.extract_title(text),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text),
                'photo_url': photo_url,
                'additional_photos': additional_photos,
                'has_photo': bool(photo_url or additional_photos),
                'urgency': self.detect_urgency(text),
                'location': self.extract_location(text)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ div: {e}")
            return None
    
    def extract_title(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        for line in lines[:3]:
            if len(line) > 15 and not line.startswith(('http', '@', '+')):
                # –û—á–∏—â–∞–µ–º –æ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã
                clean_line = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                if len(clean_line) > 10:
                    title = line[:60] + "..." if len(line) > 60 else line
                    return title
        
        return text[:50] + "..." if len(text) > 50 else text
    
    def extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏
        clean_text = re.sub(r'@\w+|https?://\S+|\+?\d[\d\s\-\(\)]{7,}', '', text)
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        if len(clean_text) > 150:
            return clean_text[:150] + "..."
        return clean_text
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        contacts = []
        
        # –¢–µ–ª–µ—Ñ–æ–Ω—ã
        phone_patterns = [
            r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}',
            r'\+?[78][\s\-]?\d{3}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}'
        ]
        
        for pattern in phone_patterns:
            phones = re.findall(pattern, text)
            contacts.extend(phones[:1])  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä
        
        # Telegram username
        usernames = re.findall(r'@\w+', text)
        contacts.extend(usernames[:1])
        
        return ' ‚Ä¢ '.join(contacts) if contacts else "üìû –°–º. –≤ –∫–∞–Ω–∞–ª–µ"
    
    def extract_location(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏"""
        location_keywords = [
            '—è–ª—Ç–∞', '–∞–ª—É—à—Ç–∞', '–≥—É—Ä–∑—É—Ñ', '—Ñ–æ—Ä–æ—Å', '—Å–∏–º–µ–∏–∑', '–∫–æ—Ä–µ–∏–∑',
            '–ª–∏–≤–∞–¥–∏—è', '–º–∞—Å—Å–∞–Ω–¥—Ä–∞', '–Ω–∏–∫–∏—Ç–∞', '–ø–∞—Ä—Ç–µ–Ω–∏—Ç', '—Ü–µ–Ω—Ç—Ä',
            '—Ä–∞–π–æ–Ω', '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è', '–ø–∞—Ä–∫', '–¥–≤–æ—Ä–µ—Ü', '—Å–∞–Ω–∞—Ç–æ—Ä–∏–π'
        ]
        
        text_lower = text.lower()
        found_locations = [loc for loc in location_keywords if loc in text_lower]
        
        if found_locations:
            return f"üìç {found_locations[0].title()}"
        return ""
    
    def detect_urgency(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        urgent_keywords = [
            '—Å—Ä–æ—á–Ω–æ', '–æ—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ', '—É–º–∏—Ä–∞–µ—Ç', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
            '–Ω—É–∂–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è', '–ø–æ–º–æ–≥–∏—Ç–µ —Å—Ä–æ—á–Ω–æ', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞'
        ]
        
        text_lower = text.lower()
        if any(keyword in text_lower for keyword in urgent_keywords):
            return "üî• –°–†–û–ß–ù–û"
        return ""
    
    def get_mock_posts(self, category: PostCategory) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        mock_data = {
            PostCategory.CATS: [
                {
                    'id': '1001',
                    'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –ª—é–±—è—â–∏–π –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π –∏ –ª–∞—Å–∫–æ–≤—ã–π.',
                    'date': '04.08.2025 14:30',
                    'url': f'{self.channel_url}/1001',
                    'contact': '@volunteer1 ‚Ä¢ +7 978 123-45-67',
                    'photo_url': 'https://via.placeholder.com/600x400/FF6B35/FFFFFF?text=üê±+–ö–æ—Ç–µ–Ω–æ–∫+–ú—É—Ä–∑–∏–∫',
                    'additional_photos': [],
                    'has_photo': True,
                    'category': 'cats',
                    'category_emoji': 'üê±',
                    'urgency': '',
                    'location': 'üìç –Ø–ª—Ç–∞'
                }
            ],
            PostCategory.DOGS: [
                {
                    'id': '2001',
                    'title': 'üê∂ –©–µ–Ω–æ–∫ –†–µ–∫—Å –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 3 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, –º–µ—Ç–∏—Å –æ–≤—á–∞—Ä–∫–∏. –ü—Ä–∏–≤–∏—Ç, –∑–¥–æ—Ä–æ–≤, –æ—á–µ–Ω—å —É–º–Ω—ã–π.',
                    'date': '04.08.2025 13:15',
                    'url': f'{self.channel_url}/2001',
                    'contact': '@dog_volunteer ‚Ä¢ +7 978 987-65-43',
                    'photo_url': 'https://via.placeholder.com/600x400/4ECDC4/FFFFFF?text=üê∂+–©–µ–Ω–æ–∫+–†–µ–∫—Å',
                    'additional_photos': [],
                    'has_photo': True,
                    'category': 'dogs',
                    'category_emoji': 'üê∂',
                    'urgency': '',
                    'location': 'üìç –ê–ª—É—à—Ç–∞'
                }
            ],
            PostCategory.FREE_ITEMS: [
                {
                    'id': '3001',
                    'title': 'üéÅ –û—Ç–¥–∞–º –∫–æ—Ä–º –¥–ª—è –∫–æ—à–µ–∫ –∏ –ª–æ—Ç–æ–∫',
                    'description': '–°—É—Ö–æ–π –∫–æ—Ä–º Whiskas 3–∫–≥ (–æ—Å—Ç–∞–ª–æ—Å—å –º–Ω–æ–≥–æ), –ª–æ—Ç–æ–∫ —Å –≤—ã—Å–æ–∫–∏–º–∏ –±–æ—Ä—Ç–∏–∫–∞–º–∏, –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å.',
                    'date': '04.08.2025 12:00',
                    'url': f'{self.channel_url}/3001',
                    'contact': '@free_items ‚Ä¢ +7 978 111-22-33',
                    'photo_url': 'https://via.placeholder.com/600x400/45B7D1/FFFFFF?text=üéÅ+–ö–æ—Ä–º+–∏+–ª–æ—Ç–æ–∫',
                    'additional_photos': [],
                    'has_photo': True,
                    'category': 'free_items',
                    'category_emoji': 'üéÅ',
                    'urgency': '',
                    'location': 'üìç –Ø–ª—Ç–∞'
                }
            ],
            PostCategory.LOST_PETS: [
                {
                    'id': '4001',
                    'title': 'üîç –ü–æ—Ç–µ—Ä—è–ª—Å—è –∫–æ—Ç –ë–∞—Ä—Å–∏–∫!',
                    'description': '–°–µ—Ä—ã–π –ø–æ–ª–æ—Å–∞—Ç—ã–π –∫–æ—Ç, –ø—Ä–æ–ø–∞–ª 2 –∞–≤–≥—É—Å—Ç–∞ –≤ —Ä–∞–π–æ–Ω–µ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π. –û—á–µ–Ω—å —Å–∫—É—á–∞–µ–º!',
                    'date': '04.08.2025 10:30',
                    'url': f'{self.channel_url}/4001',
                    'contact': '@lost_pet_owner ‚Ä¢ +7 978 555-44-33',
                    'photo_url': 'https://via.placeholder.com/600x400/F38BA8/FFFFFF?text=üîç+–ö–æ—Ç+–ë–∞—Ä—Å–∏–∫',
                    'additional_photos': [],
                    'has_photo': True,
                    'category': 'lost_pets',
                    'category_emoji': 'üîç',
                    'urgency': 'üî• –°–†–û–ß–ù–û',
                    'location': 'üìç –ù–∞–±–µ—Ä–µ–∂–Ω–∞—è'
                }
            ]
        }
        
        return mock_data.get(category, [])
    
    def get_all_mock_posts(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã"""
        return {category.value: self.get_mock_posts(category) for category in PostCategory}
    
    def get_cached_posts(self, category: PostCategory = None) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        if (not self.last_update or 
            (datetime.now() - self.last_update).seconds > 1800):  # 30 –º–∏–Ω—É—Ç
            try:
                return self.get_channel_posts(category)
            except:
                pass
        
        if category:
            return self.posts_cache.get(category.value, []) or self.get_mock_posts(category)
        return self.posts_cache

class PetBotEnhanced:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = EnhancedChannelParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            post_text = f"{'=' * 30}\n"
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if post.get('category_emoji'):
                post_text += f"{post['category_emoji']} "
            
            post_text += f"<b>{post['title']}</b>\n"
            
            # –°—Ä–æ—á–Ω–æ—Å—Ç—å
            if post.get('urgency'):
                post_text += f"{post['urgency']}\n"
            
            post_text += f"{'=' * 30}\n\n"
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            post_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{post['description']}\n\n"
            
            # –õ–æ–∫–∞—Ü–∏—è
            if post.get('location'):
                post_text += f"{post['location']}\n"
            
            # –î–∞—Ç–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            post_text += f"üìÖ <b>–î–∞—Ç–∞:</b> {post['date']}\n"
            post_text += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {post['contact']}\n\n"
            
            # –ö–Ω–æ–ø–∫–∏
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(
                types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", url=post['url']),
                types.InlineKeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=post['title'][:50])
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "...\n\nüì¢ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=markup
                    )
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
                    if post.get('additional_photos'):
                        media_group = []
                        for photo_url in post['additional_photos'][:3]:
                            media_group.append(types.InputMediaPhoto(photo_url))
                        
                        if media_group:
                            self.bot.send_media_group(chat_id, media_group)
                    
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_category_posts(self, chat_id: int, category: PostCategory):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            posts = self.parser.get_cached_posts(category)
            
            if not posts:
                category_names = {
                    PostCategory.CATS: "–∫–æ—à–µ–∫",
                    PostCategory.DOGS: "—Å–æ–±–∞–∫", 
                    PostCategory.FREE_ITEMS: "–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                    PostCategory.LOST_PETS: "–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö"
                }
                
                self.bot.send_message(
                    chat_id,
                    f"üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {category_names[category]}.\n\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª: {self.parser.channel_url}"
                )
                return
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_headers = {
                PostCategory.CATS: "üê± <b>–ö–û–®–ö–ò –ò–©–£–¢ –î–û–ú</b>",
                PostCategory.DOGS: "üê∂ <b>–°–û–ë–ê–ö–ò –ò–©–£–¢ –î–û–ú</b>",
                PostCategory.FREE_ITEMS: "üéÅ <b>–û–¢–î–ê–ú –î–ê–†–û–ú</b>",
                PostCategory.LOST_PETS: "üîç <b>–ü–û–¢–ï–†–Ø–ù–ù–´–ï –ñ–ò–í–û–¢–ù–´–ï</b>"
            }
            
            self.bot.send_message(
                chat_id,
                f"{category_headers[category]}\n\n"
                f"üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞:\n"
                f"<a href='{self.parser.channel_url}'>–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞</a>\n\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>{len(posts)}</b>",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
            for i, post in enumerate(posts, 1):
                self.bot.send_message(
                    chat_id, 
                    f"üìã <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ {i} –∏–∑ {len(posts)}</b>",
                    parse_mode="HTML"
                )
                self.send_post(chat_id, post)
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏
            tips = {
                PostCategory.CATS: "üè† <b>–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫–æ—à–∫—É?</b>\n–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                PostCategory.DOGS: "üè† <b>–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —Å–æ–±–∞–∫—É?</b>\n–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", 
                PostCategory.FREE_ITEMS: "üéÅ <b>–ù—É–∂–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã?</b>\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                PostCategory.LOST_PETS: "üîç <b>–í–∏–¥–µ–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ?</b>\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏!"
            }
            
            self.bot.send_message(
                chat_id,
                f"üí° <b>–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
                f"{tips[category]}\n\n"
                f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> @Lapki_ruchki_Yalta_help\n"
                f"ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b> –ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª:\n"
                f"{self.parser.channel_url}"
            )

    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏")
        markup.add("üéÅ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º", "üîç –ü–æ—Ç–µ—Ä—è—à–∫–∏")
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        return markup
    
    def get_back_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥" """
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        return markup
    
    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã!</b>
            
üêæ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:

üê± <b>–ö–æ—à–∫–∏</b> - –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—à–µ–∫ –∏ –∫–æ—Ç—è—Ç
üê∂ <b>–°–æ–±–∞–∫–∏</b> - –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–±–∞–∫ –∏ —â–µ–Ω–∫–æ–≤  
üéÅ <b>–û—Ç–¥–∞–º –¥–∞—Ä–æ–º</b> - –∫–æ—Ä–º, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
üîç <b>–ü–æ—Ç–µ—Ä—è—à–∫–∏</b> - –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ

üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é ‚¨áÔ∏è"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
            self.parser.posts_cache = {category.value: [] for category in PostCategory}
            self.parser.last_update = None
            self.bot.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—è—é –≤—Å–µ –ø–æ—Å—Ç—ã...")
            
            all_posts = self.parser.get_channel_posts()
            total = sum(len(posts) for posts in all_posts.values()) if isinstance(all_posts, dict) else 0
            
            self.bot.send_message(
                message.chat.id, 
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {total} –ø–æ—Å—Ç–æ–≤\n"
                f"üê± –ö–æ—à–∫–∏: {len(all_posts.get('cats', []))}\n"
                f"üê∂ –°–æ–±–∞–∫–∏: {len(all_posts.get('dogs', []))}\n"
                f"üéÅ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º: {len(all_posts.get('free_items', []))}\n"
                f"üîç –ü–æ—Ç–µ—Ä—è—à–∫–∏: {len(all_posts.get('lost_pets', []))}"
            )
        
        @self.bot.message_handler(func=lambda m: True)
        def message_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            text = message.text
            chat_id = message.chat.id
            
            try:
                if text == "üê± –ö–æ—à–∫–∏":
                    self.bot.send_message(
                        chat_id,
                        "üê± <b>–ó–∞–≥—Ä—É–∂–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –∫–æ—à–∫–∞—Ö...</b>\n\n"
                        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                        parse_mode="HTML",
                        reply_markup=self.get_back_keyboard()
                    )
                    self.send_category_posts(chat_id, PostCategory.CATS)
                
                elif text == "üê∂ –°–æ–±–∞–∫–∏":
                    self.bot.send_message(
                        chat_id,
                        "üê∂ <b>–ó–∞–≥—Ä—É–∂–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Å–æ–±–∞–∫–∞—Ö...</b>\n\n"
                        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                        parse_mode="HTML",
                        reply_markup=self.get_back_keyboard()
                    )
                    self.send_category_posts(chat_id, PostCategory.DOGS)
                
                elif text == "üéÅ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º":
                    self.bot.send_message(
                        chat_id,
                        "üéÅ <b>–ó–∞–≥—Ä—É–∂–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è \"–û—Ç–¥–∞–º –¥–∞—Ä–æ–º\"...</b>\n\n"
                        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                        parse_mode="HTML",
                        reply_markup=self.get_back_keyboard()
                    )
                    self.send_category_posts(chat_id, PostCategory.FREE_ITEMS)
                
                elif text == "üîç –ü–æ—Ç–µ—Ä—è—à–∫–∏":
                    self.bot.send_message(
                        chat_id,
                        "üîç <b>–ó–∞–≥—Ä—É–∂–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö...</b>\n\n"
                        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                        parse_mode="HTML",
                        reply_markup=self.get_back_keyboard()
                    )
                    self.send_category_posts(chat_id, PostCategory.LOST_PETS)
                
                elif text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è":
                    sterilization_text = """üè• <b>–ü–†–û–ì–†–ê–ú–ú–ê –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–ò</b>

üéØ <b>–¶–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>
–ö–æ–Ω—Ç—Ä–æ–ª—å —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>
üîπ –ö–æ—à–∫–∏: 1500-2000 —Ä—É–±
üîπ –°–æ–±–∞–∫–∏: 2500-4000 —Ä—É–±
üîπ <b>–õ—å–≥–æ—Ç—ã:</b> –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞–º —Å–∫–∏–¥–∫–∞ 20%

üìã <b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏/–∫–∞—Å—Ç—Ä–∞—Ü–∏–∏
‚úÖ –û–±–µ–∑–±–æ–ª–∏–≤–∞–Ω–∏–µ
‚úÖ –ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏
‚úÖ –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ö–æ–¥

üè• <b>–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–ª–∏–Ω–∏–∫–∏:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç": +7 978 144-90-70
üîπ "–í–µ—Ç–ú–∏—Ä": +7 978 555-33-22
üîπ "–î–æ–∫—Ç–æ—Ä –ó–æ–æ": +7 978 777-88-99

üìû <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è:</b>
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: +7 978 144-90-70

üí° <b>–í–∞–∂–Ω–æ:</b>
–ó–∞–ø–∏—Å—å –≤–µ–¥–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ, –º–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã"""
                    
                    self.bot.send_message(
                        chat_id, 
                        sterilization_text, 
                        parse_mode="HTML",
                        reply_markup=self.get_back_keyboard()
                    )
                
                elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                    contacts_text = """üìû <b>–ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>

üë• <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º:</b>
üê± –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—à–µ–∫: +7 978 144-90-70
üê∂ –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–±–∞–∫: +7 978 888-77-66
üéÅ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º: +7 978 333-22-11
üîç –ü–æ—Ç–µ—Ä—è—à–∫–∏: +7 978 999-88-77

üè• <b>–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç" - +7 978 144-90-70
   üìç —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 12
üîπ "–í–µ—Ç–ú–∏—Ä" - +7 978 555-33-22  
   üìç —É–ª. –ö–∏—Ä–æ–≤–∞, 8
üîπ "–î–æ–∫—Ç–æ—Ä –ó–æ–æ" - +7 978 777-88-99
   üìç —É–ª. –ß–µ—Ö–æ–≤–∞, 15

üöë <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:</b>
–î–µ–∂—É—Ä–Ω—ã–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä: +7 978 911-00-11

üì± <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
üîπ Telegram: @yalta_animals_help
üîπ Instagram: @yalta_street_animals
üîπ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.com/yalta_pets

‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00"""
                    
                    self.bot.send_message(
                        chat_id, 
                        contacts_text, 
                        parse_mode="HTML",
                        reply_markup=self.get_back_keyboard()
                    )
                
                elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
                    about_text = """‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï "–õ–ê–ü–ö–ò-–†–£–ß–ö–ò –Ø–õ–¢–ê"</b>

üéØ <b>–ù–∞—à–∞ –º–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–µ–π

üìä <b>–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ 2024-2025:</b>
üê± –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ –∫–æ—à–µ–∫: <b>650+</b>
üê∂ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ —Å–æ–±–∞–∫: <b>180+</b>
üè† –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: <b>320+</b>
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: <b>75+</b>

üéØ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:</b>
üîπ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
üîπ –õ–µ—á–µ–Ω–∏–µ –∏ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è
üîπ –ü—Ä–æ—Å–≤–µ—Ç–∏—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞
üîπ –ü–æ–º–æ—â—å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –≤ —Ç—Ä—É–¥–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:</b>
üí≥ –°–±–µ—Ä–±–∞–Ω–∫: 2202 2020 1234 5678
üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: 5536 9137 8765 4321
ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC, ETH (–∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã)

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
üìß Email: volunteer@yaltapets.org
üì± Telegram: @volunteer_coordinator_yt
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 978 100-20-30

üåü <b>–ü–∞—Ä—Ç–Ω–µ—Ä—ã:</b>
üè¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≥. –Ø–ª—Ç–∞
üè• –°–µ—Ç—å –≤–µ—Ç–∫–ª–∏–Ω–∏–∫ "–ê–π–±–æ–ª–∏—Ç"
üè™ –ó–æ–æ–º–∞–≥–∞–∑–∏–Ω—ã "–ó–æ–æ–õ—ç–Ω–¥"
üì∫ –ú–µ—Å—Ç–Ω—ã–µ –°–ú–ò

üíù <b>–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º!</b>
–í–º–µ—Å—Ç–µ –º—ã –¥–µ–ª–∞–µ–º –º–∏—Ä –¥–æ–±—Ä–µ–µ! üêæ"""
                    
                    self.bot.send_message(
                        chat_id, 
                        about_text, 
                        parse_mode="HTML",
                        reply_markup=self.get_back_keyboard()
                    )
                
                elif text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
                    self.bot.send_message(
                        chat_id, 
                        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", 
                        parse_mode="HTML",
                        reply_markup=self.get_main_keyboard()
                    )
                
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    if any(word in text.lower() for word in ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω']):
                        self.bot.send_message(
                            chat_id,
                            "üê± –ò—â–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–∫–∞—Ö? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üê± –ö–æ—à–∫–∏\"",
                            reply_markup=self.get_main_keyboard()
                        )
                    elif any(word in text.lower() for word in ['—Å–æ–±–∞–∫', '—â–µ–Ω–æ–∫', '–ø–µ—Å']):
                        self.bot.send_message(
                            chat_id,
                            "üê∂ –ò—â–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–∞–∫–∞—Ö? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üê∂ –°–æ–±–∞–∫–∏\"", 
                            reply_markup=self.get_main_keyboard()
                        )
                    elif any(word in text.lower() for word in ['–ø–æ—Ç–µ—Ä—è–ª', '–Ω–∞–π–¥–µ–Ω', '–ø—Ä–æ–ø–∞–ª']):
                        self.bot.send_message(
                            chat_id,
                            "üîç –ü–æ—Ç–µ—Ä—è–ª–∏ –∏–ª–∏ –Ω–∞—à–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üîç –ü–æ—Ç–µ—Ä—è—à–∫–∏\"",
                            reply_markup=self.get_main_keyboard()
                        )
                    elif any(word in text.lower() for word in ['–æ—Ç–¥–∞–º', '–¥–∞—Ä–æ–º', '–∫–æ—Ä–º', '–ª–æ—Ç–æ–∫']):
                        self.bot.send_message(
                            chat_id,
                            "üéÅ –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –æ—Ç–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üéÅ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º\"",
                            reply_markup=self.get_main_keyboard()
                        )
                    else:
                        self.bot.send_message(
                            chat_id,
                            "‚ùì <b>–ù–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å</b>\n\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
                            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            parse_mode="HTML",
                            reply_markup=self.get_main_keyboard()
                        )
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.bot.send_message(
                    chat_id, 
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start",
                    reply_markup=self.get_main_keyboard()
                )
    
    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            all_posts = self.parser.get_cached_posts()
            total_posts = sum(len(posts) for posts in all_posts.values()) if isinstance(all_posts, dict) else 0
            
            return jsonify({
                "status": "ü§ñ Enhanced Pet Bot Running",
                "time": datetime.now().strftime('%H:%M:%S %d.%m.%Y'),
                "users": len(self.stats["users"]),
                "messages": self.stats["messages"],
                "total_posts": total_posts,
                "categories": {
                    "cats": len(all_posts.get('cats', [])),
                    "dogs": len(all_posts.get('dogs', [])), 
                    "free_items": len(all_posts.get('free_items', [])),
                    "lost_pets": len(all_posts.get('lost_pets', []))
                },
                "channel": self.parser.channel_url,
                "last_update": self.parser.last_update.strftime('%H:%M:%S %d.%m.%Y') if self.parser.last_update else "Never"
            })
        
        @self.app.route('/posts')
        def posts_api():
            try:
                all_posts = self.parser.get_cached_posts()
                return jsonify({
                    "status": "ok",
                    "data": all_posts,
                    "channel": self.parser.channel_url,
                    "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
        
        @self.app.route('/posts/<category>')
        def category_posts_api(category):
            try:
                category_map = {
                    'cats': PostCategory.CATS,
                    'dogs': PostCategory.DOGS,
                    'free': PostCategory.FREE_ITEMS,
                    'lost': PostCategory.LOST_PETS
                }
                
                if category not in category_map:
                    return jsonify({"status": "error", "message": "Invalid category"}), 400
                
                posts = self.parser.get_cached_posts(category_map[category])
                return jsonify({
                    "status": "ok",
                    "category": category,
                    "count": len(posts),
                    "posts": posts,
                    "channel": self.parser.channel_url
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
    
    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Pet Bot...")
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            all_posts = self.parser.get_cached_posts()
            total = sum(len(posts) for posts in all_posts.values()) if isinstance(all_posts, dict) else 0
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {total} –ø–æ—Å—Ç–æ–≤ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            
            for category in PostCategory:
                count = len(all_posts.get(category.value, []))
                emoji = self.parser.get_category_emoji(category)
                logger.info(f"  {emoji} {category.value}: {count} –ø–æ—Å—Ç–æ–≤")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if self.setup_webhook():
            logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            self.app.run(host='0.0.0.0', port=self.port)
        else:
            logger.warning("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ...")
            try:
                self.bot.polling(none_stop=True, interval=1, timeout=60)
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ polling: {e}")

if __name__ == "__main__":
    try:
        bot = PetBotEnhanced()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
