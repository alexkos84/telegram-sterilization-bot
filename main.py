import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–æ—à–µ–∫ –∏ —Å–æ–±–∞–∫"""
    
    def __init__(self):
        self.channel_username = 'Lapki_ruchki_Yalta_help'
        self.channel_url = f'https://t.me/{self.channel_username}'
        self.web_url = f'https://t.me/s/{self.channel_username}'
        self.headers = {'User-Agent': 'Mozilla/5.0'}
        self.posts_cache = []
        self.last_update = None
    
    def get_channel_posts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã"""
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å {self.web_url}")
            response = requests.get(self.web_url, headers=self.headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            message_divs = soup.find_all('div', class_='tgme_widget_message')
            
            posts = []
            for div in message_divs[:limit*2]:
                post_data = self.parse_message_div(div)
                if post_data and (self.is_cat_related(post_data['text']) or self.is_dog_related(post_data['text'])):
                    posts.append(post_data)
                if len(posts) >= limit:
                    break
            
            if posts:
                self.posts_cache = posts
                self.last_update = datetime.now()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
            return posts or self.get_mock_posts()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_mock_posts()
    
    def parse_message_div(self, div) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç"""
        try:
            post_id = div.get('data-post', '').split('/')[-1] or 'unknown'
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            date_elem = div.find('time', datetime=True)
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    date_str = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    pass
            
            photo_url = None
            photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and photo_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            if not text:
                return None
            
            is_cat = self.is_cat_related(text)
            is_dog = self.is_dog_related(text)
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'url': f"{self.channel_url}/{post_id}",
                'title': self.extract_title(text, is_cat, is_dog),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text),
                'photo_url': photo_url,
                'is_cat': is_cat,
                'is_dog': is_dog
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ div: {e}")
            return None
    
    def extract_title(self, text: str, is_cat: bool, is_dog: bool) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
        emoji = "üê±" if is_cat else "üê∂" if is_dog else "üêæ"
        lines = text.split('\n')
        for line in lines[:3]:
            line = line.strip()
            if line and len(line) > 10:
                title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                if len(title) > 50:
                    title = title[:50] + "..."
                return f"{emoji} {title}" if title else f"{emoji} –ñ–∏–≤–æ—Ç–Ω–æ–µ –∏—â–µ—Ç –¥–æ–º"
        return f"{emoji} –ñ–∏–≤–æ—Ç–Ω–æ–µ –∏—â–µ—Ç –¥–æ–º"
    
    def extract_description(self, text: str) -> str:
        clean_text = re.sub(r'@\w+|https?://\S+|\+?\d[\d\s\-\(\)]+', '', text)
        return clean_text[:200] + "..." if len(clean_text) > 200 else clean_text
    
    def extract_contact(self, text: str) -> str:
        phones = re.findall(r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}', text)
        usernames = re.findall(r'@\w+', text)
        contacts = []
        if phones:
            contacts.extend(phones[:1])
        if usernames:
            contacts.extend(usernames[:1])
        return ' ‚Ä¢ '.join(contacts) if contacts else "–°–º. –≤ –∫–∞–Ω–∞–ª–µ"
    
    def is_cat_related(self, text: str) -> bool:
        cat_keywords = ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É', '–∫–∞—Å—Ç—Ä', '—Å—Ç–µ—Ä–∏–ª']
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in cat_keywords)
    
    def is_dog_related(self, text: str) -> bool:
        dog_keywords = ['—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–ø—ë—Å', '–≥–∞–≤', '–ª–∞–π', '–æ–≤—á–∞—Ä', '–¥–æ–≥', '—Ç–µ—Ä—å–µ—Ä']
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in dog_keywords)
    
    def get_mock_posts(self) -> List[Dict]:
        return [
            {
                'id': '1001',
                'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫',
                'text': '–ö–æ—Ç–µ–Ω–æ–∫ 2 –º–µ—Å—è—Ü–∞, –∏—â–µ—Ç –¥–æ–º...',
                'date': '10.08.2025 14:00',
                'url': f'{self.channel_url}/1001',
                'contact': '@cat_volunteer',
                'photo_url': 'https://via.placeholder.com/600x400?text=–ö–æ—Ç–µ–Ω–æ–∫',
                'is_cat': True,
                'is_dog': False
            },
            {
                'id': '1002',
                'title': 'üê∂ –ü–µ—Å –ë–∞—Ä—Å–∏–∫',
                'text': '–í–∑—Ä–æ—Å–ª—ã–π –ø–µ—Å –∏—â–µ—Ç –¥–æ–º...',
                'date': '09.08.2025 12:30',
                'url': f'{self.channel_url}/1002',
                'contact': '+7 978 123-45-67',
                'photo_url': 'https://via.placeholder.com/600x400?text=–°–æ–±–∞–∫–∞',
                'is_cat': False,
                'is_dog': True
            }
        ]
    
    def get_cached_posts(self) -> List[Dict]:
        if not self.last_update or (datetime.now() - self.last_update).seconds > 1800:
            try:
                return self.get_channel_posts()
            except:
                pass
        return self.posts_cache if self.posts_cache else self.get_mock_posts()

class PetsBot:
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = ChannelParser()
        self.app = Flask(__name__)
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_post(self, chat_id: int, post: Dict):
        try:
            post_text = (
                f"{post['title']}\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_posts_by_type(self, chat_id: int, is_cat: bool = True):
        animal_type = "–∫–æ—à–µ–∫" if is_cat else "—Å–æ–±–∞–∫"
        try:
            posts = [p for p in self.parser.get_cached_posts() 
                    if (p['is_cat'] if is_cat else p['is_dog'])]
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    f"üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {animal_type}.\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª: {self.parser.channel_url}"
                )
                return
            
            self.bot.send_message(
                chat_id,
                f"üê± <b>–ö–û–®–ö–ò –ò–©–£–¢ –î–û–ú</b>\n\n" if is_cat else f"üê∂ <b>–°–û–ë–ê–ö–ò –ò–©–£–¢ –î–û–ú</b>\n\n",
                parse_mode="HTML"
            )
            
            for post in posts[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 –ø–æ—Å—Ç–∞–º–∏
                self.send_post(chat_id, post)
                time.sleep(0.5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def get_main_keyboard(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏")
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        return markup
    
    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            self.bot.send_message(
                message.chat.id,
                "üêæ <b>–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ø–ª—Ç—ã</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
                "üê± <b>–ö–æ—à–∫–∏</b> - –∏—â—É—Ç –¥–æ–º\n"
                "üê∂ <b>–°–æ–±–∞–∫–∏</b> - –∏—â—É—Ç –¥–æ–º\n"
                "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
                "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã",
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: m.text in ["üê± –ö–æ—à–∫–∏", "üê∂ –°–æ–±–∞–∫–∏"])
        def animals_handler(message):
            is_cat = message.text == "üê± –ö–æ—à–∫–∏"
            self.send_posts_by_type(message.chat.id, is_cat)
        
        @self.bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        def contacts_handler(message):
            self.bot.send_message(
                message.chat.id,
                "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
                "üê± –ö–æ—à–∫–∏: @cat_volunteer\n"
                "üê∂ –°–æ–±–∞–∫–∏: @dog_volunteer\n"
                "üè• –ö–ª–∏–Ω–∏–∫–∞: +7 978 000-00-01",
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: True)
        def fallback_handler(message):
            self.bot.send_message(
                message.chat.id,
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=self.get_main_keyboard()
            )
    
    def setup_routes(self):
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            if request.headers.get('content-type') == 'application/json':
                update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
                self.bot.process_new_updates([update])
                return '', 200
            return 'Bad request', 400
        
        @self.app.route('/')
        def home():
            return jsonify({
                "status": "Pets Bot is running",
                "users": len(self.stats["users"]),
                "messages": self.stats["messages"]
            })
    
    def run(self):
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            self.parser.get_cached_posts()  # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        self.app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))

if __name__ == "__main__":
    bot = PetsBot()
    bot.run()
