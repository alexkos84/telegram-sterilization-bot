import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SimpleChannelParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ"""
    
    def __init__(self):
        self.channel_username = 'Lapki_ruchki_Yalta_help'
        self.channel_url = 'https://t.me/Lapki_ruchki_Yalta_help'
        self.web_url = f'https://t.me/s/{self.channel_username}'
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        self.posts_cache = []
        self.last_update = None
    
    def get_channel_posts(self, limit: int = 3) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ"""
        try:
            logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å {self.web_url}")
            response = requests.get(self.web_url, headers=self.headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            message_divs = soup.find_all('div', class_='tgme_widget_message')
            
            posts = []
            for div in message_divs[:limit*2]:
                post_data = self.parse_message_div(div)
                if post_data and self.is_cat_related(post_data.get('text', '')):
                    posts.append(post_data)
                    
                if len(posts) >= limit:
                    break
            
            if posts:
                self.posts_cache = posts
                self.last_update = datetime.now()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ (—Å —Ñ–æ—Ç–æ: {sum(1 for p in posts if p['photo_url'])})")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤")
                
            return posts or self.get_mock_posts()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_mock_posts()
    
    def parse_message_div(self, div) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç, –∏–∑–≤–ª–µ–∫–∞—è —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            post_id = div.get('data-post', '').split('/')[-1] or 'unknown'
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            # –î–∞—Ç–∞
            date_elem = div.find('time', datetime=True)
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    date_str = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    pass
            
            # –§–æ—Ç–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–≤—å—é)
            photo_url = None
            photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and photo_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            if not text:
                return None
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'url': f"{self.channel_url}/{post_id}" if post_id else self.channel_url,
                'title': self.extract_title(text),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text),
                'photo_url': photo_url,
                'has_photo': bool(photo_url)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ div: {e}")
            return None
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: extract_title, extract_description, 
    # extract_contact, is_cat_related, get_mock_posts, get_cached_posts)

class CatBotWithPhotos:
    """–ë–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ –∏–∑ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = SimpleChannelParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            post_text = (
                f"üê± <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>"
            )
            
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_channel_posts(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ"""
        try:
            posts = self.parser.get_cached_posts()
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    "üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª: {self.parser.channel_url}"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            self.bot.send_message(
                chat_id,
                f"üê± <b>–ö–û–®–ö–ò –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞:\n"
                f"<a href='{self.parser.channel_url}'>–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞</a>",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
            for post in posts:
                self.send_post(chat_id, post)
                time.sleep(0.5)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä
            self.bot.send_message(
                chat_id,
                "üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å?</b>\n\n"
                "üè† <b>–í–∑—è—Ç—å –∫–æ—à–∫—É:</b>\n–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                "üì¢ <b>–ö–∞–Ω–∞–ª:</b> @Lapki_ruchki_Yalta_help\n\n"
                "ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª:\n"
                f"{self.parser.channel_url}"
            )

    # ... (–º–µ—Ç–æ–¥—ã get_main_keyboard, get_adoption_keyboard, setup_handlers, 
    # setup_routes, setup_webhook –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ-–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ CatBot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ...")
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤
        try:
            posts = self.parser.get_cached_posts()
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        if self.setup_webhook():
            self.app.run(host='0.0.0.0', port=self.port)
        else:
            logger.error("üö® –û—à–∏–±–∫–∞ webhook, –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
            self.bot.polling()

if __name__ == "__main__":
    bot = CatBotWithPhotos()
    bot.run()
