import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
import random
from urllib.parse import quote_plus

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AdvancedGroupParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self):
        self.groups = [
            {
                'username': 'lapki_ruchki_yalta',
                'url': 'https://t.me/lapki_ruchki_yalta',
                'type': 'cats'
            },
            {
                'username': 'yalta_aninmals',
                'url': 'https://t.me/yalta_aninmals',
                'type': 'dogs'
            }
        ]
        self.posts_cache = []
        self.last_update = None
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0',
        ]
    
    def get_headers(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ headers"""
        return {
            'User-Agent': random.choice(self.user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Cache-Control': 'max-age=0',
        }
    
    def get_group_posts(self, group_type: str = 'all', limit: int = 3) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        posts = []
        
        for group in self.groups:
            if group_type != 'all' and group['type'] != group_type:
                continue
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –≤–µ–±-–≤–µ—Ä—Å–∏—é
            group_posts = self.parse_web_version(group, limit)
            if group_posts:
                posts.extend(group_posts)
                continue
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            group_posts = self.parse_alternative_methods(group, limit)
            if group_posts:
                posts.extend(group_posts)
                continue
            
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –∏–∑ {group['username']}")
        
        if posts:
            self.posts_cache = posts
            self.last_update = datetime.now()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏")
            posts = self.get_enhanced_mock_posts(group_type, limit)
        
        return posts[:limit] if posts else []
    
    def parse_web_version(self, group: Dict, limit: int) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –≤–µ–±-–≤–µ—Ä—Å–∏—é Telegram"""
        try:
            session = requests.Session()
            session.headers.update(self.get_headers())
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL —Ñ–æ—Ä–º–∞—Ç—ã
            urls_to_try = [
                f'https://t.me/s/{group["username"]}',
                f'https://telegram.me/s/{group["username"]}',
            ]
            
            for url in urls_to_try:
                try:
                    logger.info(f"üåê –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {url}")
                    
                    response = session.get(url, timeout=15, allow_redirects=True)
                    
                    if response.status_code == 200:
                        return self.parse_html_content(response.text, group, limit)
                    else:
                        logger.warning(f"‚ùå –°—Ç–∞—Ç—É—Å {response.status_code} –¥–ª—è {url}")
                        
                except requests.RequestException as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
                    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    continue
            
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ–±-–≤–µ—Ä—Å–∏–∏: {e}")
        
        return []
    
    def parse_html_content(self, html: str, group: Dict, limit: int) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            soup = BeautifulSoup(html, 'html.parser')
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            message_selectors = [
                'div.tgme_widget_message',
                'div[data-post]',
                'div.tgme_widget_message_wrap',
            ]
            
            messages = []
            for selector in message_selectors:
                found = soup.select(selector)
                if found:
                    messages = found
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    break
            
            if not messages:
                logger.warning("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            posts = []
            for msg_div in messages[:limit * 2]:  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                post_data = self.parse_message_div(msg_div, group)
                if (post_data and 
                    self.is_animal_related(post_data.get('text', ''), group['type']) and
                    len(post_data.get('text', '')) > 20):  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
                    
                    posts.append(post_data)
                    if len(posts) >= limit:
                        break
            
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return []
    
    def parse_alternative_methods(self, group: Dict, limit: int) -> List[Dict]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
            # - RSS feeds (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            # - API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            # - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è {group['username']}")
            
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–æ–∫–∏
            return self.get_realistic_mock_posts(group, limit)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {e}")
            return []
    
    def parse_message_div(self, div, group) -> Optional[Dict]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞
            post_id = (div.get('data-post', '') or 
                      div.get('data-message-id', '') or 
                      str(hash(str(div)[:100]))[-6:])
            
            if '/' in post_id:
                post_id = post_id.split('/')[-1]
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_selectors = [
                'div.tgme_widget_message_text',
                'div.message_text',
                'div.text',
                '.tgme_widget_message_text'
            ]
            
            text = ""
            for selector in text_selectors:
                text_elem = div.select_one(selector)
                if text_elem:
                    text = text_elem.get_text(strip=True)
                    break
            
            if not text:
                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏–∑ div
                text = div.get_text(strip=True)
                if len(text) > 500:  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
                    text = text[:500] + "..."
            
            # –î–∞—Ç–∞
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            date_selectors = ['time[datetime]', 'time', '.tgme_widget_message_date']
            
            for selector in date_selectors:
                date_elem = div.select_one(selector)
                if date_elem:
                    datetime_attr = date_elem.get('datetime')
                    if datetime_attr:
                        try:
                            dt = datetime.fromisoformat(datetime_attr.replace('Z', '+00:00'))
                            date_str = dt.strftime('%d.%m.%Y %H:%M')
                        except:
                            date_str = date_elem.get_text(strip=True) or "–ù–µ–¥–∞–≤–Ω–æ"
                    break
            
            # –§–æ—Ç–æ
            photo_url = self.extract_photo_url(div)
            
            if not text or len(text) < 10:
                return None
            
            return {
                'id': post_id or 'unknown',
                'text': text,
                'date': date_str,
                'url': f"{group['url']}/{post_id}" if post_id else group['url'],
                'title': self.extract_title(text, group['type']),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text),
                'photo_url': photo_url,
                'has_photo': bool(photo_url),
                'type': group['type'],
                'source': 'parsed'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ div: {e}")
            return None
    
    def extract_photo_url(self, div) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ –∏–∑ div"""
        try:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ
            photo_selectors = [
                'a.tgme_widget_message_photo_wrap',
                'div.tgme_widget_message_photo_wrap', 
                '.tgme_widget_message_photo_wrap',
                'img',
                '[style*="background-image"]'
            ]
            
            for selector in photo_selectors:
                photo_elem = div.select_one(selector)
                if photo_elem:
                    # –ò–∑ style background-image
                    style = photo_elem.get('style', '')
                    if 'background-image' in style:
                        match = re.search(r"background-image:url\('([^']+)'\)", style)
                        if match:
                            return match.group(1)
                    
                    # –ò–∑ src –∞—Ç—Ä–∏–±—É—Ç–∞
                    src = photo_elem.get('src')
                    if src and src.startswith('http'):
                        return src
                    
                    # –ò–∑ data-src
                    data_src = photo_elem.get('data-src')
                    if data_src and data_src.startswith('http'):
                        return data_src
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return None
    
    def extract_title(self, text: str, animal_type: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        try:
            lines = [line.strip() for line in text.split('\n') if line.strip()]
            
            for line in lines[:3]:
                if len(line) > 15 and len(line) < 100:
                    # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', ' ', line)
                    title = re.sub(r'\s+', ' ', title).strip()
                    
                    if len(title) > 60:
                        title = title[:60] + "..."
                    
                    return title
            
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            defaults = {
                'cats': ['–ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º', '–ö–æ—Ç–µ–Ω–æ–∫ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏', '–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—à–∫–∏'],
                'dogs': ['–°–æ–±–∞–∫–∞ –∏—â–µ—Ç –¥–æ–º', '–©–µ–Ω–æ–∫ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏', '–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–±–∞–∫–∏']
            }
            
            return random.choice(defaults.get(animal_type, defaults['cats']))
            
        except:
            return "–ñ–∏–≤–æ—Ç–Ω–æ–µ –∏—â–µ—Ç –¥–æ–º"
    
    def extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏
        clean_text = re.sub(r'@\w+|https?://\S+|\+?[78][\d\s\-\(\)]+', '', text)
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        if len(clean_text) > 200:
            # –ò—â–µ–º –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = clean_text.split('.')
            result = ""
            for sentence in sentences:
                if len(result + sentence) < 200:
                    result += sentence + ". "
                else:
                    break
            clean_text = result.strip() or clean_text[:200] + "..."
        
        return clean_text
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        contacts = []
        
        # –¢–µ–ª–µ—Ñ–æ–Ω—ã
        phone_patterns = [
            r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}',
            r'\b9\d{2}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}\b'
        ]
        
        for pattern in phone_patterns:
            phones = re.findall(pattern, text)
            contacts.extend([re.sub(r'[\s\-\(\)]', '', phone) for phone in phones[:1]])
        
        # Username
        usernames = re.findall(r'@\w+', text)
        contacts.extend(usernames[:1])
        
        return ' ‚Ä¢ '.join(contacts) if contacts else "–°–º. –≤ –≥—Ä—É–ø–ø–µ"
    
    def is_animal_related(self, text: str, animal_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        text_lower = text.lower()
        
        if animal_type == 'cats':
            keywords = [
                '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É',
                '–∫–∞—Å—Ç—Ä', '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏—Ç', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º',
                '–∫–æ—Ç—è—Ç–∞', '–º–∞–º–∞-–∫–æ—à–∫–∞', '–±–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–ø–∏—Ç–æ–º–µ—Ü',
                '–ª–æ—Ç–æ–∫', '–∫–æ—Ä–º', '–∏—â–µ—Ç', '—Å–µ–º—å', '—Ö–æ–∑—è–∏–Ω'
            ]
        else:
            keywords = [
                '—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–≥–∞–≤', '–ª–∞–π', '–æ–≤—á–∞—Ä–∫',
                '–¥–æ–≥', '—Ç–µ—Ä—å–µ—Ä', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º', '—â–µ–Ω–æ–∫',
                '—â–µ–Ω–∫–∏', '–ø–∏—Ç–æ–º–µ—Ü', '–ø–æ—Ä–æ–¥–∏—Å—Ç', '–º–µ—Ç–∏—Å',
                '–≤—ã–≥—É–ª', '–æ—à–µ–π–Ω–∏–∫', '–ø–æ–≤–æ–¥–æ–∫', '–∏—â–µ—Ç'
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        matches = sum(1 for keyword in keywords if keyword in text_lower)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ—Å—Ç—ã
        excluded = ['–ø—Ä–æ–¥–∞–º', '–∫—É–ø–ª—é', '—É—Å–ª—É–≥', '—Ä–µ–º–æ–Ω—Ç', '—Ä–∞–±–æ—Ç']
        has_excluded = any(word in text_lower for word in excluded)
        
        return matches >= 2 and not has_excluded and len(text) > 30
    
    def get_realistic_mock_posts(self, group: Dict, limit: int) -> List[Dict]:
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if group['type'] == 'cats':
            templates = [
                {
                    'title': '–ö–æ—Ç–µ–Ω–æ–∫ {} –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: {} –º–µ—Å—è—Ü–∞, {}, {} –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, {}. –ö –ª–æ—Ç–∫—É –ø—Ä–∏—É—á–µ–Ω, —Å –¥—Ä—É–≥–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –ª–∞–¥–∏—Ç.',
                    'names': ['–ú—É—Ä–∑–∏–∫', '–ë–∞—Ä—Å–∏–∫', '–°–Ω–µ–∂–æ–∫', '–†—ã–∂–∏–∫', '–ü—É—à–æ–∫', '–¢–∏—à–∫–∞'],
                    'ages': ['1-2', '2-3', '3-4', '4-5'],
                    'genders': ['–º–∞–ª—å—á–∏–∫', '–¥–µ–≤–æ—á–∫–∞'],
                    'colors': ['—Ä—ã–∂–∏–π', '—Å–µ—Ä—ã–π', '—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Ç—Ä–µ—Ö—Ü–≤–µ—Ç–Ω—ã–π', '–ø–æ–ª–æ—Å–∞—Ç—ã–π'],
                    'traits': ['–æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π', '–ª–∞—Å–∫–æ–≤—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π', '–∞–∫—Ç–∏–≤–Ω—ã–π', '—É–º–Ω—ã–π']
                }
            ]
        else:
            templates = [
                {
                    'title': '–©–µ–Ω–æ–∫ {} –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: {} –º–µ—Å—è—Ü–µ–≤, {}, {} –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, {}. –•–æ—Ä–æ—à–æ –ª–∞–¥–∏—Ç —Å –¥–µ—Ç—å–º–∏.',
                    'names': ['–ë–æ–±–∏–∫', '–®–∞—Ä–∏–∫', '–î—Ä—É–∂–æ–∫', '–õ–∞–π–∫–∞', '–î–∂–µ–∫', '–ë–µ–ª–∫–∞'],
                    'ages': ['2-3', '3-4', '4-6', '6-8'],
                    'genders': ['–º–∞–ª—å—á–∏–∫', '–¥–µ–≤–æ—á–∫–∞'],
                    'colors': ['—á–µ—Ä–Ω—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–±–µ–ª—ã–π', '—Ä—ã–∂–∏–π', '–ø—è—Ç–Ω–∏—Å—Ç—ã–π'],
                    'traits': ['–æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '—É–º–Ω—ã–π', '–ø–æ—Å–ª—É—à–Ω—ã–π', '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π']
                }
            ]
        
        posts = []
        template = templates[0]
        
        for i in range(limit):
            name = random.choice(template['names'])
            age = random.choice(template['ages'])
            gender = random.choice(template['genders'])
            color = random.choice(template['colors'])
            trait = random.choice(template['traits'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            phone_endings = ['45-67', '78-90', '12-34', '56-78', '90-12']
            username_nums = random.randint(1, 99)
            
            posts.append({
                'id': f'mock_{group["type"]}_{1000 + i}',
                'title': template['title'].format(name),
                'description': template['description'].format(age, gender, color, trait),
                'date': self.generate_recent_date(),
                'url': f'{group["url"]}/{1000 + i}',
                'contact': f'@volunteer{username_nums} ‚Ä¢ +7 978 {random.choice(phone_endings)}',
                'photo_url': f'https://picsum.photos/400/300?random={i}&{group["type"]}',
                'has_photo': True,
                'type': group['type'],
                'source': 'mock'
            })
        
        return posts
    
    def generate_recent_date(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–∞–≤–Ω—é—é –¥–∞—Ç—É"""
        import random
        from datetime import timedelta
        
        days_ago = random.randint(0, 7)
        hours_ago = random.randint(0, 23)
        minutes_ago = random.randint(0, 59)
        
        recent_date = datetime.now() - timedelta(days=days_ago, hours=hours_ago, minutes=minutes_ago)
        return recent_date.strftime('%d.%m.%Y %H:%M')
    
    def get_enhanced_mock_posts(self, group_type: str = 'cats', limit: int = 3) -> List[Dict]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        posts = []
        
        for group in self.groups:
            if group_type != 'all' and group['type'] != group_type:
                continue
            
            group_posts = self.get_realistic_mock_posts(group, limit)
            posts.extend(group_posts)
        
        return posts[:limit]
    
    def get_cached_posts(self, group_type: str = 'all') -> List[Dict]:
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        if (not self.last_update or 
            (datetime.now() - self.last_update).seconds > 1800):
            
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...")
            try:
                fresh_posts = self.get_group_posts(group_type, 3)
                if fresh_posts:
                    return fresh_posts
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—ç—à
        cached = [p for p in self.posts_cache 
                 if group_type == 'all' or p['type'] == group_type]
        
        return cached or self.get_enhanced_mock_posts(group_type, 3)

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞
class CatBotWithPhotos:
    """–ë–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AdvancedGroupParser()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            source_tag = ' üì°' if post.get('source') == 'parsed' else ' üé≠'
            
            post_text = (
                f"{emoji} <b>{post['title']}</b>{source_tag}\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ</a>"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_group_posts(self, chat_id: int, animal_type: str = 'cats'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    "üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—É: {self.parser.groups[0]['url'] if animal_type == 'cats' else self.parser.groups[1]['url']}"
                )
                return
            
            group_name = "–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞" if animal_type == 'cats' else "–Ø–ª—Ç–∞ –ñ–∏–≤–æ—Ç–Ω—ã–µ"
            group_url = self.parser.groups[0]['url'] if animal_type == 'cats' else self.parser.groups[1]['url']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
            mock_count = len(posts) - parsed_count
            
            status_text = ""
            if parsed_count > 0:
                status_text = f"\n‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {parsed_count} –∏–∑ {len(posts)}"
            else:
                status_text = f"\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã (–ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
            
            self.bot.send_message(
                chat_id,
                f"{'üê±' if animal_type == 'cats' else 'üê∂'} <b>{'–ö–û–®–ö–ò' if animal_type == 'cats' else '–°–û–ë–ê–ö–ò'} –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã:\n"
                f"<a href='{group_url}'>{group_name}</a>{status_text}",
                parse_mode="HTML"
            )
            
            for post in posts:
                self.send_post(chat_id, post)
                time.sleep(0.5)
            
            self.bot.send_message(
                chat_id,
                "üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å?</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å {'–∫–æ—à–∫—É' if animal_type == 'cats' else '—Å–æ–±–∞–∫—É'}:</b>\n–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üì¢ <b>–ì—Ä—É–ø–ø–∞:</b> {group_url}\n\n"
                "ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≥—Ä—É–ø–ø—É:\n"
                f"{self.parser.groups[0]['url'] if animal_type == 'cats' else self.parser.groups[1]['url']}"
            )

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        return markup
    
    def get_adoption_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º", "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup
    
    def get_sterilization_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup

    def load_html_file(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ assets"""
        try:
            with open(f'assets/{filename}', 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML: {e}")
            return f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ({filename})"

    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üêæ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ª–∏—á–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∂–∏–≤–æ—Ç–Ω—ã–µ –∏—â—É—Ç –¥–æ–º
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
            self.parser.posts_cache = []
            self.parser.last_update = None
            self.bot.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—è—é –ø–æ—Å—Ç—ã...")
            posts = self.parser.get_group_posts()
            parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
            self.bot.send_message(
                message.chat.id, 
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {len(posts)} –ø–æ—Å—Ç–æ–≤\n"
                f"üì° –°–ø–∞—Ä—Å–µ–Ω–æ: {parsed_count}\n"
                f"üé≠ –ú–æ–∫–æ–≤: {len(posts) - parsed_count}"
            )
        
        @self.bot.message_handler(commands=['debug'])
        def debug_handler(message):
            """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø
                debug_info = ["üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"]
                
                for group in self.parser.groups:
                    debug_info.append(f"üìã <b>{group['username']}:</b>")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                    try:
                        import requests
                        response = requests.get(f"https://t.me/s/{group['username']}", 
                                              headers=self.parser.get_headers(), 
                                              timeout=10)
                        status = f"‚úÖ HTTP {response.status_code}" if response.status_code == 200 else f"‚ùå HTTP {response.status_code}"
                        debug_info.append(f"   –°—Ç–∞—Ç—É—Å: {status}")
                        
                        if response.status_code == 200:
                            from bs4 import BeautifulSoup
                            soup = BeautifulSoup(response.text, 'html.parser')
                            messages = soup.select('div.tgme_widget_message')
                            debug_info.append(f"   –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(messages)}")
                        
                    except Exception as e:
                        debug_info.append(f"   –û—à–∏–±–∫–∞: {str(e)[:50]}")
                    
                    debug_info.append("")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
                cached_posts = len(self.parser.posts_cache)
                last_update = self.parser.last_update.strftime('%H:%M:%S') if self.parser.last_update else "–ù–∏–∫–æ–≥–¥–∞"
                
                debug_info.extend([
                    f"üìä <b>–ö—ç—à:</b>",
                    f"   –ü–æ—Å—Ç–æ–≤ –≤ –∫—ç—à–µ: {cached_posts}",
                    f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}"
                ])
                
                self.bot.send_message(
                    message.chat.id,
                    "\n".join(debug_info),
                    parse_mode="HTML"
                )
                
            except Exception as e:
                self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        
        @self.bot.message_handler(func=lambda m: m.text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def sterilization_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            try:
                with open('assets/images/sterilization.jpg', 'rb') as photo:
                    self.bot.send_photo(
                        message.chat.id,
                        photo,
                        caption="üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                        parse_mode="HTML",
                        reply_markup=self.get_sterilization_keyboard()
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                self.bot.send_message(
                    message.chat.id,
                    "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                    parse_mode="HTML",
                    reply_markup=self.get_sterilization_keyboard()
                )
        
        @self.bot.message_handler(func=lambda m: m.text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def paid_sterilization_handler(message):
            self.bot.send_message(
                message.chat.id,
                self.load_html_file('paid_text.html'),
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def free_sterilization_handler(message):
            self.bot.send_message(
                message.chat.id,
                self.load_html_file('free_text.html'),
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        def adoption_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            info_text = """üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üê± <b>–ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã

üê∂ <b>–°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã

üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>
–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
            
            self.bot.send_message(
                message.chat.id, 
                info_text, 
                parse_mode="HTML",
                reply_markup=self.get_adoption_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º")
        def cats_handler(message):
            self.send_group_posts(message.chat.id, 'cats')
        
        @self.bot.message_handler(func=lambda m: m.text == "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        def dogs_handler(message):
            self.send_group_posts(message.chat.id, 'dogs')
        
        @self.bot.message_handler(func=lambda m: m.text == "üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        def post_ad_handler(message):
            info_text = f"""üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>

üì¢ <b>–ì—Ä—É–ø–ø—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>
<a href="{self.parser.groups[0]['url']}">–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞</a> (–∫–æ—à–∫–∏)
<a href="{self.parser.groups[1]['url']}">–Ø–ª—Ç–∞ –ñ–∏–≤–æ—Ç–Ω—ã–µ</a> (—Å–æ–±–∞–∫–∏)

‚úçÔ∏è <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å:</b>
1Ô∏è‚É£ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É
2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
3Ô∏è‚É£ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏:
   ‚Ä¢ –ö–æ—à–∫–∏: +7 978 000-00-01
   ‚Ä¢ –°–æ–±–∞–∫–∏: +7 978 000-00-02

üìã <b>–ù—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üîπ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –æ–∫—Ä–∞—Å
üîπ –•–∞—Ä–∞–∫—Ç–µ—Ä
üîπ –ó–¥–æ—Ä–æ–≤—å–µ (–ø—Ä–∏–≤–∏–≤–∫–∏, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è)
üîπ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
            
            self.bot.send_message(message.chat.id, info_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        def contacts_handler(message):
            contacts_text = """üìû <b>–ö–û–ù–¢–ê–ö–¢–´</b>

üë• <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã:</b>
üîπ –ö–æ—à–∫–∏: +7 978 144-90-70
üîπ –°–æ–±–∞–∫–∏: +7 978 000-00-02
üîπ –õ–µ—á–µ–Ω–∏–µ: +7 978 000-00-03

üè• <b>–ö–ª–∏–Ω–∏–∫–∏:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-04
üîπ "–í–µ—Ç–ú–∏—Ä": +7 978 000-00-05

üì± <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
üîπ Telegram: @yalta_animals
üîπ Instagram: @yalta_street_animals"""
            
            self.bot.send_message(message.chat.id, contacts_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        def about_handler(message):
            about_text = """‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï</b>

üéØ <b>–ú–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã

üìä <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 500+ –∫–æ—à–µ–∫, 200+ —Å–æ–±–∞–∫
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ: 200+ –∫–æ—Ç—è—Ç, 100+ —â–µ–Ω–∫–æ–≤
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 50+ –∞–∫—Ç–∏–≤–Ω—ã—Ö

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å:</b>
–ö–∞—Ä—Ç–∞: 2202 2020 0000 0000

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ü–∏—à–∏—Ç–µ @animal_coordinator"""
            
            self.bot.send_message(message.chat.id, about_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
        def back_handler(message):
            self.bot.send_message(
                message.chat.id, 
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: True)
        def default_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            self.bot.send_message(
                message.chat.id,
                "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=self.get_main_keyboard()
            )
    
    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            return jsonify({
                "status": "ü§ñ Animal Bot Running (Enhanced)",
                "time": datetime.now().strftime('%H:%M:%S'),
                "users": len(self.stats["users"]),
                "messages": self.stats["messages"],
                "groups": [g['url'] for g in self.parser.groups],
                "cache_posts": len(self.parser.posts_cache),
                "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None
            })
        
        @self.app.route('/posts')
        def posts_api():
            try:
                posts = self.parser.get_cached_posts()
                parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
                
                return jsonify({
                    "status": "ok",
                    "count": len(posts),
                    "parsed": parsed_count,
                    "mocks": len(posts) - parsed_count,
                    "posts": posts,
                    "groups": [g['url'] for g in self.parser.groups],
                    "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
        
        @self.app.route('/force_update')
        def force_update():
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
            try:
                self.parser.posts_cache = []
                self.parser.last_update = None
                posts = self.parser.get_group_posts('all', 5)
                parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
                
                return jsonify({
                    "status": "updated",
                    "count": len(posts),
                    "parsed": parsed_count,
                    "mocks": len(posts) - parsed_count,
                    "time": datetime.now().isoformat()
                })
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                return jsonify({"status": "error", "message": str(e)}), 500
    
    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced AnimalBot...")
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤
        try:
            posts = self.parser.get_cached_posts()
            parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ (–ø–∞—Ä—Å–∏–Ω–≥: {parsed_count}, –º–æ–∫–∏: {len(posts) - parsed_count})")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        if self.setup_webhook():
            self.app.run(host='0.0.0.0', port=self.port)
        else:
            logger.error("üö® –û—à–∏–±–∫–∞ webhook, –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
            try:
                self.bot.polling(none_stop=True, interval=0, timeout=20)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
                time.sleep(5)
                self.bot.polling()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã
    os.makedirs('assets/images', exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏
    if not os.path.exists('assets/free_text.html'):
        with open('assets/free_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üÜì –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–ü—Ä–æ–≥—Ä–∞–º–º—ã:</b>
üîπ –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ø–ª—Ç—ã
üîπ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

üìã <b>–£—Å–ª–æ–≤–∏—è:</b>
‚úÖ –ë–µ–∑–¥–æ–º–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
‚úÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–∑ –º–∞–ª–æ–∏–º—É—â–∏—Ö —Å–µ–º–µ–π
‚úÖ –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–µ

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>
üîπ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: +7 978 144-90-70
üîπ –ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-11
üîπ –ì—Ä—É–ø–ø–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: @yalta_free_sterilization

üìç <b>–ê–¥—Ä–µ—Å–∞ –∫–ª–∏–Ω–∏–∫:</b>
üè• —É–ª. –ö–∏—Ä–æ–≤–∞, 15 (–ø–Ω-–ø—Ç 9:00-18:00)
üè• —É–ª. –õ–µ–Ω–∏–Ω–∞, 32 (–ø–Ω-—Å–± 8:00-20:00)

üìã <b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>
üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö (–¥–ª—è –ª—å–≥–æ—Ç–Ω–∏–∫–æ–≤)
üìÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ (–¥–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö)

‚è∞ <b>–ó–∞–ø–∏—Å—å –∑–∞—Ä–∞–Ω–µ–µ!</b> –ú–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.""")

    if not os.path.exists('assets/paid_text.html'):
        with open('assets/paid_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üí∞ –ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏:</b>

üîπ <b>"–ê–π–±–æ–ª–∏—Ç"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 3000‚ÇΩ | –°–æ–±–∞–∫–∏: –æ—Ç 5000‚ÇΩ
   üìû +7 978 000-00-12
   üìç —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 14

üîπ <b>"–í–µ—Ç–ú–∏—Ä"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 2500‚ÇΩ | –°–æ–±–∞–∫–∏: –æ—Ç 4500‚ÇΩ
   üìû +7 978 000-00-13
   üìç —É–ª. –ü—É—à–∫–∏–Ω–∞, 28

üîπ <b>"–ó–æ–æ–≤–µ—Ç—Ü–µ–Ω—Ç—Ä"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 3500‚ÇΩ | –°–æ–±–∞–∫–∏: –æ—Ç 5500‚ÇΩ
   üìû +7 978 000-00-14
   üìç —É–ª. –ß–µ—Ö–æ–≤–∞, 45

üåü <b>–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚úîÔ∏è –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
‚úîÔ∏è –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞—Ä–∫–æ–∑
‚úîÔ∏è –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ö–æ–¥
‚úîÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞
‚úîÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä

üí° <b>–°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏:</b>
üéØ –í–æ–ª–æ–Ω—Ç–µ—Ä–∞–º –∏ –æ–ø–µ–∫—É–Ω–∞–º - 20%
üéØ –ü—Ä–∏ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö - 15%
üéØ –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞–º - 10%
üéØ –ê–∫—Ü–∏—è "–°—Ç–µ—Ä–∏–ª–∏–∑—É–π –≤ –º–∞–µ" - 25%

üìÖ <b>–ó–∞–ø–∏—Å—å –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>
–ó–≤–æ–Ω–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –∑–∞ 1-2 –Ω–µ–¥–µ–ª–∏.

üî¨ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
–ê–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏, –£–ó–ò, —á–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ –∂–µ–ª–∞–Ω–∏—é""")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        bot = CatBotWithPhotos()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
