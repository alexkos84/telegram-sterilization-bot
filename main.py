import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
import random
from urllib.parse import quote_plus
import cloudscraper

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RobustTelegramParser:
    """–£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    
    def __init__(self):
        self.groups = [
            {
                'username': 'lapki_ruchki_yalta',
                'url': 'https://t.me/lapki_ruchki_yalta',
                'type': 'cats'
            },
            {
                'username': 'yalta_aninmals',
                'url': 'https://t.me/yalta_aninmals',
                'type': 'dogs'
            }
        ]
        self.posts_cache = []
        self.last_update = None
        self.last_attempt = None
        self.failure_count = 0
        
        # –°–æ–∑–¥–∞–µ–º CloudScraper —Å–µ—Å—Å–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
        try:
            self.scraper = cloudscraper.create_scraper(
                browser={
                    'browser': 'chrome',
                    'platform': 'windows',
                    'mobile': False
                }
            )
        except:
            self.scraper = requests.Session()
            logger.warning("‚ö†Ô∏è CloudScraper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π requests")
        
        # –†–æ—Ç–∞—Ü–∏—è User-Agents
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0',
        ]
        
        # –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–∏—Å—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
        self.proxy_services = [
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        ]
    
    def should_attempt_parsing(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø—ã—Ç–∞—Ç—å—Å—è –ø–∞—Ä—Å–∏—Ç—å (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)"""
        if not self.last_attempt:
            return True
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        cooldown_minutes = min(self.failure_count * 5, 60)  # –º–∞–∫—Å–∏–º—É–º —á–∞—Å
        time_passed = (datetime.now() - self.last_attempt).total_seconds() / 60
        
        return time_passed > cooldown_minutes
    
    def get_advanced_headers(self):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        return {
            'User-Agent': random.choice(self.user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
            'Cache-Control': 'max-age=0',
            'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"'
        }
    
    def get_group_posts(self, group_type: str = 'all', limit: int = 3) -> List[Dict]:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        self.last_attempt = datetime.now()
        
        if not self.should_attempt_parsing():
            logger.info(f"‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω (–∫—É–ª–¥–∞—É–Ω: {self.failure_count * 5} –º–∏–Ω)")
            return self.get_smart_mock_posts(group_type, limit)
        
        posts = []
        success = False
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: CloudScraper —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        posts = self.try_cloudscraper_method(group_type, limit)
        if posts:
            success = True
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        if not success:
            posts = self.try_multiple_attempts(group_type, limit)
            if posts:
                success = True
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL —Ñ–æ—Ä–º–∞—Ç—ã
        if not success:
            posts = self.try_alternative_urls(group_type, limit)
            if posts:
                success = True
        
        if success:
            self.posts_cache = posts
            self.last_update = datetime.now()
            self.failure_count = max(0, self.failure_count - 1)  # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        else:
            self.failure_count += 1
            logger.warning(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ #{self.failure_count})")
            posts = self.get_smart_mock_posts(group_type, limit)
        
        return posts
    
    def try_cloudscraper_method(self, group_type: str, limit: int) -> List[Dict]:
        """–ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ CloudScraper"""
        try:
            posts = []
            
            for group in self.groups:
                if group_type != 'all' and group['type'] != group_type:
                    continue
                
                url = f'https://t.me/s/{group["username"]}'
                logger.info(f"üåê CloudScraper: {url}")
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º scraper
                self.scraper.headers.update(self.get_advanced_headers())
                
                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                response = self.scraper.get(url, timeout=20)
                
                if response.status_code == 200:
                    group_posts = self.parse_html_content(response.text, group, limit)
                    if group_posts:
                        posts.extend(group_posts)
                        logger.info(f"‚úÖ CloudScraper: –ø–æ–ª—É—á–µ–Ω–æ {len(group_posts)} –ø–æ—Å—Ç–æ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è CloudScraper: HTTP {response.status_code}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                time.sleep(random.uniform(2, 5))
            
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå CloudScraper –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def try_multiple_attempts(self, group_type: str, limit: int) -> List[Dict]:
        """–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            posts = []
            
            for group in self.groups:
                if group_type != 'all' and group['type'] != group_type:
                    continue
                
                # 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                for attempt in range(3):
                    try:
                        session = requests.Session()
                        session.headers.update(self.get_advanced_headers())
                        
                        # –†–∞–∑–Ω—ã–µ URL —Ñ–æ—Ä–º–∞—Ç—ã
                        urls = [
                            f'https://t.me/s/{group["username"]}',
                            f'https://telegram.me/s/{group["username"]}'
                        ]
                        
                        for url in urls:
                            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {url}")
                            
                            response = session.get(
                                url, 
                                timeout=15,
                                allow_redirects=True
                            )
                            
                            if response.status_code == 200:
                                group_posts = self.parse_html_content(response.text, group, limit)
                                if group_posts:
                                    posts.extend(group_posts)
                                    logger.info(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ø–æ–ª—É—á–µ–Ω–æ {len(group_posts)} –ø–æ—Å—Ç–æ–≤")
                                    break
                            
                            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                            time.sleep(random.uniform(1, 3))
                        
                        if posts:
                            break  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Å—Ç—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–µ
                            
                    except requests.RequestException as e:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                        time.sleep(random.uniform(2, 4))
                        continue
                
                # –ë–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                time.sleep(random.uniform(3, 7))
            
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏: {e}")
            return []
    
    def try_alternative_urls(self, group_type: str, limit: int) -> List[Dict]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        # - RSS —Ñ–∏–¥—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        # - API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        # - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
        return []
    
    def parse_html_content(self, html: str, group: Dict, limit: int) -> List[Dict]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ HTML"""
        try:
            soup = BeautifulSoup(html, 'html.parser')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if "Cloudflare" in html or "checking your browser" in html.lower():
                logger.warning("‚ö†Ô∏è Cloudflare –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                return []
            
            if len(html) < 1000:
                logger.warning("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π HTML –æ—Ç–≤–µ—Ç")
                return []
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            message_selectors = [
                'div.tgme_widget_message',
                'div[data-post]',
                'div.tgme_widget_message_wrap',
                '.tgme_widget_message'
            ]
            
            messages = []
            for selector in message_selectors:
                found = soup.select(selector)
                if found and len(found) > 0:
                    messages = found
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found)} —Å–æ–æ–±—â–µ–Ω–∏–π: {selector}")
                    break
            
            if not messages:
                logger.warning("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
                logger.debug(f"HTML preview: {html[:500]}")
                return []
            
            posts = []
            processed = 0
            
            for msg_div in messages:
                if processed >= limit * 2:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    break
                
                post_data = self.parse_message_div(msg_div, group)
                if post_data:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                    if (self.is_valid_post(post_data, group['type']) and
                        len(post_data.get('text', '')) > 30):
                        posts.append(post_data)
                        if len(posts) >= limit:
                            break
                
                processed += 1
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return []
    
    def parse_message_div(self, div, group) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # ID –ø–æ—Å—Ç–∞
            post_id = (div.get('data-post', '') or 
                      div.get('data-message-id', '') or
                      f"msg_{hash(str(div)[:100]) % 10000}")
            
            if '/' in str(post_id):
                post_id = str(post_id).split('/')[-1]
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = self.extract_text(div)
            if not text or len(text) < 20:
                return None
            
            # –î–∞—Ç–∞
            date_str = self.extract_date(div)
            
            # –§–æ—Ç–æ
            photo_url = self.extract_photo(div)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'url': f"{group['url']}/{post_id}",
                'title': self.extract_smart_title(text, group['type']),
                'description': self.extract_smart_description(text),
                'contact': self.extract_contact(text),
                'photo_url': photo_url,
                'has_photo': bool(photo_url),
                'type': group['type'],
                'source': 'parsed'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def extract_text(self, div) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ div"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        text_selectors = [
            '.tgme_widget_message_text',
            'div.tgme_widget_message_text',
            '.message_text',
            '.text'
        ]
        
        for selector in text_selectors:
            text_elem = div.select_one(selector)
            if text_elem:
                text = text_elem.get_text(separator=' ', strip=True)
                if text:
                    return text
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ div
        full_text = div.get_text(separator=' ', strip=True)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        cleaned = re.sub(r'(Views|–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤|Subscribe|–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è).*$', '', full_text, flags=re.IGNORECASE)
        
        return cleaned if len(cleaned) > 20 else full_text
    
    def extract_date(self, div) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã"""
        date_selectors = ['time[datetime]', '.tgme_widget_message_date time', 'time']
        
        for selector in date_selectors:
            date_elem = div.select_one(selector)
            if date_elem:
                datetime_attr = date_elem.get('datetime')
                if datetime_attr:
                    try:
                        # –ü–∞—Ä—Å–∏–º ISO datetime
                        dt = datetime.fromisoformat(datetime_attr.replace('Z', '+00:00'))
                        return dt.strftime('%d.%m.%Y %H:%M')
                    except:
                        pass
                
                # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                date_text = date_elem.get_text(strip=True)
                if date_text:
                    return date_text
        
        return "–ù–µ–¥–∞–≤–Ω–æ"
    
    def extract_photo(self, div) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ"""
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ñ–æ—Ç–æ
        photo_selectors = [
            '.tgme_widget_message_photo_wrap[style*="background-image"]',
            'a.tgme_widget_message_photo_wrap[style*="background-image"]',
            'img[src]',
            '[data-src]'
        ]
        
        for selector in photo_selectors:
            photo_elem = div.select_one(selector)
            if photo_elem:
                # –ò–∑ style background-image
                style = photo_elem.get('style', '')
                if 'background-image' in style:
                    match = re.search(r"background-image:url\('([^']+)'\)", style)
                    if match:
                        return match.group(1)
                
                # –ò–∑ src –∏–ª–∏ data-src
                for attr in ['src', 'data-src']:
                    url = photo_elem.get(attr)
                    if url and url.startswith('http'):
                        return url
        
        return None
    
    def extract_smart_title(self, text: str, animal_type: str) -> str:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        keywords = ['–∏—â–µ—Ç', '–¥–æ–º', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–æ—Ç–¥–∞', '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è–ª']
        
        for line in lines[:5]:
            if len(line) > 15 and any(keyword in line.lower() for keyword in keywords):
                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–µ–≥–æ
                title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', ' ', line)
                title = re.sub(r'\s+', ' ', title).strip()
                
                if len(title) > 60:
                    title = title[:60] + "..."
                
                return title
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        defaults = {
            'cats': ['–ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º', '–ö–æ—Ç–µ–Ω–æ–∫ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏', '–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—à–∫–∏'],
            'dogs': ['–°–æ–±–∞–∫–∞ –∏—â–µ—Ç –¥–æ–º', '–©–µ–Ω–æ–∫ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏', '–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–±–∞–∫–∏']
        }
        
        return random.choice(defaults.get(animal_type, defaults['cats']))
    
    def extract_smart_description(self, text: str) -> str:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        clean_text = re.sub(r'(@\w+|https?://\S+|\+?[78][\d\s\-\(\)]{10,})', '', text)
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if len(clean_text) > 150:
            sentences = clean_text.split('.')
            result = ""
            for sentence in sentences:
                if len(result + sentence + '.') <= 150:
                    result += sentence.strip() + '. '
                else:
                    break
            return result.strip() or clean_text[:150] + "..."
        
        return clean_text
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        contacts = []
        
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
        phone_patterns = [
            r'\+?7[\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}',
            r'\+?8[\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}',
            r'9\d{2}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}'
        ]
        
        for pattern in phone_patterns:
            phones = re.findall(pattern, text)
            if phones:
                # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_phone = re.sub(r'[\s\-\(\)]', '', phones[0])
                contacts.append(f"+7{clean_phone[-10:]}" if not clean_phone.startswith(('+7', '+8')) else clean_phone)
                break
        
        # Username
        usernames = re.findall(r'@\w+', text)
        if usernames:
            contacts.append(usernames[0])
        
        return ' ‚Ä¢ '.join(contacts[:2]) if contacts else "–°–º. –≤ –≥—Ä—É–ø–ø–µ"
    
    def is_valid_post(self, post: Dict, animal_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞"""
        text = post.get('text', '').lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if animal_type == 'cats':
            animal_keywords = ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–º—É—Ä–∑', '–º—è—É', '–ø–∏—Ç–æ–º–µ—Ü']
        else:
            animal_keywords = ['—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–ª–∞–π', '–ø–∏—Ç–æ–º–µ—Ü']
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        action_keywords = ['–∏—â–µ—Ç', '–¥–æ–º', '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–æ—Ç–¥–∞', '–Ω–∞–π–¥–µ–Ω', '—Å–µ–º—å', '—Ö–æ–∑—è']
        
        # –ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        exclude_keywords = ['–ø—Ä–æ–¥–∞–º', '–∫—É–ø–ª—é', '—É—Å–ª—É–≥', '—Ä–µ–∫–ª–∞–º', '—Å–ø–∞–º']
        
        has_animal = any(keyword in text for keyword in animal_keywords)
        has_action = any(keyword in text for keyword in action_keywords)
        has_exclude = any(keyword in text for keyword in exclude_keywords)
        
        return has_animal and has_action and not has_exclude and len(text) > 30
    
    def get_smart_mock_posts(self, group_type: str, limit: int) -> List[Dict]:
        """–£–º–Ω—ã–µ –º–æ–∫–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        if group_type == 'cats':
            mock_data = [
                {
                    'names': ['–ú—É—Ä–∫–∞', '–ë–∞—Ä—Å–∏–∫', '–°–Ω–µ–∂–æ–∫', '–†—ã–∂–∏–∫', '–¢–∏—à–∫–∞', '–ü—É—à–æ–∫'],
                    'ages': ['2 –º–µ—Å—è—Ü–∞', '3-4 –º–µ—Å—è—Ü–∞', '6 –º–µ—Å—è—Ü–µ–≤', '1 –≥–æ–¥', '2 –≥–æ–¥–∞'],
                    'colors': ['—Ä—ã–∂–∏–π', '—Å–µ—Ä—ã–π', '—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Ç—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–∞—è', '–ø–æ–ª–æ—Å–∞—Ç—ã–π'],
                    'traits': ['–∏–≥—Ä–∏–≤—ã–π', '–ª–∞—Å–∫–æ–≤—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π', '—É–º–Ω—ã–π', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'],
                    'health': ['–ø—Ä–∏–≤–∏—Ç', '–∑–¥–æ—Ä–æ–≤', '–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞', '–æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–æ–≤']
                }
            ]
        else:
            mock_data = [
                {
                    'names': ['–ë–æ–±–∏–∫', '–®–∞—Ä–∏–∫', '–î—Ä—É–∂–æ–∫', '–õ–∞–π–∫–∞', '–î–∂–µ–∫', '–ë–µ–ª–∫–∞'],
                    'ages': ['3 –º–µ—Å—è—Ü–∞', '4-5 –º–µ—Å—è—Ü–µ–≤', '6 –º–µ—Å—è—Ü–µ–≤', '1 –≥–æ–¥', '2 –≥–æ–¥–∞'],
                    'colors': ['—á–µ—Ä–Ω—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–±–µ–ª—ã–π', '—Ä—ã–∂–∏–π', '–ø—è—Ç–Ω–∏—Å—Ç—ã–π'],
                    'traits': ['–∞–∫—Ç–∏–≤–Ω—ã–π', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '—É–º–Ω—ã–π', '–ø–æ—Å–ª—É—à–Ω—ã–π', '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π'],
                    'health': ['–ø—Ä–∏–≤–∏—Ç', '–∑–¥–æ—Ä–æ–≤', '–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '—á–∏–ø–∏—Ä–æ–≤–∞–Ω', '–æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–æ–≤']
                }
            ]
        
        posts = []
        data = mock_data[0]
        
        for i in range(limit):
            name = random.choice(data['names'])
            age = random.choice(data['ages'])
            color = random.choice(data['colors'])
            trait = random.choice(data['traits'])
            health = random.choice(data['health'])
            
            animal_emoji = 'üê±' if group_type == 'cats' else 'üê∂'
            animal_name = '–∫–æ—Ç' if group_type == 'cats' else '—â–µ–Ω–æ–∫'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            description = f"{animal_name.capitalize()} {name}, –≤–æ–∑—Ä–∞—Å—Ç {age}, {color} –æ–∫—Ä–∞—Å. {trait.capitalize()}, {health}. –ö –ª–æ—Ç–∫—É –ø—Ä–∏—É—á–µ–Ω, —Å –¥—Ä—É–≥–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –ª–∞–¥–∏—Ç. –ò—â–µ—Ç –∑–∞–±–æ—Ç–ª–∏–≤—É—é —Å–µ–º—å—é!"
            
            posts.append({
                'id': f'mock_{i + 1000}',
                'title': f'{animal_emoji} {name} –∏—â–µ—Ç –¥–æ–º',
                'description': description,
                'text': description,
                'date': self.generate_recent_date(),
                'url': f'https://t.me/lapki_ruchki_yalta/{i + 1000}',
                'contact': self.generate_realistic_contact(),
                'photo_url': f'https://picsum.photos/400/300?random={i + 100}',
                'has_photo': True,
                'type': group_type,
                'source': 'mock'
            })
        
        return posts
    
    def generate_recent_date(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–∞–≤–Ω–µ–π –¥–∞—Ç—ã"""
        days_ago = random.randint(0, 5)
        hours_ago = random.randint(0, 23)
        recent_date = datetime.now() - timedelta(days=days_ago, hours=hours_ago)
        return recent_date.strftime('%d.%m.%Y %H:%M')
    
    def generate_realistic_contact(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        phone_endings = ['45-67', '78-90', '12-34', '56-78', '90-12', '23-45']
        usernames = ['volunteer', 'helper', 'animals_yal', 'pet_help', 'rescue']
        
        contacts = []
        
        # –¢–µ–ª–µ—Ñ–æ–Ω
        phone = f"+7 978 {random.choice(phone_endings)}"
        contacts.append(phone)
        
        # Username (–∏–Ω–æ–≥–¥–∞)
        if random.choice([True, False]):
            username = f"@{random.choice(usernames)}{random.randint(1, 99)}"
            contacts.append(username)
        
        return ' ‚Ä¢ '.join(contacts)
    
    def get_cached_posts(self, group_type: str = 'all') -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å —É–º–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö
        should_update = (
            not self.last_update or 
            (datetime.now() - self.last_update).seconds > 1800
        )
        
        if should_update and self.should_attempt_parsing():
            logger.info("üîÑ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤...")
            try:
                fresh_posts = self.get_group_posts(group_type, 3)
                if fresh_posts:
                    return fresh_posts
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à –∏–ª–∏ –º–æ–∫–∏
        cached = [p for p in self.posts_cache 
                 if group_type == 'all' or p['type'] == group_type]
        
        if cached:
            return cached
        else:
            return self.get_smart_mock_posts(group_type, 3)

# –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
# –ü—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º RobustTelegramParser –≤–º–µ—Å—Ç–æ AdvancedGroupParser

class CatBotWithPhotos:
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = RobustTelegramParser()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if post.get('source') == 'parsed':
                source_tag = ' üì°'  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                status = "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ"
            else:
                source_tag = ' üé≠'  # –ú–æ–∫–∏
                status = "‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä"
            
            post_text = (
                f"{emoji} <b>{post['title']}</b>{source_tag}\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ</a>\n\n"
                f"<i>{status}</i>"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_group_posts(self, chat_id: int, animal_type: str = 'cats'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    "üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞–ø—Ä—è–º—É—é"
                )
                return
            
            group_name = "–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞" if animal_type == 'cats' else "–Ø–ª—Ç–∞ –ñ–∏–≤–æ—Ç–Ω—ã–µ"
            group_url = self.parser.groups[0]['url'] if animal_type == 'cats' else self.parser.groups[1]['url']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
            mock_count = len(posts) - parsed_count
            
            # –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
            if parsed_count > 0:
                status_text = f"‚úÖ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>: {parsed_count} –∏–∑ {len(posts)}"
                status_emoji = "üì°"
            elif self.parser.failure_count > 0:
                status_text = f"‚ö†Ô∏è <b>–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b> (–ø–æ–ø—ã—Ç–æ–∫: {self.parser.failure_count})\nüìã –ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
                status_emoji = "üé≠"
            else:
                status_text = "üìã <b>–ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>"
                status_emoji = "üé≠"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É–ª–¥–∞—É–Ω–µ
            cooldown_info = ""
            if self.parser.failure_count > 0:
                cooldown_minutes = min(self.parser.failure_count * 5, 60)
                next_attempt = ""
                if self.parser.last_attempt:
                    time_passed = (datetime.now() - self.parser.last_attempt).total_seconds() / 60
                    remaining = max(0, cooldown_minutes - time_passed)
                    if remaining > 0:
                        next_attempt = f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑: {int(remaining)} –º–∏–Ω"
                
                cooldown_info = f"\nüîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {cooldown_minutes} –º–∏–Ω{next_attempt}"
            
            header_text = (
                f"{status_emoji} <b>{'–ö–û–®–ö–ò' if animal_type == 'cats' else '–°–û–ë–ê–ö–ò'} –ò–©–£–¢ –î–û–ú</b>\n\n"
                f"üì¢ –ì—Ä—É–ø–ø–∞: <a href='{group_url}'>{group_name}</a>\n\n"
                f"{status_text}{cooldown_info}"
            )
            
            self.bot.send_message(chat_id, header_text, parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
            for i, post in enumerate(posts):
                self.send_post(chat_id, post)
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            
            # –§—É—Ç–µ—Ä —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            footer_text = (
                "üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å –∂–∏–≤–æ—Ç–Ω—ã–º:</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å {'–∫–æ—à–∫—É' if animal_type == 'cats' else '—Å–æ–±–∞–∫—É'}:</b>\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üì¢ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n<a href='{group_url}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É</a>\n\n"
                "ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º\n\n"
                "üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:</b> /update"
            )
            
            self.bot.send_message(chat_id, footer_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≥—Ä—É–ø–ø—É:\n"
                f"{self.parser.groups[0]['url'] if animal_type == 'cats' else self.parser.groups[1]['url']}"
            )

    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        return markup
    
    def get_adoption_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º", "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup
    
    def get_sterilization_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup

    def load_html_file(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ assets"""
        try:
            with open(f'assets/{filename}', 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML: {e}")
            return f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ({filename})"

    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üêæ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ª–∏—á–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∂–∏–≤–æ—Ç–Ω—ã–µ –∏—â—É—Ç –¥–æ–º  
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å

<i>üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ Telegram-–≥—Ä—É–ø–ø</i>"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
            self.parser.posts_cache = []
            self.parser.last_update = None
            self.parser.failure_count = max(0, self.parser.failure_count - 1)  # –°–±—Ä–æ—Å —á–∞—Å—Ç–∏ –Ω–µ—É–¥–∞—á
            
            self.bot.send_message(message.chat.id, "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...")
            
            try:
                posts = self.parser.get_group_posts('all', 5)
                parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
                mock_count = len(posts) - parsed_count
                
                status_text = f"‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n\n"
                
                if parsed_count > 0:
                    status_text += f"üì° –ü–æ–ª—É—á–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö: {parsed_count}\n"
                    status_text += f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                else:
                    status_text += f"‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                    status_text += f"üé≠ –ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã: {mock_count}\n"
                    status_text += f"üîÑ –ü–æ–ø—ã—Ç–æ–∫ –Ω–µ—É–¥–∞—á: {self.parser.failure_count}"
                
                self.bot.send_message(message.chat.id, status_text, parse_mode="HTML")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                self.bot.send_message(
                    message.chat.id, 
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)[:100]}"
                )
        
        @self.bot.message_handler(commands=['status'])
        def status_handler(message):
            """–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
            try:
                status_lines = ["üîß <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>\n"]
                
                # –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
                if self.parser.last_update:
                    last_update = self.parser.last_update.strftime('%d.%m.%Y %H:%M:%S')
                    status_lines.append(f"üìä <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {last_update}")
                else:
                    status_lines.append("üìä <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> –ù–∏–∫–æ–≥–¥–∞")
                
                status_lines.append(f"‚ùå <b>–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫:</b> {self.parser.failure_count}")
                status_lines.append(f"üíæ <b>–ü–æ—Å—Ç–æ–≤ –≤ –∫—ç—à–µ:</b> {len(self.parser.posts_cache)}")
                
                # –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞
                if self.parser.should_attempt_parsing():
                    status_lines.append("‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ì–æ—Ç–æ–≤ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é")
                else:
                    cooldown = min(self.parser.failure_count * 5, 60)
                    time_passed = 0
                    if self.parser.last_attempt:
                        time_passed = int((datetime.now() - self.parser.last_attempt).total_seconds() / 60)
                    remaining = max(0, cooldown - time_passed)
                    status_lines.append(f"‚è≥ <b>–ö—É–ª–¥–∞—É–Ω:</b> {remaining} –º–∏–Ω (–∏–∑ {cooldown})")
                
                # –°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø
                status_lines.append("\nüì¢ <b>–ì–†–£–ü–ü–´:</b>")
                for group in self.parser.groups:
                    group_type = "üê±" if group['type'] == 'cats' else "üê∂"
                    status_lines.append(f"{group_type} {group['username']}")
                
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                status_lines.append("\nüß™ <b>–ë–´–°–¢–†–´–ô –¢–ï–°–¢:</b>")
                try:
                    test_url = f"https://t.me/s/{self.parser.groups[0]['username']}"
                    response = requests.get(test_url, timeout=5, headers=self.parser.get_advanced_headers())
                    
                    if response.status_code == 200:
                        if "cloudflare" in response.text.lower():
                            status_lines.append("‚ö†Ô∏è Cloudflare –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                        elif len(response.text) > 10000:
                            status_lines.append("‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                        else:
                            status_lines.append("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
                    else:
                        status_lines.append(f"‚ùå HTTP {response.status_code}")
                        
                except Exception as e:
                    status_lines.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)[:50]}")
                
                self.bot.send_message(
                    message.chat.id,
                    "\n".join(status_lines),
                    parse_mode="HTML"
                )
                
            except Exception as e:
                self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        
        @self.bot.message_handler(commands=['reset'])
        def reset_handler(message):
            """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –Ω–µ—É–¥–∞—á"""
            self.parser.failure_count = 0
            self.parser.last_attempt = None
            self.bot.send_message(
                message.chat.id, 
                "üîÑ –°—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ü–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ."
            )
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ...
        @self.bot.message_handler(func=lambda m: m.text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def sterilization_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            self.bot.send_message(
                message.chat.id,
                "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                parse_mode="HTML",
                reply_markup=self.get_sterilization_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def paid_sterilization_handler(message):
            self.bot.send_message(
                message.chat.id,
                self.load_html_file('paid_text.html'),
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def free_sterilization_handler(message):
            self.bot.send_message(
                message.chat.id,
                self.load_html_file('free_text.html'),
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        def adoption_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –º–µ–Ω—é
            parsed_posts = sum(1 for p in self.parser.posts_cache if p.get('source') == 'parsed')
            status_line = ""
            
            if parsed_posts > 0:
                status_line = f"\nüì° <b>–°—Ç–∞—Ç—É—Å:</b> –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã ({parsed_posts} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)"
            elif self.parser.failure_count > 0:
                status_line = f"\n‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            else:
                status_line = f"\nüìã <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã"
            
            info_text = f"""üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>{status_line}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üê± <b>–ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã

üê∂ <b>–°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã

üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>
–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
            
            self.bot.send_message(
                message.chat.id, 
                info_text, 
                parse_mode="HTML",
                reply_markup=self.get_adoption_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º")
        def cats_handler(message):
            self.send_group_posts(message.chat.id, 'cats')
        
        @self.bot.message_handler(func=lambda m: m.text == "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        def dogs_handler(message):
            self.send_group_posts(message.chat.id, 'dogs')
        
        @self.bot.message_handler(func=lambda m: m.text == "üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        def post_ad_handler(message):
            info_text = f"""üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>

üì¢ <b>–ì—Ä—É–ø–ø—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>
<a href="{self.parser.groups[0]['url']}">–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏ –Ø–ª—Ç–∞</a> (–∫–æ—à–∫–∏)
<a href="{self.parser.groups[1]['url']}">–Ø–ª—Ç–∞ –ñ–∏–≤–æ—Ç–Ω—ã–µ</a> (—Å–æ–±–∞–∫–∏)

‚úçÔ∏è <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å:</b>
1Ô∏è‚É£ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É
2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º  
3Ô∏è‚É£ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏

üìã <b>–ù—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üîπ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –æ–∫—Ä–∞—Å  
üîπ –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
üîπ –ó–¥–æ—Ä–æ–≤—å–µ (–ø—Ä–∏–≤–∏–≤–∫–∏, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è)
üîπ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏"""
            
            self.bot.send_message(message.chat.id, info_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        def contacts_handler(message):
            contacts_text = """üìû <b>–ö–û–ù–¢–ê–ö–¢–´</b>

üë• <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã:</b>
üîπ –ö–æ—à–∫–∏: +7 978 144-90-70
üîπ –°–æ–±–∞–∫–∏: +7 978 000-00-02  
üîπ –õ–µ—á–µ–Ω–∏–µ: +7 978 000-00-03

üè• <b>–í–µ—Ç–∫–ª–∏–Ω–∏–∫–∏:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-04
üîπ "–í–µ—Ç–ú–∏—Ä": +7 978 000-00-05

üì± <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>  
üîπ Telegram: @yalta_animals
üîπ Instagram: @yalta_street_animals

‚ö° <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏:</b>
+7 978 000-00-01 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)"""
            
            self.bot.send_message(message.chat.id, contacts_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")  
        def about_handler(message):
            about_text = """‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï</b>

üéØ <b>–ù–∞—à–∞ –º–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–µ–π

üìä <b>–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 500+ –∫–æ—à–µ–∫, 200+ —Å–æ–±–∞–∫
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ –≤ —Å–µ–º—å–∏: 300+ –∂–∏–≤–æ—Ç–Ω—ã—Ö  
üîπ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 50+ —á–µ–ª–æ–≤–µ–∫
üîπ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫: 5

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:</b>
–°–±–µ—Ä–±–∞–Ω–∫: 2202 2020 0000 0000
–ÆMoney: 410012345678901

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
–ü–∏—à–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –≤ –≥—Ä—É–ø–ø—ã

üîÑ <b>–≠—Ç–æ—Ç –±–æ—Ç:</b>
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ Telegram-–≥—Ä—É–ø–ø –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤"""
            
            self.bot.send_message(message.chat.id, about_text, parse_mode="HTML")
        
        @self.bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
        def back_handler(message):
            self.bot.send_message(
                message.chat.id, 
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(func=lambda m: True)
        def default_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            help_text = """‚ùì <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é</b>

üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/update - –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è  
/status - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫–∏

üí° –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ"""
            
            self.bot.send_message(
                message.chat.id,
                help_text,
                parse_mode="HTML", 
                reply_markup=self.get_main_keyboard()
            )

    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            parsed_count = sum(1 for p in self.parser.posts_cache if p.get('source') == 'parsed')
            
            return jsonify({
                "status": "ü§ñ Enhanced Animal Bot",
                "version": "2.0",
                "time": datetime.now().strftime('%H:%M:%S'),
                "users": len(self.stats["users"]), 
                "messages": self.stats["messages"],
                "parser": {
                    "cached_posts": len(self.parser.posts_cache),
                    "parsed_posts": parsed_count,
                    "mock_posts": len(self.parser.posts_cache) - parsed_count,
                    "failure_count": self.parser.failure_count,
                    "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None,
                    "can_parse": self.parser.should_attempt_parsing()
                },
                "groups": [g['url'] for g in self.parser.groups]
            })
        
        @self.app.route('/posts')
        def posts_api():
            try:
                posts = self.parser.get_cached_posts()
                parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
                
                return jsonify({
                    "status": "ok",
                    "total": len(posts),
                    "parsed": parsed_count,
                    "mocks": len(posts) - parsed_count,
                    "posts": posts,
                    "parser_status": {
                        "failure_count": self.parser.failure_count,
                        "can_attempt": self.parser.should_attempt_parsing(),
                        "last_update": self.parser.last_update.isoformat() if self.parser.last_update else None
                    }
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
        
        @self.app.route('/force_update')
        def force_update_api():
            """API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
            try:
                # –°–±—Ä–æ—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                self.parser.posts_cache = []
                self.parser.last_update = None  
                self.parser.failure_count = max(0, self.parser.failure_count - 2)
                
                posts = self.parser.get_group_posts('all', 5)
                parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
                
                return jsonify({
                    "status": "force_updated",
                    "timestamp": datetime.now().isoformat(),
                    "total_posts": len(posts),
                    "parsed_posts": parsed_count,
                    "mock_posts": len(posts) - parsed_count,
                    "failure_count": self.parser.failure_count
                })
            except Exception as e:
                logger.error(f"‚ùå Force update error: {e}")
                return jsonify({"status": "error", "message": str(e)}), 500

    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Animal Bot v2.0...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cloudscraper
        try:
            import cloudscraper
            logger.info("‚úÖ CloudScraper –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            logger.warning("‚ö†Ô∏è CloudScraper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install cloudscraper")
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤  
        try:
            posts = self.parser.get_cached_posts()
            parsed_count = sum(1 for p in posts if p.get('source') == 'parsed')
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ (–ø–∞—Ä—Å–∏–Ω–≥: {parsed_count}, –º–æ–∫–∏: {len(posts) - parsed_count})")
            
            if parsed_count == 0 and self.parser.failure_count > 0:
                logger.warning(f"‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ—É–¥–∞—á: {self.parser.failure_count}")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if self.setup_webhook():
            logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ")
            self.app.run(host='0.0.0.0', port=self.port, debug=False)
        else:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
            try:
                self.bot.polling(none_stop=True, interval=0, timeout=20)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
                time.sleep(5)
                self.bot.polling()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    os.makedirs('assets/images', exist_ok=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('assets/free_text.html'):
        with open('assets/free_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üÜì –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>
üîπ –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ä–æ–¥–∞ –Ø–ª—Ç—ã
üîπ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã –∑–∞—â–∏—Ç—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
üîπ –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏
üîπ –ê–∫—Ü–∏–∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫

üìã <b>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:</b>
‚úÖ –ë–µ–∑–¥–æ–º–Ω—ã–µ –∏ –ø–æ–ª—É–±–µ–∑–¥–æ–º–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
‚úÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–∑ –º–∞–ª–æ–∏–º—É—â–∏—Ö —Å–µ–º–µ–π (—Å–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö)
‚úÖ –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–µ (–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã, –∏–Ω–≤–∞–ª–∏–¥—ã)

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>
üîπ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: +7 978 144-90-70
üîπ –ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç": +7 978 000-00-11  
üîπ –í–µ—Ç—Ü–µ–Ω—Ç—Ä "–ó–æ–æ–≤–µ—Ç—Å–µ—Ä–≤–∏—Å": +7 978 000-00-15
üîπ –ì—Ä—É–ø–ø–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: @yalta_free_sterilization

üìç <b>–ê–¥—Ä–µ—Å–∞ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–Ω–∏–∫:</b>
üè• —É–ª. –ö–∏—Ä–æ–≤–∞, 15 (–ø–Ω-–ø—Ç 9:00-18:00)
üè• —É–ª. –õ–µ–Ω–∏–Ω–∞, 32 (–ø–Ω-—Å–± 8:00-20:00)  
üè• —É–ª. –ß–µ—Ö–æ–≤–∞, 45 (–ø–Ω-–≤—Å 9:00-19:00)

üìã <b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>
üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö (–¥–ª—è –ª—å–≥–æ—Ç–Ω–∏–∫–æ–≤)
üìÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ (–¥–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö)
üìÑ –ü–∞—Å–ø–æ—Ä—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π)

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>
‚è∞ –ó–∞–ø–∏—Å—å —Å—Ç—Ä–æ–≥–æ –∑–∞—Ä–∞–Ω–µ–µ! –ú–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥
üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
üíâ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

üÜò <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏:</b>
–ü—Ä–∏ —Ç—Ä–∞–≤–º–∞—Ö –∏ –Ω–µ–æ—Ç–ª–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∏!""")

    if not os.path.exists('assets/paid_text.html'):
        with open('assets/paid_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üí∞ –ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ –Ø–ª—Ç—ã:</b>

üîπ <b>–ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 3000‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2500‚ÇΩ
   üí∞ –°–æ–±–∞–∫–∏ (—Å—É—á–∫–∏): –æ—Ç 5000‚ÇΩ | –°–æ–±–∞–∫–∏ (–∫–æ–±–µ–ª–∏): –æ—Ç 4000‚ÇΩ  
   üìû +7 978 000-00-12
   üìç —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 14
   ‚è∞ –ø–Ω-–≤—Å 8:00-20:00

üîπ <b>–í–µ—Ç—Ü–µ–Ω—Ç—Ä "–í–µ—Ç–ú–∏—Ä"</b>  
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 2500‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2000‚ÇΩ
   üí∞ –°–æ–±–∞–∫–∏ (—Å—É—á–∫–∏): –æ—Ç 4500‚ÇΩ | –°–æ–±–∞–∫–∏ (–∫–æ–±–µ–ª–∏): –æ—Ç 3500‚ÇΩ
   üìû +7 978 000-00-13  
   üìç —É–ª. –ü—É—à–∫–∏–Ω–∞, 28
   ‚è∞ –ø–Ω-—Å–± 9:00-19:00

üîπ <b>–ö–ª–∏–Ω–∏–∫–∞ "–ó–æ–æ–≤–µ—Ç—Ü–µ–Ω—Ç—Ä"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 3500‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2800‚ÇΩ  
   üí∞ –°–æ–±–∞–∫–∏ (—Å—É—á–∫–∏): –æ—Ç 5500‚ÇΩ | –°–æ–±–∞–∫–∏ (–∫–æ–±–µ–ª–∏): –æ—Ç 4200‚ÇΩ
   üìû +7 978 000-00-14
   üìç —É–ª. –ß–µ—Ö–æ–≤–∞, 45  
   ‚è∞ –ø–Ω-–≤—Å 9:00-21:00

üîπ <b>–í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞ "–ü–µ—Ç–í–µ—Ç"</b>
   üí∞ –ö–æ—à–∫–∏: –æ—Ç 2800‚ÇΩ | –ö–æ—Ç—ã: –æ—Ç 2200‚ÇΩ
   üí∞ –°–æ–±–∞–∫–∏ (—Å—É—á–∫–∏): –æ—Ç 4800‚ÇΩ | –°–æ–±–∞–∫–∏ (–∫–æ–±–µ–ª–∏): –æ—Ç 3800‚ÇΩ
   üìû +7 978 000-00-16
   üìç —É–ª. –¢–æ–ª—Å—Ç–æ–≥–æ, 12
   ‚è∞ –ø–Ω-–ø—Ç 8:00-18:00, —Å–± 9:00-15:00

üåü <b>–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚úîÔ∏è –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
‚úîÔ∏è –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–≥–∞–ª—è—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞—Ä–∫–æ–∑  
‚úîÔ∏è –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä (4-6 —á–∞—Å–æ–≤)
‚úîÔ∏è –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞
‚úîÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä —á–µ—Ä–µ–∑ 7-10 –¥–Ω–µ–π
‚úîÔ∏è –ü–æ–ø–æ–Ω–∞/–≤–æ—Ä–æ—Ç–Ω–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

üíä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è:</b>
üî∏ –ü—Ä–µ–¥–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏: –æ—Ç 800‚ÇΩ  
üî∏ –£–ó–ò –æ—Ä–≥–∞–Ω–æ–≤: –æ—Ç 1200‚ÇΩ
üî∏ –ß–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—Ç 1500‚ÇΩ
üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã: –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é

üí° <b>–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∏–¥–∫–∏:</b>
üéØ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–Ω–∏–∫–∞–º - 10%
üéØ –í–æ–ª–æ–Ω—Ç–µ—Ä–∞–º –∏ –æ–ø–µ–∫—É–Ω–∞–º –±–µ–∑–¥–æ–º–Ω—ã—Ö - 20%  
üéØ –ü—Ä–∏ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏ 2+ –∂–∏–≤–æ—Ç–Ω—ã—Ö - 15%
üéØ –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º - 10%
üéØ –°–µ–∑–æ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ (–º–∞–π, –æ–∫—Ç—è–±—Ä—å) - –¥–æ 25%

üìÖ <b>–ó–∞–ø–∏—Å—å –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>
‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –∑–∞ 1-2 –Ω–µ–¥–µ–ª–∏
üìã –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
üíâ –ñ–∏–≤–æ—Ç–Ω–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–¥–æ—Ä–æ–≤—ã–º –∏ –ø—Ä–∏–≤–∏—Ç—ã–º

‚ö†Ô∏è <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>  
üçΩÔ∏è –ì–æ–ª–æ–¥–Ω–∞—è –¥–∏–µ—Ç–∞ 12 —á–∞—Å–æ–≤ –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
üíß –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–æ–¥—ã –∑–∞ 4 —á–∞—Å–∞  
üöø –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–∞–∫–∞–Ω—É–Ω–µ
üìã –ü—Ä–∏–Ω–µ—Å—Ç–∏ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –ø—Ä–∏–≤–∏–≤–∫–∞—Ö

üÜò <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:</b>
–ü—Ä–∏ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è—Ö –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∫–ª–∏–Ω–∏–∫—É!""")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)
    requirements_info = """
–î–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:

pip install cloudscraper beautifulsoup4 requests lxml

CloudScraper –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –∑–∞—â–∏—Ç—É Cloudflare.
"""
    
    print("üîß " + requirements_info)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced Animal Bot...")
        bot = CatBotWithPhotos()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\n‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ Telegram API")
        print("\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        time.sleep(30)
