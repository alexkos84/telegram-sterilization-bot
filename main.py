import os
import telebot
from telebot import types
from datetime import datetime
import time
import logging
import requests
from bs4 import BeautifulSoup
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ—à–µ–∫ –∏ —Å–æ–±–∞–∫"""
    def __init__(self):
        self.channel_username = 'Lapki_ruchki_Yalta_help'
        self.channel_url = f'https://t.me/{self.channel_username}'
        self.web_url = f'https://t.me/s/{self.channel_username}'
        self.headers = {'User-Agent': 'Mozilla/5.0'}
        self.posts_cache = []
    
    def get_posts(self, limit=5):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            response = requests.get(self.web_url, headers=self.headers)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            posts = []
            for message in soup.find_all('div', class_='tgme_widget_message')[:limit*2]:
                post = self._parse_message(message)
                if post:
                    posts.append(post)
            
            self.posts_cache = posts
            return posts
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
            return self._get_mock_posts()

    def _parse_message(self, message):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text_div = message.find('div', class_='tgme_widget_message_text')
            if not text_div:
                return None
                
            text = text_div.get_text('\n').strip()
            is_cat = self._is_cat(text)
            is_dog = self._is_dog(text)
            
            if not (is_cat or is_dog):
                return None
                
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ç–æ
            photo_style = message.find('a', class_='tgme_widget_message_photo_wrap').get('style', '')
            photo_url = re.search(r"url\('(.*?)'\)", photo_style).group(1) if photo_style else None
            
            return {
                'text': text,
                'photo_url': photo_url,
                'is_cat': is_cat,
                'is_dog': is_dog,
                'date': message.find('time')['datetime'][:10]
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None
    
    def _is_cat(self, text):
        keywords = ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—è—É']
        return any(word in text.lower() for word in keywords)
    
    def _is_dog(self, text):
        keywords = ['—Å–æ–±–∞–∫–∞', '—â–µ–Ω', '–ø–µ—Å', '–ø—ë—Å', '–≥–∞–≤']
        return any(word in text.lower() for word in keywords)
    
    def _get_mock_posts(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        return [
            {
                'text': "–ö–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º. –í–æ–∑—Ä–∞—Å—Ç 2 –º–µ—Å—è—Ü–∞.",
                'photo_url': 'https://via.placeholder.com/600x400?text=–ö–æ—Ç–µ–Ω–æ–∫',
                'is_cat': True,
                'is_dog': False,
                'date': datetime.now().strftime('%Y-%m-%d')
            },
            {
                'text': "–ü–µ—Å –ë–∞—Ä—Å–∏–∫ –∏—â–µ—Ç —Ö–æ–∑—è–∏–Ω–∞. –í–∑—Ä–æ—Å–ª—ã–π, –¥–æ–±—Ä—ã–π.",
                'photo_url': 'https://via.placeholder.com/600x400?text=–°–æ–±–∞–∫–∞',
                'is_cat': False,
                'is_dog': True,
                'date': datetime.now().strftime('%Y-%m-%d')
            }
        ]

class PetsBot:
    def __init__(self):
        self.token = os.getenv('TOKEN')
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
            
        self.bot = telebot.TeleBot(self.token)
        self.parser = ChannelParser()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.bot.message_handler(commands=['start'])(self.send_welcome)
        self.bot.message_handler(func=lambda m: m.text == 'üê± –ö–æ—à–∫–∏')(self.send_cats)
        self.bot.message_handler(func=lambda m: m.text == 'üê∂ –°–æ–±–∞–∫–∏')(self.send_dogs)
        
    def send_welcome(self, message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üê± –ö–æ—à–∫–∏', 'üê∂ –°–æ–±–∞–∫–∏')
        self.bot.send_message(
            message.chat.id,
            "üêæ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=markup
        )
    
    def send_animal_posts(self, chat_id, is_cat=True):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏"""
        animal_type = '–∫–æ—à–µ–∫' if is_cat else '—Å–æ–±–∞–∫'
        posts = [p for p in self.parser.get_posts() if p['is_cat'] == is_cat]
        
        if not posts:
            self.bot.send_message(
                chat_id,
                f"üòø –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {animal_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
            )
            return
            
        self.bot.send_message(
            chat_id,
            f"üê± –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ {animal_type}:" if is_cat else f"üê∂ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ {animal_type}:"
        )
        
        for post in posts[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 3 –ø–æ—Å—Ç–∞–º–∏
            if post['photo_url']:
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=f"{post['text']}\n\nüìÖ {post['date']}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
                    self._send_text_post(chat_id, post)
            else:
                self._send_text_post(chat_id, post)
            
            time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    
    def _send_text_post(self, chat_id, post):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
        self.bot.send_message(
            chat_id,
            f"{post['text']}\n\nüìÖ {post['date']}"
        )
    
    def send_cats(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—à–µ–∫"""
        self.send_animal_posts(message.chat.id, is_cat=True)
    
    def send_dogs(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±–∞–∫"""
        self.send_animal_posts(message.chat.id, is_cat=False)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.bot.polling(none_stop=True)

if __name__ == '__main__':
    bot = PetsBot()
    bot.run()
