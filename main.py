import os
import telebot
from telebot import types
from datetime import datetime
import time
import logging
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AnimalChannelParser:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
    
    def __init__(self):
        self.channels = {
            'cats': {
                'username': 'Lapki_ruchki_Yalta_help',
                'url': 'https://t.me/Lapki_ruchki_Yalta_help',
                'keywords': ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É', '–∫–∞—Å—Ç—Ä', '—Å—Ç–µ—Ä–∏–ª']
            },
            'dogs': {
                'username': 'yalta_aninmals',
                'url': 'https://t.me/yalta_aninmals',
                'keywords': ['—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø—ë—Å', '–ø–µ—Å', '–≥–∞–≤', '–ª–∞–π–∫', '–æ–≤—á–∞—Ä–∫', '–¥–æ–≥', '—Ö–∞—Å–∫']
            }
        }
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        self.posts_cache = {'cats': [], 'dogs': []}
        self.last_update = None
    
    def get_channel_posts(self, animal_type: str = 'cats', limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        try:
            if animal_type not in self.channels:
                raise ValueError(f"Unknown animal type: {animal_type}")
                
            channel = self.channels[animal_type]
            web_url = f'https://t.me/s/{channel["username"]}'
            
            logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è {animal_type} —Å {web_url}")
            response = requests.get(web_url, headers=self.headers, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            message_divs = soup.find_all('div', class_='tgme_widget_message')
            
            posts = []
            for div in message_divs[:limit*2]:  # –ë–µ—Ä–µ–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                post_data = self.parse_message_div(div, channel)
                if post_data and self.is_animal_related(post_data.get('text', ''), channel['keywords']):
                    posts.append(post_data)
                    if len(posts) >= limit:
                        break
            
            if posts:
                self.posts_cache[animal_type] = posts
                self.last_update = datetime.now()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è {animal_type}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è {animal_type}")
                posts = self.get_mock_posts(animal_type)
            
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {animal_type}: {e}")
            return self.get_mock_posts(animal_type)
    
    def parse_message_div(self, div, channel_info) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            post_id = div.get('data-post', '').split('/')[-1] or 'unknown'
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            # –î–∞—Ç–∞
            date_elem = div.find('time', datetime=True)
            date_str = "–ù–µ–¥–∞–≤–Ω–æ"
            if date_elem:
                try:
                    dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
                    date_str = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    pass
            
            # –§–æ—Ç–æ
            photo_url = None
            photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
            if photo_wrap and photo_wrap.get('style'):
                match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
                if match:
                    photo_url = match.group(1)
            
            if not text:
                return None
            
            return {
                'id': post_id,
                'text': text,
                'date': date_str,
                'url': f"{channel_info['url']}/{post_id}" if post_id else channel_info['url'],
                'title': self.extract_title(text),
                'description': self.extract_description(text),
                'contact': self.extract_contact(text),
                'photo_url': photo_url,
                'has_photo': bool(photo_url),
                'animal_type': 'cats' if 'Lapki' in channel_info['username'] else 'dogs'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ div: {e}")
            return None
    
    def is_animal_related(self, text: str, keywords: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –∂–∏–≤–æ—Ç–Ω—ã–º"""
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in keywords)
    
    def get_mock_posts(self, animal_type: str) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if animal_type == 'cats':
            return [{
                'id': '1001',
                'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –∏—â–µ—Ç –¥–æ–º',
                'description': '–ú–∞–ª—å—á–∏–∫, 2 –º–µ—Å—è—Ü–∞, –ø—Ä–∏–≤–∏—Ç. –û—á–µ–Ω—å –ª–∞—Å–∫–æ–≤—ã–π.',
                'date': '01.01.2023',
                'url': self.channels['cats']['url'],
                'contact': '@cat_help',
                'photo_url': 'https://via.placeholder.com/600x400?text=–ö–æ—Ç–µ–Ω–æ–∫',
                'animal_type': 'cats'
            }]
        else:
            return [{
                'id': '2001',
                'title': 'üê∂ –©–µ–Ω–æ–∫ –∏—â–µ—Ç –¥–æ–º',
                'description': '–î–µ–≤–æ—á–∫–∞, 3 –º–µ—Å—è—Ü–∞, –∑–¥–æ—Ä–æ–≤–∞. –•–æ—Ä–æ—à–æ –ª–∞–¥–∏—Ç —Å –¥–µ—Ç—å–º–∏.',
                'date': '01.01.2023',
                'url': self.channels['dogs']['url'],
                'contact': '@dog_help',
                'photo_url': 'https://via.placeholder.com/600x400?text=–©–µ–Ω–æ–∫',
                'animal_type': 'dogs'
            }]
    
    def get_cached_posts(self, animal_type: str) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã"""
        if (not self.last_update or 
            (datetime.now() - self.last_update).seconds > 3600 or
            not self.posts_cache.get(animal_type)):
            return self.get_channel_posts(animal_type)
        return self.posts_cache[animal_type]

class AnimalAdoptionBot:
    """–ë–æ—Ç –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
    
    def __init__(self):
        self.token = os.environ.get('TELEGRAM_TOKEN')
        if not self.token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AnimalChannelParser()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
        self.sterilization_texts = {
            'free': self.load_text('assets/free_sterilization.html'),
            'paid': self.load_text('assets/paid_sterilization.html')
        }
        
        self.setup_handlers()
    
    def load_text(self, file_path: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {file_path}"
    
    def send_animal_posts(self, chat_id: int, animal_type: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            emoji = 'üê±' if animal_type == 'cats' else 'üê∂'
            name = '–∫–æ—à–µ–∫' if animal_type == 'cats' else '—Å–æ–±–∞–∫'
            
            if not posts:
                self.bot.send_message(
                    chat_id,
                    f"üò¢ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ {name}.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª: {self.parser.channels[animal_type]['url']}",
                    parse_mode="HTML"
                )
                return
            
            self.bot.send_message(
                chat_id,
                f"{emoji} <b>–ü–û–°–õ–ï–î–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø</b>\n\n"
                f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ {name} –∏–∑ –∫–∞–Ω–∞–ª–∞:",
                parse_mode="HTML"
            )
            
            for post in posts:
                self.send_post(chat_id, post)
                time.sleep(0.7)  # –ß—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –ª–∏–º–∏—Ç—ã Telegram
            
            self.bot.send_message(
                chat_id,
                f"üí¨ <b>–ö–∞–∫ –ø–æ–º–æ—á—å?</b>\n\n"
                f"üè† <b>–í–∑—è—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ:</b> –°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º\n"
                f"üì¢ <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è:</b> –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏ –¥–æ–º - —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥—Ä—É–∑—å—è–º\n"
                f"ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b> –ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª",
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.get_main_keyboard()
            )
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è"""
        try:
            animal_emoji = 'üê±' if post['animal_type'] == 'cats' else 'üê∂'
            post_text = (
                f"{animal_emoji} <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                "üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", 
                url=f"https://t.me/share/url?url={post['url']}&text=–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏ –¥–æ–º!"
            ))
            
            if post.get('photo_url'):
                self.bot.send_photo(
                    chat_id,
                    post['photo_url'],
                    caption=post_text,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            else:
                self.bot.send_message(
                    chat_id,
                    post_text,
                    parse_mode="HTML",
                    reply_markup=markup
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏, 
    # –Ω–æ —Å —É—á–µ—Ç–æ–º –¥–≤—É—Ö —Ç–∏–ø–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö)

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("üêæ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö...")
        try:
            self.bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            time.sleep(15)
            self.run()

if __name__ == "__main__":
    bot = AnimalAdoptionBot()
    bot.run()
