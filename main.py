import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
import random
from urllib.parse import quote_plus
import cloudscraper
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AnimalNewsParser:
    """–ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –Ø–ª—Ç—ã"""
    
    def __init__(self):
        self.channels = [
            {
                'username': 'yalta_podslushano',
                'url': 'https://t.me/yalta_podslushano',
                'name': '–Ø–ª—Ç–∞ –ü–æ–¥—Å–ª—É—à–∞–Ω–æ'
            },
            {
                'username': 'yaltaya',
                'url': 'https://t.me/yaltaya',
                'name': '–Ø–ª—Ç–∞—è'
            },
            {
                'username': 'yalta_animals',
                'url': 'https://t.me/yalta_animals',
                'name': '–Ø–ª—Ç–∞ –ñ–∏–≤–æ—Ç–Ω—ã–µ'
            },
            {
                'username': 'yalta_zoo',
                'url': 'https://t.me/yalta_zoo',
                'name': '–Ø–ª—Ç–∞ –ó–æ–æ'
            },
            {
                'username': 'yalta_pets',
                'url': 'https://t.me/yalta_pets',
                'name': '–Ø–ª—Ç–∞ –ü–∏—Ç–æ–º—Ü—ã'
            }
        ]
        
        self.animal_keywords = [
            '–∫–æ—à–∫', '–∫–æ—Ç', '–∫–æ—Ç—ë–Ω', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç—ç', '–∫–æ—Ç–µ–π–∫', '–∫–∏—Å', '–∫–∏—Å-–∫–∏—Å',
            '—Å–æ–±–∞', '–ø—ë—Å', '–ø–µ—Å', '—â–µ–Ω', '—Å–æ–±–∞–∫', '–ø—Å–∏–Ω', '—Ö–≤–æ—Å—Ç', '–ª–∞–ø',
            '–∂–∏–≤–æ—Ç–Ω', '–ø–∏—Ç–æ–º', '–∑–≤–µ—Ä', '–∑–≤–µ—Ä—é—à–∫', '–∑–≤–µ—Ä—ë–∫', '–ø–∏—Ç–æ–º–µ—Ü',
            '–ø—Ä–∏—Å—Ç—Ä', '–ø–æ—Ç–µ—Ä—è–ª', '–Ω–∞—à–µ–ª', '–Ω–∞–π–¥—ë–Ω', '–Ω–∞–π–¥–µ–Ω', '–ø—Ä–æ–ø–∞–ª', '–ø—Ä–æ–ø–∞–¥–∞',
            '–ø—Ä–∏—é—Ç', '–ø–µ—Ä–µ–¥–µ—Ä–∂', '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–∫–æ—Ä–º', '—Å—Ç–µ—Ä–∏–ª–∏–∑', '–∫–∞—Å—Ç—Ä–∞—Ü'
        ]
        
        self.posts_cache = []
        self.last_update = None
        self.last_attempt = None
        self.failure_count = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CloudScraper
        try:
            self.scraper = cloudscraper.create_scraper(
                browser={
                    'browser': 'chrome',
                    'platform': 'windows',
                    'mobile': False
                }
            )
        except:
            self.scraper = requests.Session()
            logger.warning("‚ö†Ô∏è CloudScraper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π requests")
        
        # User-Agents –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
        ]
    
    def is_recent_post(self, timestamp: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç —Å–≤–µ–∂–∏–º (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)"""
        if not timestamp:
            return False
        post_time = datetime.fromtimestamp(timestamp)
        return (datetime.now() - post_time) < timedelta(days=1)
    
    def get_animal_posts(self, limit_per_channel: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        self.last_attempt = datetime.now()
        all_posts = []
        
        for channel in self.channels:
            try:
                url = f'https://t.me/s/{channel["username"]}'
                logger.info(f"üåê –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {channel['name']} ({url})")
                
                headers = {
                    'User-Agent': random.choice(self.user_agents),
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                }
                
                response = self.scraper.get(url, headers=headers, timeout=20)
                
                if response.status_code == 200:
                    channel_posts = self.parse_html_content(
                        response.text, 
                        channel,
                        limit_per_channel
                    )
                    if channel_posts:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç—ã
                        recent_posts = [p for p in channel_posts if self.is_recent_post(p.get('timestamp'))]
                        if recent_posts:
                            all_posts.extend(recent_posts)
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recent_posts)} —Å–≤–µ–∂–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ {channel['name']}")
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {channel['name']}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ —Ä–∞–∑–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
                time.sleep(random.uniform(2, 5))
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel['name']}: {str(e)}")
                self.failure_count += 1
                continue
        
        if all_posts:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            all_posts.sort(key=lambda x: x.get('timestamp', 0), reverse=True)
            self.posts_cache = all_posts
            self.last_update = datetime.now()
            self.failure_count = 0
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_posts)} —Å–≤–µ–∂–∏—Ö –ø–æ—Å—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ –ø–æ—Å—Ç–∞ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö")
        
        return all_posts

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

class AnimalNewsBot:
    """–ë–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ø–ª—Ç—ã"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = AnimalNewsParser()
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_animal_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
            post_text = (
                f"üêæ <b>{post['channel_name']}</b>\n\n"
                f"{post['text']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>"
            )
            
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(post_text) > 4000:
                lines = post_text.split('\n')
                truncated = []
                length = 0
                for line in lines:
                    if length + len(line) < 3800:
                        truncated.append(line)
                        length += len(line) + 1
                    else:
                        break
                post_text = '\n'.join(truncated) + "...\n\nüîó –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ –≤ –∫–∞–Ω–∞–ª–µ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if post.get('has_media'):
                media = post['media']
                try:
                    if media['type'] == 'photo':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Ñ–æ—Ç–æ
                        if not media['url'].startswith('http'):
                            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ñ–æ—Ç–æ")
                            
                        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                        test_response = requests.head(media['url'], timeout=5)
                        if test_response.status_code != 200:
                            raise ValueError("–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                            
                        self.bot.send_photo(
                            chat_id,
                            media['url'],
                            caption=post_text,
                            parse_mode="HTML",
                            reply_markup=self.get_post_markup(post['url'])
                        )
                        return
                    
                    elif media['type'] == 'video':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –≤–∏–¥–µ–æ
                        if not media['url'].startswith('http'):
                            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π URL –≤–∏–¥–µ–æ")
                            
                        self.bot.send_video(
                            chat_id,
                            media['url'],
                            caption=post_text,
                            parse_mode="HTML",
                            reply_markup=self.get_post_markup(post['url'])
                        )
                        return
                    
                    elif media['type'] == 'document':
                        # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                        post_text += f"\n\nüìé –í–ª–æ–∂–µ–Ω–∏–µ: {media['url']}"
                        
                except Exception as media_error:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {media_error}. –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç.")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=self.get_post_markup(post['url'])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä—è–º–æ –≤ –∫–∞–Ω–∞–ª–µ:\n{post['url']}"
            )

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == "__main__":
    print("""
üîß –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
pip install telebot flask requests beautifulsoup4 cloudscraper lxml

üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...
""")
    
    try:
        bot = AnimalNewsBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        print("\n‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ Telegram API")
        print("\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...")
        time.sleep(5)
