import os
import telebot
from telebot import types
from flask import Flask, request
from datetime import datetime
import time
import logging
import signal
from functools import lru_cache

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò TELEGRAM ID)
ADMIN_IDS = [123456789]  # –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID

# üìÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ HTML-—Ñ–∞–π–ª–æ–≤
def load_text(filename):
    try:
        path = os.path.join("assets", filename)
        with open(path, encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return f"–ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑ {filename} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"

def load_all_texts():
    texts = {}
    assets_dir = "assets"
    
    if not os.path.exists(assets_dir):
        logger.warning(f"üìÅ –ü–∞–ø–∫–∞ {assets_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return texts
    
    try:
        for filename in os.listdir(assets_dir):
            if filename.endswith('.html'):
                key = filename.replace('.html', '')
                texts[key] = load_text(filename)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename} -> {key}")
        return texts
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return texts

# üñºÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGES = {
    'paid_text': 'https://via.placeholder.com/400x300/FFD700/000000?text=üí∞+–ü–ª–∞—Ç–Ω–∞—è+—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è',
    'free_text': 'https://via.placeholder.com/400x300/32CD32/FFFFFF?text=üÜì+–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è+—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è',
    'emergency_help': 'https://via.placeholder.com/400x300/FF6B6B/FFFFFF?text=üö®+–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è+–ø–æ–º–æ—â—å',
    'contacts': 'https://via.placeholder.com/400x300/4ECDC4/FFFFFF?text=üìû+–ö–æ–Ω—Ç–∞–∫—Ç—ã',
    'about_project': 'https://via.placeholder.com/400x300/45B7D1/FFFFFF?text=‚ÑπÔ∏è+–û+–ø—Ä–æ–µ–∫—Ç–µ',
    'adoption_info': 'https://via.placeholder.com/400x300/FFA07A/000000?text=üìù+–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
}

# üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
texts = load_all_texts()

# ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get('TOKEN')
if not TOKEN:
    logger.error("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    exit(1)

PORT = int(os.environ.get('PORT', 8080))

WEBHOOK_URL = (
    os.environ.get('RAILWAY_STATIC_URL') or 
    os.environ.get('RAILWAY_PUBLIC_DOMAIN') or
    os.environ.get('WEBHOOK_URL')
)

# üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
CHANNEL_USERNAME = 'Lapki_ruchki_Yalta_help'

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
logger.info(f"üîç TOKEN: {TOKEN[:10]}...{TOKEN[-5:]}")
logger.info(f"üîç WEBHOOK_URL: {WEBHOOK_URL}")
logger.info(f"üîç PORT: {PORT}")
logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(texts)}")

# üñºÔ∏è –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
def send_message_with_image(chat_id, text, image_key):
    try:
        image_url = IMAGES.get(image_key)
        if image_url:
            bot.send_photo(
                chat_id,
                image_url,
                caption=text,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            return True
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        bot.send_message(
            chat_id,
            text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        bot.send_message(
            chat_id,
            text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return False

# üè† –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –æ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@lru_cache(maxsize=1)
def get_adoption_posts():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –æ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    return [
        {
            'title': 'üê± –ö–æ—Ç–µ–Ω–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞ @Lapki_ruchki_Yalta_help',
            'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞\n–ü–æ–ª: –º–∞–ª—å—á–∏–∫\n–û–∫—Ä–∞—Å: —Ä—ã–∂–∏–π\n–ó–¥–æ—Ä–æ–≤, –∏—â–µ—Ç –¥–æ–º\n\nüìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram API',
            'photo': 'https://via.placeholder.com/400x300/FFB6C1/800080?text=üê±+–ö–æ—Ç–µ–Ω–æ–∫',
            'contact': '@Lapki_ruchki_Yalta_help',
            'date': datetime.now().strftime('%d.%m.%Y')
        },
        {
            'title': 'üò∫ –ö–æ—à–µ—á–∫–∞ –∏—â–µ—Ç –¥–æ–º',
            'description': '–í–æ–∑—Ä–∞—Å—Ç: 1 –≥–æ–¥\n–ü–æ–ª: –¥–µ–≤–æ—á–∫–∞\n–û–∫—Ä–∞—Å: —Ç—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–∞—è\n–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞, –ª–∞—Å–∫–æ–≤–∞—è',
            'photo': 'https://via.placeholder.com/400x300/98FB98/006400?text=üò∫+–ö–æ—à–µ—á–∫–∞',
            'contact': '@Lapki_ruchki_Yalta_help',
            'date': datetime.now().strftime('%d.%m.%Y')
        },
        {
            'title': 'üêà –í–∑—Ä–æ—Å–ª—ã–π –∫–æ—Ç',
            'description': '–í–æ–∑—Ä–∞—Å—Ç: 3 –≥–æ–¥–∞\n–ü–æ–ª: –º–∞–ª—å—á–∏–∫\n–û–∫—Ä–∞—Å: —Å–µ—Ä—ã–π –ø–æ–ª–æ—Å–∞—Ç—ã–π\n–°–ø–æ–∫–æ–π–Ω—ã–π, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã',
            'photo': 'https://via.placeholder.com/400x300/87CEEB/000080?text=üêà+–ö–æ—Ç',
            'contact': '@Lapki_ruchki_Yalta_help',
            'date': datetime.now().strftime('%d.%m.%Y')
        }
    ]

# üåê Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    try:
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return '', 200
        else:
            logger.warning(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π content-type: {request.headers.get('content-type')}")
            return 'Bad request', 400
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return 'Internal error', 500

@app.route('/')
def home():
    return {
        "status": "ü§ñ Bot is running!",
        "time": datetime.now().strftime('%H:%M:%S'),
        "date": datetime.now().strftime('%d.%m.%Y'),
        "bot": "@CatYalta_bot",
        "webhook": f"https://{WEBHOOK_URL}/{TOKEN}" if WEBHOOK_URL else "Not configured",
        "loaded_files": list(texts.keys()),
        "webhook_endpoint": f"/{TOKEN}"
    }

@app.route('/health')
def health():
    return {
        "status": "ok", 
        "time": datetime.now().isoformat(),
        "bot_info": "Telegram Bot Active",
        "webhook_configured": bool(WEBHOOK_URL)
    }

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route('/webhook-test')
def webhook_test():
    try:
        webhook_info = bot.get_webhook_info()
        return {
            "webhook_url": webhook_info.url,
            "pending_updates": webhook_info.pending_update_count,
            "last_error": webhook_info.last_error_message,
            "last_error_date": webhook_info.last_error_date
        }
    except Exception as e:
        return {"error": str(e)}, 500

# üé¨ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        bot.send_message(
            message.chat.id, 
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ª–∏—á–Ω—ã–º –∫–æ—à–∫–∞–º!</b>\n\nüêæ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=markup,
            parse_mode="HTML"
        )
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
@bot.message_handler(commands=['status'])
def status(message):
    try:
        now = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        webhook_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if WEBHOOK_URL else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        webhook_info = bot.get_webhook_info()
        
        status_text = f"""ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ @CatYalta_bot</b>

‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
‚è∞ –í—Ä–µ–º—è: <code>{now}</code>
üÜî –í–∞—à ID: <code>{message.from_user.id}</code>
üåê Webhook: {webhook_status}

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:</b>
üîó URL: <code>{webhook_info.url or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</code>
üì¨ –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: <code>{webhook_info.pending_update_count}</code>
üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: <code>{len(texts)}</code>"""

        if webhook_info.last_error_date:
            error_date = datetime.fromtimestamp(webhook_info.last_error_date)
            status_text += f"\n‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: <code>{webhook_info.last_error_message}</code>"
            status_text += f"\nüìÖ –í—Ä–µ–º—è –æ—à–∏–±–∫–∏: <code>{error_date.strftime('%d.%m.%Y %H:%M:%S')}</code>"

        bot.send_message(message.chat.id, status_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /status: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")

# üîß –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['debug'])
def debug_info(message):
    try:
        if message.from_user.id not in ADMIN_IDS:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
            
        debug_text = f"""üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

üåê <b>Webhook:</b>
‚Ä¢ URL: <code>{WEBHOOK_URL or '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}</code>
‚Ä¢ –ü–æ–ª–Ω—ã–π URL: <code>https://{WEBHOOK_URL}/{TOKEN[:10]}...</code>

üìÅ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>"""
        
        for key in texts.keys():
            debug_text += f"\n‚Ä¢ {key}.html: ‚úÖ"
            
        if not texts:
            debug_text += "\n‚ùå –§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            
        bot.send_message(message.chat.id, debug_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /debug: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏.")
