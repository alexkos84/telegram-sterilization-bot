import os
import telebot
from telebot import types
from flask import Flask, request, jsonify
from datetime import datetime
import time
import logging
import json
import requests
from bs4 import BeautifulSoup
import re
from typing import Dict, List, Optional
import concurrent.futures
from threading import Lock

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MultiChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏"""
    
    def __init__(self):
        # üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.channels = [
            {
                'username': '–ö–æ—Ç–∏–∫–∏_–Ø–ª—Ç–∞',
                'url': 'https://t.me/cats_yalta',
                'type': 'cats',  # –∫–æ—à–∫–∏
                'priority': 1  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1 - –≤—ã—Å–æ–∫–∏–π)
            },
            {
                'username': 'dogs_yalta_official',
                'url': 'https://t.me/dogs_yalta_official', 
                'type': 'dogs',  # —Å–æ–±–∞–∫–∏
                'priority': 1
            },
            {
                'username': 'yalta_animals_help',
                'url': 'https://t.me/yalta_animals_help',
                'type': 'all',  # –≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
                'priority': 2
            },
            {
                'username': 'crimea_pets_adoption',
                'url': 'https://t.me/crimea_pets_adoption',
                'type': 'all',
                'priority': 2
            },
            {
                'username': 'yalta_street_cats',
                'url': 'https://t.me/yalta_street_cats',
                'type': 'cats',
                'priority': 3
            }
        ]
        
        self.posts_cache = {
            'cats': [],
            'dogs': [],
            'all': []
        }
        self.last_update = {}
        self.update_lock = Lock()
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
    
    def parse_single_channel(self, channel: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"""
        try:
            web_url = f'https://t.me/s/{channel["username"]}'
            logger.info(f"üåê –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {channel['username']} ({channel['type']})")
            
            response = self.session.get(web_url, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            message_divs = soup.find_all('div', class_='tgme_widget_message')
            
            posts = []
            for div in message_divs[:10]:  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                post_data = self.parse_message_div(div, channel)
                if post_data and self.is_animal_related(post_data.get('text', '')):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —Å–º–µ—à–∞–Ω–Ω—ã–π
                    if channel['type'] == 'all':
                        post_data['type'] = self.detect_animal_type(post_data.get('text', ''))
                    else:
                        post_data['type'] = channel['type']
                    
                    post_data['source_channel'] = channel['username']
                    post_data['channel_priority'] = channel['priority']
                    posts.append(post_data)
            
            logger.info(f"‚úÖ {channel['username']}: –Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel['username']}: {e}")
            return []
    
    def get_channel_posts(self, channel_type: str = 'all', limit: int = 6) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        try:
            all_posts = []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø–∞—Ä—Å–∏—Ç—å
            channels_to_parse = []
            if channel_type == 'all':
                channels_to_parse = self.channels
            else:
                channels_to_parse = [c for c in self.channels 
                                   if c['type'] == channel_type or c['type'] == 'all']
            
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ {len(channels_to_parse)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–∏–ø–∞ '{channel_type}'")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
            with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
                future_to_channel = {
                    executor.submit(self.parse_single_channel, channel): channel 
                    for channel in channels_to_parse
                }
                
                for future in concurrent.futures.as_completed(future_to_channel):
                    channel = future_to_channel[future]
                    try:
                        posts = future.result()
                        all_posts.extend(posts)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ {channel['username']}: {e}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã
            filtered_posts = self.filter_and_sort_posts(all_posts, channel_type, limit)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with self.update_lock:
                self.posts_cache[channel_type] = filtered_posts
                self.last_update[channel_type] = datetime.now()
            
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(filtered_posts)} –ø–æ—Å—Ç–æ–≤ —Ç–∏–ø–∞ '{channel_type}'")
            return filtered_posts
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self.get_mock_posts(channel_type)
    
    def filter_and_sort_posts(self, posts: List[Dict], channel_type: str, limit: int) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç, –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã"""
        if not posts:
            return []
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
        if channel_type != 'all':
            posts = [p for p in posts if p.get('type') == channel_type]
        
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É (–ø—Ä–æ—Å—Ç–∞—è)
        seen_texts = set()
        unique_posts = []
        for post in posts:
            text_hash = hash(post.get('text', '')[:100])  # –•—ç—à –ø–µ—Ä–≤—ã—Ö 100 —Å–∏–º–≤–æ–ª–æ–≤
            if text_hash not in seen_texts:
                seen_texts.add(text_hash)
                unique_posts.append(post)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∫–∞–Ω–∞–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
        unique_posts.sort(key=lambda x: (
            x.get('channel_priority', 999),  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–Ω–∞–ª–∞
            -self.extract_timestamp(x.get('date', ''))  # –í—Ä–µ–º—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        ))
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ
        posts_with_photos = [p for p in unique_posts if p.get('has_photo')]
        posts_without_photos = [p for p in unique_posts if not p.get('has_photo')]
        
        result = posts_with_photos + posts_without_photos
        return result[:limit]
    
    def extract_timestamp(self, date_str: str) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç timestamp –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        try:
            if '–ù–µ–¥–∞–≤–Ω–æ' in date_str:
                return int(time.time())
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "03.08.2025 14:30"
            dt = datetime.strptime(date_str, '%d.%m.%Y %H:%M')
            return int(dt.timestamp())
        except:
            return 0
    
    def detect_animal_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∫–æ—à–∫–∞/—Å–æ–±–∞–∫–∞) –ø–æ —Ç–µ–∫—Å—Ç—É"""
        text_lower = text.lower()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        cat_keywords = [
            '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–º—É—Ä–∑', '–º—è—É', '–∫–∏—Å–∫–∞', '–∫–∏—Å—è',
            '–ø–µ—Ä—Å–∏–¥—Å–∫', '—Å–∏–∞–º—Å–∫', '–±—Ä–∏—Ç–∞–Ω—Å–∫', '—à–æ—Ç–ª–∞–Ω–¥—Å–∫', '–º–µ–π–Ω-–∫—É–Ω'
        ]
        dog_keywords = [
            '—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–≥–∞–≤', '–ª–∞–π–∫', '–æ–≤—á–∞—Ä–∫', '–¥–≤–æ—Ä–Ω—è–∂', '–º–µ—Ç–∏—Å',
            '—Ö–∞—Å–∫–∏', '–ª–∞–±—Ä–∞–¥–æ—Ä', '—Ä–µ—Ç—Ä–∏–≤–µ—Ä', '—Ç–µ—Ä—å–µ—Ä', '—à–ø–∏—Ü', '–±—É–ª—å–¥–æ–≥'
        ]
        
        cat_count = sum(1 for word in cat_keywords if word in text_lower)
        dog_count = sum(1 for word in dog_keywords if word in text_lower)
        
        if cat_count > dog_count:
            return 'cats'
        elif dog_count > cat_count:
            return 'dogs'
        else:
            # –ï—Å–ª–∏ –Ω–µ—è—Å–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–ª–æ–≤ (–∫–æ—Ç—ã —á–∞—â–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –∫–æ—Ä–æ—á–µ)
            if any(word in text_lower for word in ['–∫–æ—Ç', '–º—è—É']):
                return 'cats'
            return 'dogs'
    
    def parse_message_div(self, div, channel) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç"""
        try:
            # ID –ø–æ—Å—Ç–∞
            post_id = div.get('data-post', '').split('/')[-1] or str(int(time.time()))
            
            # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            text_div = div.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""
            
            if not text:
                return None
            
            # –î–∞—Ç–∞
            date_elem = div.find('time', datetime=True)
            date_str = self.parse_date(date_elem)
            
            # –§–æ—Ç–æ
            photo_url = self.extract_photo_url(div)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            title = self.extract_title(text)
            description = self.extract_description(text)
            contact = self.extract_contact(text)
            
            return {
                'id': f"{channel['username']}_{post_id}",
                'text': text,
                'date': date_str,
                'url': f"{channel['url']}/{post_id}",
                'title': title,
                'description': description,
                'contact': contact,
                'photo_url': photo_url,
                'has_photo': bool(photo_url),
                'type': channel.get('type', 'all'),
                'source_channel': channel['username']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞: {e}")
            return None
    
    def parse_date(self, date_elem) -> str:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if not date_elem:
            return "–ù–µ–¥–∞–≤–Ω–æ"
        
        try:
            dt = datetime.fromisoformat(date_elem['datetime'].replace('Z', '+00:00'))
            return dt.strftime('%d.%m.%Y %H:%M')
        except:
            return "–ù–µ–¥–∞–≤–Ω–æ"
    
    def extract_photo_url(self, div) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL —Ñ–æ—Ç–æ –∏–∑ –ø–æ—Å—Ç–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ
        photo_wrap = div.find('a', class_='tgme_widget_message_photo_wrap')
        if photo_wrap and photo_wrap.get('style'):
            match = re.search(r"background-image:url\('(.*?)'\)", photo_wrap['style'])
            if match:
                return match.group(1)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ
        img_tags = div.find_all('img')
        for img in img_tags:
            src = img.get('src', '')
            if 'photo' in src or 'image' in src:
                return src
        
        return None
    
    def extract_title(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        lines = text.split('\n')
        for line in lines[:3]:
            line = line.strip()
            if line and len(line) > 10:
                # –û—á–∏—Å—Ç–∫–∞ –æ—Ç —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                title = re.sub(r'[^\w\s\-\.,!?–∞-—è—ë–ê-–Ø–Å]', '', line)
                if len(title) > 60:
                    title = title[:60] + "..."
                return title or "–ñ–∏–≤–æ—Ç–Ω–æ–µ –∏—â–µ—Ç –¥–æ–º"
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π
        if any(word in text.lower() for word in ['–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω']):
            return "üê± –ö–æ—à–∫–∞ –∏—â–µ—Ç –¥–æ–º"
        elif any(word in text.lower() for word in ['—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å']):
            return "üê∂ –°–æ–±–∞–∫–∞ –∏—â–µ—Ç –¥–æ–º"
        else:
            return "üêæ –ñ–∏–≤–æ—Ç–Ω–æ–µ –∏—â–µ—Ç –¥–æ–º"
    
    def extract_description(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏
        clean_text = re.sub(r'@\w+|https?://\S+|\+?\d[\d\s\-\(\)]+', '', text)
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        if len(clean_text) > 250:
            return clean_text[:250] + "..."
        return clean_text
    
    def extract_contact(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        # –¢–µ–ª–µ—Ñ–æ–Ω—ã
        phone_pattern = r'\+?[78][\s\-]?\(?9\d{2}\)?\s?[\d\s\-]{7,10}'
        phones = re.findall(phone_pattern, text)
        
        # –Æ–∑–µ—Ä–Ω–µ–π–º—ã
        username_pattern = r'@\w+'
        usernames = re.findall(username_pattern, text)
        
        contacts = []
        if phones:
            contacts.extend(phones[:2])  # –ë–µ—Ä–µ–º –¥–æ 2 —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        if usernames:
            contacts.extend(usernames[:2])  # –ë–µ—Ä–µ–º –¥–æ 2 —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
        
        return ' ‚Ä¢ '.join(contacts) if contacts else "–°–º. –≤ –∫–∞–Ω–∞–ª–µ"
    
    def is_animal_related(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –∂–∏–≤–æ—Ç–Ω—ã–º"""
        animal_keywords = [
            # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            '–∫–æ—Ç', '–∫–æ—à–∫', '–∫–æ—Ç–µ–Ω', '–∫–æ—Ç–∏–∫', '–∫–∏—Å–∞',
            '—Å–æ–±–∞–∫', '—â–µ–Ω', '–ø–µ—Å', '–ø–µ—Å–∏–∫', '–¥–≤–æ—Ä–Ω—è–∂',
            '–∂–∏–≤–æ—Ç–Ω', '–ø–∏—Ç–æ–º–µ—Ü', '–∑–≤–µ—Ä—å',
            # –î–µ–π—Å—Ç–≤–∏—è
            '–ø—Ä–∏—Å—Ç—Ä–æ–π', '–¥–æ–º', '—Å–µ–º—å', '—Ö–æ–∑—è', '—É—Å—ã–Ω–æ–≤', '–≤–∑—è—Ç—å',
            '–Ω–∞–π–¥–µ–Ω', '–ø–æ—Ç–µ—Ä—è', '–∏—â–µ—Ç', '–∏—â—É', '–Ω—É–∂–µ–Ω',
            # –£—Ö–æ–¥
            '—Å—Ç–µ—Ä–∏–ª', '–ø—Ä–∏–≤–∏–≤–∫', '–ª–µ—á–µ–Ω–∏', '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä',
            '–∫–æ—Ä–º', '—É—Ö–æ–¥', '—Å–æ–¥–µ—Ä–∂–∞–Ω'
        ]
        
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in animal_keywords)
    
    def get_cached_posts(self, channel_type: str = 'all') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        with self.update_lock:
            last_update = self.last_update.get(channel_type)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å—Ç–∞—Ä—ã–π (30 –º–∏–Ω—É—Ç)
            if (not last_update or 
                (datetime.now() - last_update).seconds > 1800 or
                not self.posts_cache.get(channel_type)):
                
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è —Ç–∏–ø–∞ '{channel_type}'")
                try:
                    return self.get_channel_posts(channel_type)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
                    return self.posts_cache.get(channel_type, []) or self.get_mock_posts(channel_type)
            
            return self.posts_cache.get(channel_type, [])
    
    def get_mock_posts(self, channel_type: str = 'cats') -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã"""
        base_posts = {
            'cats': [
                {
                    'id': 'mock_cat_1',
                    'title': 'üê± –†—ã–∂–∏–π –∫–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫ –∏—â–µ—Ç –¥–æ–º',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 2 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —Ä—ã–∂–∏–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –ø—Ä–∏–≤–∏—Ç, –∏–≥—Ä–∏–≤—ã–π –∏ –ª–∞—Å–∫–æ–≤—ã–π.',
                    'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                    'url': 'https://t.me/cats_yalta/1001',
                    'contact': '@yalta_cats ‚Ä¢ +7 978 123-45-67',
                    'photo_url': 'https://via.placeholder.com/600x400/FF6B35/FFFFFF?text=üê±+–ö–æ—Ç–µ–Ω–æ–∫+–ú—É—Ä–∑–∏–∫',
                    'has_photo': True,
                    'type': 'cats',
                    'source_channel': '–ö–æ—Ç–∏–∫–∏_–Ø–ª—Ç–∞'
                },
                {
                    'id': 'mock_cat_2', 
                    'title': 'üê± –¢—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–∞—è –∫–æ—à–µ—á–∫–∞ –ú–∞—à–∞',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 1 –≥–æ–¥, –¥–µ–≤–æ—á–∫–∞, —Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞, –ø—Ä–∏–≤–∏—Ç–∞. –°–ø–æ–∫–æ–π–Ω–∞—è, –ª–∞—Å–∫–æ–≤–∞—è.',
                    'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                    'url': 'https://t.me/yalta_animals_help/2002',
                    'contact': '@animal_volunteer ‚Ä¢ +7 978 234-56-78',
                    'photo_url': 'https://via.placeholder.com/600x400/8B4513/FFFFFF?text=üê±+–ö–æ—à–µ—á–∫–∞+–ú–∞—à–∞',
                    'has_photo': True,
                    'type': 'cats',
                    'source_channel': 'yalta_animals_help'
                }
            ],
            'dogs': [
                {
                    'id': 'mock_dog_1',
                    'title': 'üê∂ –©–µ–Ω–æ–∫ –ë–æ–±–∏–∫ –∏—â–µ—Ç —Å–µ–º—å—é',
                    'description': '–í–æ–∑—Ä–∞—Å—Ç: 4 –º–µ—Å—è—Ü–∞, –º–∞–ª—å—á–∏–∫, —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π –æ–∫—Ä–∞—Å. –ó–¥–æ—Ä–æ–≤, –∞–∫—Ç–∏–≤–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π.',
                    'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                    'url': 'https://t.me/dogs_yalta_official/3001',
                    'contact': '@dog_volunteers ‚Ä¢ +7 978 345-67-89',
                    'photo_url': 'https://via.placeholder.com/600x400/4682B4/FFFFFF?text=üê∂+–©–µ–Ω–æ–∫+–ë–æ–±–∏–∫',
                    'has_photo': True,
                    'type': 'dogs',
                    'source_channel': 'dogs_yalta_official'
                }
            ]
        }
        
        if channel_type == 'all':
            return base_posts['cats'] + base_posts['dogs']
        
        return base_posts.get(channel_type, base_posts['cats'])
    
    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞"""
        return {
            'channels_total': len(self.channels),
            'channels_active': len([c for c in self.channels if c['priority'] <= 2]),
            'cache_status': {
                'cats': len(self.posts_cache.get('cats', [])),
                'dogs': len(self.posts_cache.get('dogs', [])),
                'all': len(self.posts_cache.get('all', []))
            },
            'last_updates': {
                k: v.strftime('%H:%M:%S') if v else '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å' 
                for k, v in self.last_update.items()
            }
        }

# –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
class CatBotWithPhotos:
    """–ë–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.token = os.environ.get('TOKEN')
        if not self.token:
            logger.error("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)
        
        self.bot = telebot.TeleBot(self.token)
        self.parser = MultiChannelParser()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
        self.app = Flask(__name__)
        self.port = int(os.environ.get('PORT', 8080))
        self.webhook_url = os.environ.get('WEBHOOK_URL')
        self.stats = {"users": set(), "messages": 0}
        
        self.setup_handlers()
        self.setup_routes()
    
    def send_post(self, chat_id: int, post: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            emoji = 'üê±' if post['type'] == 'cats' else 'üê∂'
            source = post.get('source_channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            
            post_text = (
                f"{emoji} <b>{post['title']}</b>\n\n"
                f"{post['description']}\n\n"
                f"üìÖ {post['date']}\n"
                f"üìû {post['contact']}\n"
                f"üì∫ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                f"üîó <a href='{post['url']}'>–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç</a>"
            )
            
            if len(post_text) > 1024:
                post_text = post_text[:1000] + "..."
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ
            if post.get('photo_url'):
                try:
                    self.bot.send_photo(
                        chat_id,
                        post['photo_url'],
                        caption=post_text,
                        parse_mode="HTML",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=post['url'])
                        )
                    )
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            self.bot.send_message(
                chat_id,
                post_text,
                parse_mode="HTML",
                disable_web_page_preview=False,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=post['url'])
                )
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    def send_channel_posts(self, chat_id: int, animal_type: str = 'cats'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            posts = self.parser.get_cached_posts(animal_type)
            
            if not posts:
                channels_text = '\n'.join([
                    f"‚Ä¢ {c['url']}" for c in self.parser.channels 
                    if c['type'] == animal_type or c['type'] == 'all'
                ])
                
                self.bot.send_message(
                    chat_id,
                    f"üòø –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
                    f"üì¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª—ã:\n{channels_text}"
                )
                return
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö
            stats = self.parser.get_stats()
            header_text = (
                f"{'üê± –ö–û–®–ö–ò' if animal_type == 'cats' else 'üê∂ –°–û–ë–ê–ö–ò'} –ò–©–£–¢ –î–û–ú\n\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(posts)}\n"
                f"üì∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['channels_active']}\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['last_updates'].get(animal_type, '–ù–µ–¥–∞–≤–Ω–æ')}"
            )
            
            self.bot.send_message(chat_id, header_text, parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
            for i, post in enumerate(posts):
                self.send_post(chat_id, post)
                time.sleep(0.7)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                
                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 –ø–æ—Å—Ç–∞
                if i > 0 and (i + 1) % 3 == 0 and i < len(posts) - 1:
                    remaining = len(posts) - i - 1
                    self.bot.send_message(
                        chat_id, 
                        f"üìç –ü–æ–∫–∞–∑–∞–Ω–æ {i + 1} –∏–∑ {len(posts)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
                        f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –µ—â–µ {remaining}...",
                        parse_mode="HTML"
                    )
                    time.sleep(1)
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            channels_links = '\n'.join([
                f"‚Ä¢ <a href='{c['url']}'>{c['username']}</a>" 
                for c in self.parser.channels 
                if c['type'] == animal_type or c['type'] == 'all'
            ])
            
            self.bot.send_message(
                chat_id,
                f"‚úÖ <b>–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!</b>\n\n"
                f"üí° <b>–ö–∞–∫ –ø–æ–º–æ—á—å:</b>\n"
                f"üè† <b>–í–∑—è—Ç—å {'–∫–æ—à–∫—É' if animal_type == 'cats' else '—Å–æ–±–∞–∫—É'}:</b> "
                f"–°–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üì¢ <b>–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n{channels_links}\n\n"
                f"ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b> –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–π –∫–∞–Ω–∞–ª",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–ø—Ä—è–º—É—é."
            )

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        return markup
    
    def get_adoption_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º", "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º")
        markup.add("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup
    
    def get_sterilization_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è", "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        markup.add("üîô –ù–∞–∑–∞–¥")
        return markup

    def load_html_file(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ assets"""
        try:
            with open(f'assets/{filename}', 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML: {e}")
            return f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ({filename})"

    def setup_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üêæ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ª–∏—á–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã
üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –∂–∏–≤–æ—Ç–Ω—ã–µ –∏—â—É—Ç –¥–æ–º
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> - —Å–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –Ω–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
            
            self.bot.send_message(
                message.chat.id, 
                welcome_text, 
                parse_mode="HTML",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.bot.message_handler(commands=['update'])
        def update_handler(message):
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
            try:
                self.bot.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—è—é –ø–æ—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...")
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à
                with self.parser.update_lock:
                    self.parser.posts_cache = {'cats': [], 'dogs': [], 'all': []}
                    self.parser.last_update = {}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∏–ø—ã
                cats_posts = self.parser.get_channel_posts('cats')
                dogs_posts = self.parser.get_channel_posts('dogs')
                
                stats = self.parser.get_stats()
                
                result_text = (
                    f"‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                    f"üê± –ö–æ—à–∫–∏: {len(cats_posts)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
                    f"üê∂ –°–æ–±–∞–∫–∏: {len(dogs_posts)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
                    f"üì∫ –ö–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {stats['channels_total']}\n"
                    f"üîÑ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                
                self.bot.send_message(message.chat.id, result_text, parse_mode="HTML")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                self.bot.send_message(
                    message.chat.id, 
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        
        @self.bot.message_handler(commands=['stats'])
        def stats_handler(message):
            """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
            try:
                stats = self.parser.get_stats()
                
                stats_text = (
                    f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–û–í</b>\n\n"
                    f"üì∫ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {stats['channels_total']}\n"
                    f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['channels_active']}\n\n"
                    f"üìã <b>–ö—ç—à –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>\n"
                    f"üê± –ö–æ—à–∫–∏: {stats['cache_status']['cats']}\n"
                    f"üê∂ –°–æ–±–∞–∫–∏: {stats['cache_status']['dogs']}\n"
                    f"üîÑ –û–±—â–∏–π: {stats['cache_status']['all']}\n\n"
                    f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n"
                )
                
                for type_name, time_str in stats['last_updates'].items():
                    emoji = 'üê±' if type_name == 'cats' else ('üê∂' if type_name == 'dogs' else 'üîÑ')
                    stats_text += f"{emoji} {type_name}: {time_str}\n"
                
                # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                stats_text += "\nüì∫ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
                for i, channel in enumerate(self.parser.channels, 1):
                    priority_emoji = "‚≠ê" * (4 - channel['priority'])
                    type_emoji = 'üê±' if channel['type'] == 'cats' else ('üê∂' if channel['type'] == 'dogs' else 'üêæ')
                    stats_text += f"{i}. {type_emoji} {channel['username']} {priority_emoji}\n"
                
                self.bot.send_message(message.chat.id, stats_text, parse_mode="HTML")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        @self.bot.message_handler(func=lambda m: m.text == "üè• –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def sterilization_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            try:
                with open('assets/images/sterilization.jpg', 'rb') as photo:
                    self.bot.send_photo(
                        message.chat.id,
                        photo,
                        caption="üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                        parse_mode="HTML",
                        reply_markup=self.get_sterilization_keyboard()
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                self.bot.send_message(
                    message.chat.id,
                    "üè• <b>–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                    parse_mode="HTML",
                    reply_markup=self.get_sterilization_keyboard()
                )
        
        @self.bot.message_handler(func=lambda m: m.text == "üí∞ –ü–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def paid_sterilization_handler(message):
            self.bot.send_message(
                message.chat.id,
                self.load_html_file('paid_text.html'),
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: m.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è")
        def free_sterilization_handler(message):
            self.bot.send_message(
                message.chat.id,
                self.load_html_file('free_text.html'),
                parse_mode="HTML"
            )
        
        @self.bot.message_handler(func=lambda m: True)
        def message_handler(message):
            self.stats["users"].add(message.from_user.id)
            self.stats["messages"] += 1
            
            text = message.text
            chat_id = message.chat.id
            
            try:
                if text == "üè† –ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ":
                    stats = self.parser.get_stats()
                    info_text = f"""üè† <b>–ü—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b>

üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º {stats['channels_active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üê± <b>–ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤

üê∂ <b>–°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤

üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>
–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
                    
                    self.bot.send_message(
                        chat_id, 
                        info_text, 
                        parse_mode="HTML",
                        reply_markup=self.get_adoption_keyboard()
                    )
                
                elif text == "üê± –ö–æ—à–∫–∏ –∏—â—É—Ç –¥–æ–º":
                    self.send_channel_posts(chat_id, 'cats')
                
                elif text == "üê∂ –°–æ–±–∞–∫–∏ –∏—â—É—Ç –¥–æ–º":
                    self.send_channel_posts(chat_id, 'dogs')
                
                elif text == "üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
                    channels_list = []
                    for channel in self.parser.channels:
                        type_name = {"cats": "–∫–æ—à–∫–∏", "dogs": "—Å–æ–±–∞–∫–∏", "all": "–≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ"}[channel['type']]
                        channels_list.append(f"‚Ä¢ <a href='{channel['url']}'>{channel['username']}</a> ({type_name})")
                    
                    info_text = f"""üìù <b>–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>

üì∫ <b>–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>
{chr(10).join(channels_list)}

‚úçÔ∏è <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª
2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª
3Ô∏è‚É£ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
4Ô∏è‚É£ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤:
   ‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: @yalta_animals_coordinator
   ‚Ä¢ –ö–æ—à–∫–∏: +7 978 144-90-70
   ‚Ä¢ –°–æ–±–∞–∫–∏: +7 978 000-00-02

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>
üîπ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
üîπ –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –æ–∫—Ä–∞—Å, —Ä–∞–∑–º–µ—Ä
üîπ –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
üîπ –ó–¥–æ—Ä–æ–≤—å–µ (–ø—Ä–∏–≤–∏–≤–∫–∏, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è)
üîπ –ò—Å—Ç–æ—Ä–∏—è (–Ω–∞–π–¥–µ–Ω, –æ—Ç —Ö–æ–∑—è–µ–≤ –∏ —Ç.–¥.)
üîπ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏"""
                    
                    self.bot.send_message(chat_id, info_text, parse_mode="HTML")
                
                elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                    contacts_text = """üìû <b>–ö–û–ù–¢–ê–ö–¢–´ –í–û–õ–û–ù–¢–ï–†–û–í</b>

üë• <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã:</b>
üîπ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: @yalta_animals_main
üîπ –ö–æ—à–∫–∏: +7 978 144-90-70
üîπ –°–æ–±–∞–∫–∏: +7 978 234-56-78
üîπ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ: +7 978 345-67-89

üè• <b>–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–ª–∏–Ω–∏–∫–∏:</b>
üîπ "–ê–π–±–æ–ª–∏—Ç": +7 978 456-78-90
üîπ "–í–µ—Ç–ú–∏—Ä": +7 978 567-89-01
üîπ "–ó–æ–æ–ª–µ–∫–∞—Ä—å": +7 978 678-90-12

üì± <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
üîπ Instagram: @yalta_street_animals
üîπ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.com/yalta_animals
üîπ Facebook: fb.com/yalta.animals.help

‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 9:00-21:00
–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏: –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"""
                    
                    self.bot.send_message(chat_id, contacts_text, parse_mode="HTML")
                
                elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
                    stats = self.parser.get_stats()
                    about_text = f"""‚ÑπÔ∏è <b>–û –ü–†–û–ï–ö–¢–ï "–õ–ê–ü–ö–ò-–†–£–ß–ö–ò –Ø–õ–¢–ê"</b>

üéØ <b>–ù–∞—à–∞ –º–∏—Å—Å–∏—è:</b>
–°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–º–æ—â—å –±–µ–∑–¥–æ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –Ø–ª—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É

üìä <b>–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ 2024-2025:</b>
üîπ –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–æ: 500+ –∫–æ—à–µ–∫, 200+ —Å–æ–±–∞–∫
üîπ –ü—Ä–∏—Å—Ç—Ä–æ–µ–Ω–æ –≤ —Å–µ–º—å–∏: 300+ –∫–æ—Ç—è—Ç, 150+ —â–µ–Ω–∫–æ–≤
üîπ –í—ã–ª–µ—á–µ–Ω–æ: 400+ –∂–∏–≤–æ—Ç–Ω—ã—Ö
üîπ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: 50+
üîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª–æ–≤: {stats['channels_total']}

ü§ù <b>–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º:</b>
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
‚Ä¢ –ü–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ –¥–æ–º–æ–≤
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ª–µ—á–µ–Ω–∏—è –∏ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:</b>
–°–±–µ—Ä–±–∞–Ω–∫: 2202 2020 1234 5678
–ÆMoney: 4100 1234 5678 9012
PayPal: donate@yalta-animals.org

ü§ù <b>–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ü–æ–º–æ—â—å –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ  
‚Ä¢ –§–æ—Ç–æ—Å—ä–µ–º–∫–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ –ü–æ–∏—Å–∫ —Ö–æ–∑—è–µ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
‚Ä¢ –°–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ª–µ—á–µ–Ω–∏–µ

–ü–∏—à–∏—Ç–µ: @yalta_volunteer_coordinator"""
                    
                    self.bot.send_message(chat_id, about_text, parse_mode="HTML")
                
                elif text == "üîô –ù–∞–∑–∞–¥":
                    self.bot.send_message(
                        chat_id, 
                        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                        reply_markup=self.get_main_keyboard()
                    )
                
                else:
                    help_text = """‚ùì <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üîò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

üì± <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/update - –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è  
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤

üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b>
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"""
                    
                    self.bot.send_message(
                        chat_id,
                        help_text,
                        parse_mode="HTML",
                        reply_markup=self.get_main_keyboard()
                    )
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.bot.send_message(
                    chat_id, 
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start",
                    reply_markup=self.get_main_keyboard()
                )
    
    def setup_routes(self):
        """Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        @self.app.route(f'/{self.token}', methods=['POST'])
        def webhook():
            try:
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    update = telebot.types.Update.de_json(json_string)
                    self.bot.process_new_updates([update])
                    return '', 200
                return 'Bad request', 400
            except Exception as e:
                logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")
                return 'Internal error', 500
        
        @self.app.route('/')
        def home():
            stats = self.parser.get_stats()
            return jsonify({
                "status": "ü§ñ Multi-Channel Animal Bot Running",
                "time": datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                "bot_stats": {
                    "users": len(self.stats["users"]),
                    "messages": self.stats["messages"]
                },
                "parser_stats": stats,
                "channels": [
                    {
                        "name": c['username'],
                        "url": c['url'],
                        "type": c['type'],
                        "priority": c['priority']
                    } for c in self.parser.channels
                ]
            })
        
        @self.app.route('/posts')
        def posts_api():
            """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"""
            try:
                animal_type = request.args.get('type', 'all')
                limit = int(request.args.get('limit', 10))
                
                posts = self.parser.get_cached_posts(animal_type)[:limit]
                stats = self.parser.get_stats()
                
                return jsonify({
                    "status": "ok",
                    "type": animal_type,
                    "count": len(posts),
                    "total_channels": stats['channels_total'],
                    "posts": posts,
                    "cache_info": stats['cache_status'],
                    "last_update": stats['last_updates'].get(animal_type, 'Never')
                })
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø–æ—Å—Ç–æ–≤: {e}")
                return jsonify({"status": "error", "message": str(e)}), 500
        
        @self.app.route('/channels')
        def channels_api():
            """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö"""
            try:
                return jsonify({
                    "status": "ok",
                    "channels": [
                        {
                            "username": c['username'],
                            "url": c['url'],
                            "type": c['type'],
                            "priority": c['priority']
                        } for c in self.parser.channels
                    ],
                    "stats": self.parser.get_stats()
                })
            except Exception as e:
                return jsonify({"status": "error", "message": str(e)}), 500
        
        @self.app.route('/force-update')
        def force_update():
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API"""
            try:
                # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
                with self.parser.update_lock:
                    self.parser.posts_cache = {'cats': [], 'dogs': [], 'all': []}
                    self.parser.last_update = {}
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                cats_posts = self.parser.get_channel_posts('cats', limit=5)
                dogs_posts = self.parser.get_channel_posts('dogs', limit=5)
                
                return jsonify({
                    "status": "ok",
                    "message": "Update completed",
                    "results": {
                        "cats": len(cats_posts),
                        "dogs": len(dogs_posts)
                    },
                    "timestamp": datetime.now().isoformat()
                })
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                return jsonify({"status": "error", "message": str(e)}), 500
    
    def setup_webhook(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            self.bot.remove_webhook()
            time.sleep(2)
            
            if not self.webhook_url:
                logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
                return False
            
            full_url = f"https://{self.webhook_url}/{self.token}"
            result = self.bot.set_webhook(url=full_url)
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Multi-Channel Animal Bot...")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö
        logger.info(f"üì∫ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(self.parser.channels)}")
        for channel in self.parser.channels:
            logger.info(f"   ‚Ä¢ {channel['username']} ({channel['type']}) - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {channel['priority']}")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤
        try:
            logger.info("üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤...")
            cats_posts = self.parser.get_cached_posts('cats')
            dogs_posts = self.parser.get_cached_posts('dogs')
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ: üê±{len(cats_posts)} –∫–æ—à–µ–∫, üê∂{len(dogs_posts)} —Å–æ–±–∞–∫")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # –ó–∞–ø—É—Å–∫
        if self.setup_webhook():
            logger.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            self.app.run(host='0.0.0.0', port=self.port)
        else:
            logger.info("üì± –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
            self.bot.polling(none_stop=True, interval=1)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    os.makedirs('assets/images', exist_ok=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    if not os.path.exists('assets/free_text.html'):
        with open('assets/free_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üÜì –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–ü—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–º–æ—â–∏:</b>
üîπ –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≥. –Ø–ª—Ç–∞
üîπ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ "–õ–∞–ø–∫–∏-—Ä—É—á–∫–∏"
üîπ –ü—Ä–æ–≥—Ä–∞–º–º–∞ "–î–æ–±—Ä—ã–µ —Å–µ—Ä–¥—Ü–∞"

üìã <b>–ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å:</b>
‚úÖ –í–ª–∞–¥–µ–ª—å—Ü—ã –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
‚úÖ –ú–∞–ª–æ–∏–º—É—â–∏–µ —Å–µ–º—å–∏ (—Å–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö)
‚úÖ –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã (—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ)
‚úÖ –í–æ–ª–æ–Ω—Ç–µ—Ä—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤

üìû <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫:</b>
üîπ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: +7 978 123-45-10
üîπ –ö–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç": +7 978 123-45-11
üîπ –û–Ω–ª–∞–π–Ω –∑–∞—è–≤–∫–∞: yalta-animals.org/free

üìç <b>–ì–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è:</b>
‚Ä¢ –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç" - —É–ª. –ö–∏—Ä–æ–≤–∞, 15
‚Ä¢ –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞ "–î–æ–±—Ä—ã–π –¥–æ–∫—Ç–æ—Ä" - —É–ª. –õ–µ–Ω–∏–Ω–∞, 23

‚è∞ <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞: 9:00-18:00
–°—É–±–±–æ—Ç–∞: 9:00-14:00

üìã <b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>
‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∏—Ç–µ–ª—è
‚Ä¢ –°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö (–¥–ª—è –ª—å–≥–æ—Ç–Ω–∏–∫–æ–≤)
‚Ä¢ –í–µ—Ç–ø–∞—Å–ø–æ—Ä—Ç –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)""")

    if not os.path.exists('assets/paid_text.html'):
        with open('assets/paid_text.html', 'w', encoding='utf-8') as f:
            f.write("""<b>üí∞ –ü–õ–ê–¢–ù–ê–Ø –°–¢–ï–†–ò–õ–ò–ó–ê–¶–ò–Ø</b>

üè• <b>–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏:</b>

üîπ <b>"–ê–π–±–æ–ª–∏—Ç"</b> - —É–ª. –ö–∏—Ä–æ–≤–∞, 15
   ‚Ä¢ –ö–æ—à–∫–∏: –æ—Ç 2800‚ÇΩ ‚Ä¢ –°–æ–±–∞–∫–∏: –æ—Ç 4500‚ÇΩ
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 978 123-45-12
   
üîπ <b>"–í–µ—Ç–ú–∏—Ä"</b> - —É–ª. –õ–µ–Ω–∏–Ω–∞, 45  
   ‚Ä¢ –ö–æ—à–∫–∏: –æ—Ç 2500‚ÇΩ ‚Ä¢ –°–æ–±–∞–∫–∏: –æ—Ç 4200‚ÇΩ
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 978 123-45-13

üîπ <b>"–ó–æ–æ–ª–µ–∫–∞—Ä—å"</b> - —É–ª. –°–∞–¥–æ–≤–∞—è, 8
   ‚Ä¢ –ö–æ—à–∫–∏: –æ—Ç 3000‚ÇΩ ‚Ä¢ –°–æ–±–∞–∫–∏: –æ—Ç 4800‚ÇΩ
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 978 123-45-14

üåü <b>–í–∫–ª—é—á–µ–Ω–æ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b>
‚úîÔ∏è –ü—Ä–µ–¥–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä
‚úîÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ª–æ—Å—Ç–Ω–∞—è
‚úîÔ∏è –û–±—â–∏–π –Ω–∞—Ä–∫–æ–∑
‚úîÔ∏è –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚úîÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏

üíä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏: –æ—Ç 800‚ÇΩ
‚Ä¢ –ö–∞—Ä–¥–∏–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –æ—Ç 600‚ÇΩ  
‚Ä¢ –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–ø–æ–Ω–∞: 300‚ÇΩ
‚Ä¢ –û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã: –æ—Ç 400‚ÇΩ

üí° <b>–°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏:</b>
üî∏ –í–æ–ª–æ–Ω—Ç–µ—Ä–∞–º –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ - 20%
üî∏ –ü—Ä–∏ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏ 2+ –∂–∏–≤–æ—Ç–Ω—ã—Ö - 15%
üî∏ –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞–º - 10%
üî∏ –ê–∫—Ü–∏—è "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö–æ–∑—è–∏–Ω" - –¥–æ 25%

üìû <b>–ó–∞–ø–∏—Å—å –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>
–ó–≤–æ–Ω–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ, –∑–∞–ø–∏—Å—å –≤–µ–¥–µ—Ç—Å—è –Ω–∞ 1-2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥""")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        bot = CatBotWithPhotos()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise
